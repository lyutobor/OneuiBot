# daily_onecoin_logic.py
import asyncio
import html
import random
from datetime import datetime, timedelta, timezone as dt_timezone, date as DDate
from typing import Optional, List, Dict

from aiogram import Router, Bot, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from pytz import timezone as pytz_timezone

from config import Config
import database
from utils import get_user_mention_html, send_telegram_log
from onecoin_phrases import ( # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
    ONECOIN_CMD_SUCCESS_LOW_TIER,
    ONECOIN_CMD_SUCCESS_MID_TIER,
    ONECOIN_CMD_SUCCESS_HIGH_TIER,
    ONECOIN_CMD_SUCCESS_JACKPOT,
    ONECOIN_CMD_COOLDOWN,
    ONECOIN_CMD_ERROR
)
from achievements_logic import check_and_grant_achievements # –ï—Å–ª–∏ –±—É–¥—É—Ç –∞—á–∏–≤–∫–∏

import logging

logger = logging.getLogger(__name__)
daily_onecoin_router = Router() # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä

# --- –ö–æ–º–∞–Ω–¥–∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ù–∞–≥—Ä–∞–¥—ã OneCoin ---
@daily_onecoin_router.message(Command(*Config.DAILY_ONECOIN_ALIASES, ignore_case=True))
async def cmd_daily_onecoin_claim(message: Message, bot: Bot):
    if not message.from_user:
        await message.reply("–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é, –ø—Ä–æ—Ö–æ–¥–∏–º–µ—Ü!", disable_web_page_preview=True)
        return

    user_id = message.from_user.id
    chat_id = message.chat.id
    user_full_name = message.from_user.full_name
    user_username = message.from_user.username
    user_link = get_user_mention_html(user_id, user_full_name, user_username)
    
    current_utc_time = datetime.now(dt_timezone.utc)
    local_tz = pytz_timezone(Config.TIMEZONE)
    current_local_time = current_utc_time.astimezone(local_tz)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å" –¥–ª—è –∫—É–ª–¥–∞—É–Ω–∞
    effective_current_claim_day = current_local_time.date()
    if current_local_time.hour < Config.RESET_HOUR:
        effective_current_claim_day -= timedelta(days=1)

    logger.info(f"CMD_DAILY_ONECOIN: User {user_id} in chat {chat_id}. Effective claim date: {effective_current_claim_day}")

    user_chat_lock = await database.get_user_chat_lock(user_id, chat_id)
    async with user_chat_lock:
        conn = None
        try:
            conn = await database.get_connection()
            async with conn.transaction():
                # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
                last_claim_utc = await database.get_user_daily_onecoin_claim_status(user_id, chat_id, conn_ext=conn)
                
                if last_claim_utc:
                    last_claim_local_time = last_claim_utc.astimezone(local_tz)
                    effective_last_claim_day = last_claim_local_time.date()
                    if last_claim_local_time.hour < Config.RESET_HOUR:
                        effective_last_claim_day -= timedelta(days=1)
                    
                    if effective_last_claim_day == effective_current_claim_day:
                        next_reset_time_display_local = current_local_time.replace(hour=Config.RESET_HOUR, minute=0, second=0, microsecond=0)
                        if current_local_time.hour >= Config.RESET_HOUR:
                            next_reset_time_display_local += timedelta(days=1)
                        
                        cooldown_phrase = random.choice(ONECOIN_CMD_COOLDOWN).format(
                            cooldown_ends_time=next_reset_time_display_local.strftime('%H:%M')
                        )
                        await message.reply(f"{user_link}, {cooldown_phrase}", disable_web_page_preview=True, parse_mode="HTML")
                        return
                
                # 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã OneCoin
                chosen_tier_config = random.choices(
                    Config.DAILY_ONECOIN_REWARD_TIERS, 
                    weights=[t[1] for t in Config.DAILY_ONECOIN_REWARD_TIERS], 
                    k=1
                )[0]
                (min_c, max_c), _ = chosen_tier_config
                onecoin_reward = random.randint(min_c, max_c)

                # 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_balance = await database.update_user_onecoins(
                    user_id, chat_id, onecoin_reward,
                    username=user_username, full_name=user_full_name,
                    chat_title=(message.chat.title or f"–ß–∞—Ç {chat_id}"), 
                    conn_ext=conn
                )

                # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
                await database.update_user_daily_onecoin_claim_time(user_id, chat_id, current_utc_time, conn_ext=conn)

                # 5. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ "–¥–µ—Ä–∑–∫–æ–≥–æ" —Å–æ–æ–±—â–µ–Ω–∏—è
                reply_phrase_template = ""
                if min_c == 500 and max_c == 500: # –î–∂–µ–∫–ø–æ—Ç
                    reply_phrase_template = random.choice(ONECOIN_CMD_SUCCESS_JACKPOT)
                elif 161 <= min_c <= 200: # –í—ã—Å–æ–∫–∏–π —Ç–∏—Ä (–∫—Ä–æ–º–µ –¥–∂–µ–∫–ø–æ—Ç–∞)
                    reply_phrase_template = random.choice(ONECOIN_CMD_SUCCESS_HIGH_TIER)
                elif 51 <= min_c <= 160: # –°—Ä–µ–¥–Ω–∏–π —Ç–∏—Ä
                    reply_phrase_template = random.choice(ONECOIN_CMD_SUCCESS_MID_TIER)
                else: # –ù–∏–∑–∫–∏–π —Ç–∏—Ä (30-50)
                    reply_phrase_template = random.choice(ONECOIN_CMD_SUCCESS_LOW_TIER)
                
                # –î–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—É–º–º (–µ—Å–ª–∏ –±—ã –æ–Ω–∏ –±—ã–ª–∏, —Å–µ–π—á–∞—Å –∏—Ö –Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ DAILY_ONECOIN_REWARD_TIERS)
                # if onecoin_reward < 0:
                #    reply_phrase_template = random.choice(ONECOIN_CMD_SUCCESS_NEGATIVE_PHRASES)
                #    reply_message = reply_phrase_template.format(amount_abs=abs(onecoin_reward))
                # else:

                reply_message = reply_phrase_template.format(amount=onecoin_reward)
                
                full_reply_message = f"{user_link}! {reply_message}\nüí∞ –¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance}</b> OneCoin."
                
                await message.reply(full_reply_message, disable_web_page_preview=True, parse_mode="HTML")

                await send_telegram_log(bot, f"ü™ô {user_link} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /onecoin –∏ –ø–æ–ª—É—á–∏–ª {onecoin_reward} OneCoin. –ë–∞–ª–∞–Ω—Å: {new_balance}.")
                
                # 6. –í—ã–∑–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –±—É–¥—É—Ç)
                # await check_and_grant_achievements(user_id, chat_id, bot, daily_onecoin_claimed_amount=onecoin_reward)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /onecoin –¥–ª—è {user_link} –≤ —á–∞—Ç–µ {chat_id}: {e}", exc_info=True)
            await message.reply(ONECOIN_CMD_ERROR, disable_web_page_preview=True)
        finally:
            if conn and not conn.is_closed():
                await conn.close()

def setup_daily_onecoin_handlers(dp: Router): # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    dp.include_router(daily_onecoin_router)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /onecoin (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")