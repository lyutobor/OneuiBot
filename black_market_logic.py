# black_market_logic.py
import asyncio
import html
import random
from datetime import datetime, timedelta, timezone as dt_timezone, date as DDate
from typing import Optional, List, Dict, Any, Tuple

from aiogram import Router, Bot, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from pytz import timezone as pytz_timezone
from achievements_logic import check_and_grant_achievements 

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from config import Config
import database # –û—Å—Ç–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –≤—Å–µ–≥–æ –º–æ–¥—É–ª—è database
from utils import get_user_mention_html, send_telegram_log, get_current_price
import json

# –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö
from phone_data import PHONE_MODELS as PHONE_MODELS_STANDARD_LIST, PHONE_COLORS
from item_data import PHONE_COMPONENTS, PHONE_CASES
from exclusive_phone_data import EXCLUSIVE_PHONE_MODELS, VINTAGE_PHONE_KEYS_FOR_BM

import logging

logger = logging.getLogger(__name__)
black_market_router = Router()

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–ª—é—á—É
PHONE_MODELS_STD_DICT = {phone_info["key"]: phone_info for phone_info in PHONE_MODELS_STANDARD_LIST}
EXCLUSIVE_PHONE_MODELS_DICT = {phone_info["key"]: phone_info for phone_info in EXCLUSIVE_PHONE_MODELS}
# PHONE_COMPONENTS –∏ PHONE_CASES —É–∂–µ —Å–ª–æ–≤–∞—Ä–∏


# FSM –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —á–µ—Ä–Ω–æ–º —Ä—ã–Ω–∫–µ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
class BlackMarketPurchaseStates(StatesGroup):
    awaiting_confirmation = State()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–æ—Å—Ç–∞—é—Ç—Å—è, –∫–∞–∫ –±—ã–ª–∏, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ) ---

async def check_black_market_access(user_id: int) -> Tuple[bool, str]:
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    streak_data = await database.get_user_daily_streak(user_id)
    current_streak = 0
    if streak_data and streak_data.get('last_streak_check_date'):
        today_local_date = datetime.now(pytz_timezone(Config.TIMEZONE)).date()
        last_check_date = streak_data['last_streak_check_date']
        if last_check_date == today_local_date or last_check_date == (today_local_date - timedelta(days=1)):
             current_streak = streak_data.get('current_streak', 0)
    
    required_streak = Config.BLACKMARKET_ACCESS_STREAK_REQUIREMENT
    required_streak_name = ""
    for streak_goal in Config.DAILY_STREAKS_CONFIG:
        if streak_goal['target_days'] == required_streak:
            required_streak_name = streak_goal['name']
            break
            
    if current_streak >= required_streak:
        return True, ""
    else:
        message_text = (
            f"ü•∑ –®–µ–ø–æ—Ç —É–ª–∏—Ü –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥ —Ç–≤–æ–∏—Ö —É—à–µ–π. –ì–æ–≤–æ—Ä—è—Ç, –ª–∏—à—å —Ç–µ, –∫—Ç–æ –¥–æ–∫–∞–∑–∞–ª —Å–≤–æ—é —Å—Ç–æ–π–∫–æ—Å—Ç—å "
            f"({required_streak_name} - {required_streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥), –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —Å—é–¥–∞ –¥–æ—Ä–æ–≥—É..."
            f" –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {current_streak} –¥–Ω–µ–π."
        )
        return False, message_text

def get_stolen_wear_description(wear_data_input: Optional[Any]) -> str:
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    wear_data_json: Optional[Dict] = None 

    if isinstance(wear_data_input, str): 
        try:
            wear_data_json = json.loads(wear_data_input) 
        except json.JSONDecodeError:
            logger.warning(f"BLACKMARKET: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ wear_data_input: {wear_data_input}")
            wear_data_json = None 
    elif isinstance(wear_data_input, dict): 
        wear_data_json = wear_data_input

    if not wear_data_json: 
        return "<i>–°–æ—Å—Ç–æ—è–Ω–∏–µ: –ø–æ–≤–∏–¥–∞–≤—à–∏–π –≤–∏–¥—ã, –±—É–¥—å –Ω–∞—á–µ–∫—É.</i>" 

    descriptions = []
    effect_type = wear_data_json.get("effect_type") 

    if effect_type == "reduced_battery_factor":
        value = wear_data_json.get("value", 1.0) 
        config_effect_info = Config.BLACKMARKET_STOLEN_ITEM_WEAR_EFFECTS.get("reduced_battery_factor", {})
        desc_template = config_effect_info.get("description_template")
        if desc_template:
            descriptions.append(desc_template.format(value * 100)) 
        else:
            descriptions.append(f"–ë–∞—Ç–∞—Ä–µ—è —Å–ª–µ–≥–∫–∞ –∏–∑–Ω–æ—à–µ–Ω–∞")
    elif effect_type == "increased_break_chance_factor":
        value = wear_data_json.get("value", 1.0)
        config_effect_info = Config.BLACKMARKET_STOLEN_ITEM_WEAR_EFFECTS.get("increased_break_chance_factor", {})
        desc_template = config_effect_info.get("description_template")
        if desc_template:
            descriptions.append(desc_template.format(value))
        else:
            descriptions.append(f"–ë—É–¥—å –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–º.")
    elif effect_type == "cosmetic_defect":
        defect_desc = wear_data_json.get("description", "–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä—Ç–æ—Å—Ç–∏")
        descriptions.append(f"–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–µ—Ñ–µ–∫—Ç: {html.escape(defect_desc)}.")

    if not descriptions:
        return "<i>–ò–º–µ—é—Ç—Å—è —Å–ª–µ–¥—ã –±—ã–ª–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.</i>"
    return "<i>" + " ".join(descriptions) + "</i>"

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–• –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô ---
async def _generate_personal_bm_offers_for_user(user_id: int, conn_ext: Optional[database.asyncpg.Connection] = None) -> List[Dict[str, Any]]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ß–µ—Ä–Ω–æ–≥–æ –†—ã–Ω–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞.
    """
    logger.info(f"BLACKMARKET: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è user_id: {user_id}...")
    
    # –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Å conn_ext, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —É–∂–µ –∏–º–µ—é—â–µ–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    conn = conn_ext
    close_conn_finally = False
    if conn is None:
        conn = await database.get_connection()
        close_conn_finally = True

    generated_offers_data_list: List[Dict[str, Any]] = []
    generated_at_timestamp = datetime.now(dt_timezone.utc)

    try:
        # --- –õ–æ–≥–∏–∫–∞, –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∞—è –Ω–∞ refresh_black_market_offers, –Ω–æ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î –Ω–∞–ø—Ä—è–º—É—é ---
        
        all_possible_regular_items = []
        for phone_key, phone_data in PHONE_MODELS_STD_DICT.items():
            all_possible_regular_items.append({"key": phone_key, "type": "phone", "data": phone_data})
        for comp_key, comp_data in PHONE_COMPONENTS.items():
            if comp_data.get("component_type") == "component":
                all_possible_regular_items.append({"key": comp_key, "type": "component", "data": comp_data})
        for case_key, case_data in PHONE_CASES.items():
            all_possible_regular_items.append({"key": case_key, "type": "case", "data": case_data})

        current_offers_for_list: List[Dict[str, Any]] = []

        # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è "–ö—Ä–∞–¥–µ–Ω–æ–≥–æ" —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (1 —Å–ª–æ—Ç)
        if Config.BLACKMARKET_NUM_STOLEN_ITEMS > 0 and PHONE_MODELS_STD_DICT:
            stolen_phone_key = random.choice(list(PHONE_MODELS_STD_DICT.keys()))
            stolen_phone_data = PHONE_MODELS_STD_DICT[stolen_phone_key]
            
            base_price = stolen_phone_data['price']
            price_after_inflation = await get_current_price(base_price, conn_ext=conn)
            
            ch_discount = random.uniform(Config.BLACKMARKET_REGULAR_ITEM_DISCOUNT_MIN, 
                                         Config.BLACKMARKET_REGULAR_ITEM_DISCOUNT_MAX)
            price_after_ch_discount = int(round(price_after_inflation * (1 - ch_discount)))

            stolen_add_discount = random.uniform(Config.BLACKMARKET_STOLEN_ITEM_ADDITIONAL_DISCOUNT_MIN,
                                                 Config.BLACKMARKET_STOLEN_ITEM_ADDITIONAL_DISCOUNT_MAX)
            final_stolen_price = int(round(price_after_ch_discount * (1 - stolen_add_discount)))
            if final_stolen_price < 1 and price_after_inflation > 0: final_stolen_price = 1

            wear_data = {}
            wear_effect_keys = list(Config.BLACKMARKET_STOLEN_ITEM_WEAR_EFFECTS.keys())
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ cosmetic_defect_descriptions —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –∞ –Ω–µ –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è
            valid_wear_effect_keys = [k for k in wear_effect_keys if k != "cosmetic_defect_descriptions"] # –ò—Å–∫–ª—é—á–∞–µ–º –µ–≥–æ –∏–∑ –ø—Ä—è–º–æ–≥–æ –≤—ã–±–æ—Ä–∞
            if Config.BLACKMARKET_STOLEN_ITEM_WEAR_EFFECTS.get("cosmetic_defect_descriptions"):
                 valid_wear_effect_keys.append("cosmetic_defect_from_list") # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª—é—á

            chosen_wear_effect_key = random.choice(valid_wear_effect_keys)
            
            if chosen_wear_effect_key == "reduced_battery_factor":
                min_f = Config.BLACKMARKET_STOLEN_ITEM_WEAR_EFFECTS["reduced_battery_factor"]["min_factor"]
                max_f = Config.BLACKMARKET_STOLEN_ITEM_WEAR_EFFECTS["reduced_battery_factor"]["max_factor"]
                wear_data = {"effect_type": "reduced_battery_factor", "value": round(random.uniform(min_f, max_f), 2)}
            elif chosen_wear_effect_key == "increased_break_chance_factor":
                min_f = Config.BLACKMARKET_STOLEN_ITEM_WEAR_EFFECTS["increased_break_chance_factor"]["min_factor"]
                max_f = Config.BLACKMARKET_STOLEN_ITEM_WEAR_EFFECTS["increased_break_chance_factor"]["max_factor"]
                wear_data = {"effect_type": "increased_break_chance_factor", "value": round(random.uniform(min_f, max_f), 2)}
            elif chosen_wear_effect_key == "cosmetic_defect_from_list": # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
                defect_desc_list = Config.BLACKMARKET_STOLEN_ITEM_WEAR_EFFECTS.get("cosmetic_defect_descriptions", [])
                if defect_desc_list:
                    defect_desc = random.choice(defect_desc_list)
                    wear_data = {"effect_type": "cosmetic_defect", "description": defect_desc}
            
            current_offers_for_list.append({
                "item_key": stolen_phone_key, "item_type": "phone",
                "display_name_override": f"{stolen_phone_data['name']} (–ö—Ä–∞–¥–µ–Ω—ã–π)",
                "current_price": final_stolen_price,
                "original_price_before_bm": price_after_inflation,
                "is_stolen": True, "is_exclusive": False, "quantity_available": 1,
                "wear_data": wear_data if wear_data else None, "custom_data": None,
                "generated_at_utc": generated_at_timestamp # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            })
            all_possible_regular_items = [item for item in all_possible_regular_items if item["key"] != stolen_phone_key or item["type"] != "phone"]

        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è "–û–±—ã—á–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–Ω—ã—Ö" —Ç–æ–≤–∞—Ä–æ–≤
        num_regular_to_generate = Config.BLACKMARKET_TOTAL_SLOTS - len(current_offers_for_list)
        
        if all_possible_regular_items and num_regular_to_generate > 0:
            chosen_regular_items_data = random.sample(
                all_possible_regular_items, 
                min(num_regular_to_generate, len(all_possible_regular_items))
            )
            for item_info in chosen_regular_items_data:
                item_key = item_info["key"]
                item_type = item_info["type"]
                static_data = item_info["data"]
                
                base_price = static_data['price']
                price_after_inflation = await get_current_price(base_price, conn_ext=conn)
                
                ch_discount = random.uniform(Config.BLACKMARKET_REGULAR_ITEM_DISCOUNT_MIN, 
                                             Config.BLACKMARKET_REGULAR_ITEM_DISCOUNT_MAX)
                final_price = int(round(price_after_inflation * (1 - ch_discount)))
                if final_price < 1 and price_after_inflation > 0: final_price = 1

                quantity = 1
                if item_type == "component": quantity = random.randint(1, 3) 

                current_offers_for_list.append({
                    "item_key": item_key, "item_type": item_type,
                    "display_name_override": static_data.get('name'),
                    "current_price": final_price,
                    "original_price_before_bm": price_after_inflation,
                    "is_stolen": False, "is_exclusive": False, "quantity_available": quantity,
                    "wear_data": None, "custom_data": None,
                    "generated_at_utc": generated_at_timestamp
                })
        
        # 3. –®–∞–Ω—Å –Ω–∞ –∑–∞–º–µ–Ω—É –æ–¥–Ω–æ–≥–æ "–æ–±—ã—á–Ω–æ–≥–æ" —Å–ª–æ—Ç–∞ —ç–∫—Å–∫–ª—é–∑–∏–≤–æ–º
        if EXCLUSIVE_PHONE_MODELS_DICT or VINTAGE_PHONE_KEYS_FOR_BM:
            if random.random() < Config.BLACKMARKET_EXCLUSIVE_ITEM_CHANCE:
                eligible_slots_indices = [
                    idx for idx, offer in enumerate(current_offers_for_list) 
                    if not offer["is_stolen"] and not offer["is_exclusive"]
                ]
                if eligible_slots_indices:
                    slot_to_replace_idx = random.choice(eligible_slots_indices)
                    exclusive_type_choice = "custom"
                    if VINTAGE_PHONE_KEYS_FOR_BM and EXCLUSIVE_PHONE_MODELS_DICT:
                        exclusive_type_choice = random.choice(["custom", "vintage"])
                    elif VINTAGE_PHONE_KEYS_FOR_BM:
                        exclusive_type_choice = "vintage"
                    
                    exclusive_offer_data_dict: Optional[Dict[str, Any]] = None # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ

                    if exclusive_type_choice == "custom" and EXCLUSIVE_PHONE_MODELS_DICT:
                        exclusive_key = random.choice(list(EXCLUSIVE_PHONE_MODELS_DICT.keys()))
                        excl_data = EXCLUSIVE_PHONE_MODELS_DICT[exclusive_key]
                        base_price_excl = excl_data['base_price']
                        price_after_inflation_excl = await get_current_price(base_price_excl, conn_ext=conn)
                        ch_discount_excl = random.uniform(Config.BLACKMARKET_REGULAR_ITEM_DISCOUNT_MIN, 
                                                          Config.BLACKMARKET_REGULAR_ITEM_DISCOUNT_MAX)
                        final_price_excl = int(round(price_after_inflation_excl * (1 - ch_discount_excl)))
                        if final_price_excl < 1 and price_after_inflation_excl > 0: final_price_excl = 1
                        
                        # –°–æ–±–∏—Ä–∞–µ–º custom_data –¥–ª—è –ë–î, –≤–∫–ª—é—á–∞—è bm_description
                        custom_data_for_db = excl_data.get("special_properties", {}).copy()
                        custom_data_for_db["bm_description"] = excl_data.get("bm_description", "–û—Å–æ–±—ã–π —Ç–æ–≤–∞—Ä.")
                        # –ï—Å–ª–∏ –µ—Å—Ç—å custom_bonus_description –≤ special_properties, –æ–Ω —É–∂–µ —Ç–∞–º.
                        # –ï—Å–ª–∏ –æ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ –≤ excl_data, —Ç–æ:
                        # if "custom_bonus_description" in excl_data:
                        #    custom_data_for_db["custom_bonus_description"] = excl_data["custom_bonus_description"]

                        exclusive_offer_data_dict = {
                            "item_key": exclusive_key, "item_type": "phone",
                            "display_name_override": excl_data.get('display_name', excl_data['name']),
                            "current_price": final_price_excl,
                            "original_price_before_bm": price_after_inflation_excl,
                            "is_stolen": False, "is_exclusive": True, "quantity_available": 1,
                            "wear_data": None, 
                            "custom_data": custom_data_for_db, # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                            "generated_at_utc": generated_at_timestamp
                        }
                    elif exclusive_type_choice == "vintage" and VINTAGE_PHONE_KEYS_FOR_BM:
                        vintage_key = random.choice(VINTAGE_PHONE_KEYS_FOR_BM)
                        if vintage_key in PHONE_MODELS_STD_DICT:
                            vintage_data = PHONE_MODELS_STD_DICT[vintage_key]
                            base_price_vint = vintage_data['price']
                            price_after_inflation_vint = await get_current_price(base_price_vint, conn_ext=conn)
                            ch_discount_vint = random.uniform(Config.BLACKMARKET_REGULAR_ITEM_DISCOUNT_MIN, 
                                                              Config.BLACKMARKET_REGULAR_ITEM_DISCOUNT_MAX)
                            final_price_vint = int(round(price_after_inflation_vint * (1 - ch_discount_vint)))
                            if final_price_vint < 1 and price_after_inflation_vint > 0: final_price_vint = 1

                            vintage_custom_data = {
                                "bm_description": f"–†–µ–¥–∫–∏–π –≤–∏–Ω—Ç–∞–∂–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä: {vintage_data.get('name', vintage_key)}. –ù–∞—Ö–æ–¥–∫–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–∞!"
                            }
                            vintage_wear_data = {"effect_type": "cosmetic_defect", "description": "–ó–∞–º–µ—Ç–Ω—ã–µ —Å–ª–µ–¥—ã –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω."}

                            exclusive_offer_data_dict = {
                                "item_key": vintage_key, "item_type": "phone",
                                "display_name_override": f"{vintage_data['name']} (–í–∏–Ω—Ç–∞–∂)",
                                "current_price": final_price_vint,
                                "original_price_before_bm": price_after_inflation_vint,
                                "is_stolen": False, "is_exclusive": True, "quantity_available": 1,
                                "wear_data": vintage_wear_data, 
                                "custom_data": vintage_custom_data,
                                "generated_at_utc": generated_at_timestamp
                            }
                    
                    if exclusive_offer_data_dict:
                        current_offers_for_list[slot_to_replace_idx] = exclusive_offer_data_dict
                        logger.info(f"BLACKMARKET (User: {user_id}): –°–ª–æ—Ç {slot_to_replace_idx + 1} –∑–∞–º–µ–Ω–µ–Ω —ç–∫—Å–∫–ª—é–∑–∏–≤–æ–º: {exclusive_offer_data_dict['item_key']}")
        
        # 4. –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∏ –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤
        # –ö—Ä–∞–¥–µ–Ω—ã–π, –µ—Å–ª–∏ –µ—Å—Ç—å, –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—é—Ç—Å—è
        stolen_offer_data = None
        other_offers_data = []

        for offer in current_offers_for_list:
            if offer["is_stolen"]:
                stolen_offer_data = offer
            else:
                other_offers_data.append(offer)
        
        random.shuffle(other_offers_data)

        if stolen_offer_data:
            generated_offers_data_list.append(stolen_offer_data)
        generated_offers_data_list.extend(other_offers_data)

        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ Config.BLACKMARKET_TOTAL_SLOTS
        generated_offers_data_list = generated_offers_data_list[:Config.BLACKMARKET_TOTAL_SLOTS]
        
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å–ª–æ—Ç–æ–≤ (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞, —Ö–æ—Ç—è –æ–Ω–∏ —É–∂–µ –≤ –ø–æ—Ä—è–¥–∫–µ)
        for idx, offer_d in enumerate(generated_offers_data_list):
            offer_d["slot_number"] = idx + 1

        logger.info(f"BLACKMARKET: –î–ª—è user {user_id} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(generated_offers_data_list)} –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")

    except Exception as e:
        logger.error(f"BLACKMARKET: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è user {user_id}: {e}", exc_info=True)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –≤—ã–∑—ã–≤–∞—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        return []
    finally:
        if close_conn_finally and conn and not conn.is_closed():
            await conn.close()
            
    return generated_offers_data_list


# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ /blackmarket –∏ /buybm ---

@black_market_router.message(Command(*Config.BLACKMARKET_COMMAND_ALIASES, ignore_case=True))
async def cmd_blackmarket_show(message: Message, bot: Bot): # bot –Ω—É–∂–µ–Ω –¥–ª—è send_telegram_log
    if not message.from_user:
        await message.reply("ü•∑ –ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –∫—Ç–æ —Ç—ã, —á—É–∂–∞–∫.")
        return

    user_id = message.from_user.id
    user_link = get_user_mention_html(user_id, message.from_user.full_name, message.from_user.username)

    can_access, access_denied_message = await check_black_market_access(user_id)
    if not can_access:
        await message.reply(access_denied_message, parse_mode="HTML")
        return

    conn = None
    try:
        conn = await database.get_connection()
        user_offers = await database.get_user_black_market_slots(user_id, conn_ext=conn)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ "–ø–µ—Ä–∏–æ–¥–∞ –ß–†"
        now_local = datetime.now(pytz_timezone(Config.TIMEZONE))
        reset_hour = Config.BLACKMARKET_RESET_HOUR
        current_period_start_local = now_local.replace(hour=reset_hour, minute=0, second=0, microsecond=0)
        if now_local.hour < reset_hour:
            current_period_start_local -= timedelta(days=1)
        current_period_start_utc = current_period_start_local.astimezone(dt_timezone.utc)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç—É–∞–ª—å–Ω—ã –ª–∏ —Å–ª–æ—Ç—ã –∏–ª–∏ –Ω—É–∂–Ω–æ –∏—Ö –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å/—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
        regenerate_slots = True # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
        if user_offers:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—Ç–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ —Å–ª–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–µ–Ω–µ—Ä—è—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
            first_slot_generated_at = user_offers[0].get('generated_at_utc')
            if first_slot_generated_at and isinstance(first_slot_generated_at, datetime):
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Ä–µ–º—è –∏–∑ –ë–î aware
                if first_slot_generated_at.tzinfo is None:
                     first_slot_generated_at = first_slot_generated_at.replace(tzinfo=dt_timezone.utc)
                else:
                     first_slot_generated_at = first_slot_generated_at.astimezone(dt_timezone.utc)

                if first_slot_generated_at >= current_period_start_utc:
                    regenerate_slots = False # –°–ª–æ—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã
                else:
                    logger.info(f"BLACKMARKET: –°–ª–æ—Ç—ã –¥–ª—è user {user_id} —É—Å—Ç–∞—Ä–µ–ª–∏ (—Å–≥–µ–Ω: {first_slot_generated_at}, —Ç–µ–∫.–ø–µ—Ä–∏–æ–¥: {current_period_start_utc}). –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è.")
            else:
                logger.warning(f"BLACKMARKET: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç–æ–≤ –¥–ª—è user {user_id}. –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è.")
        else: # –°–ª–æ—Ç–æ–≤ –Ω–µ—Ç
            logger.info(f"BLACKMARKET: –ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è user {user_id}. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è.")


        if regenerate_slots:
            logger.info(f"BLACKMARKET: (–ü–µ—Ä–µ)–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è user {user_id}...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º conn, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –æ—Ç–∫—Ä—ã—Ç
            new_offers_data = await _generate_personal_bm_offers_for_user(user_id, conn_ext=conn)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ª–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –±—ã–ª–∏) –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            async with conn.transaction():
                await database.clear_user_black_market_slots(user_id, conn_ext=conn)
                for offer_slot_data in new_offers_data:
                    await database.add_user_black_market_slot(
                        user_id=user_id,
                        slot_number=offer_slot_data["slot_number"],
                        item_key=offer_slot_data["item_key"],
                        item_type=offer_slot_data["item_type"],
                        display_name_override=offer_slot_data.get("display_name_override"),
                        current_price=offer_slot_data["current_price"],
                        original_price_before_bm=offer_slot_data["original_price_before_bm"],
                        is_stolen=offer_slot_data["is_stolen"],
                        is_exclusive=offer_slot_data["is_exclusive"],
                        quantity_available=offer_slot_data["quantity_available"],
                        wear_data=offer_slot_data.get("wear_data"),
                        custom_data=offer_slot_data.get("custom_data"),
                        generated_at_utc=offer_slot_data["generated_at_utc"], # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                        conn_ext=conn
                    )
            user_offers = await database.get_user_black_market_slots(user_id, conn_ext=conn) # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ —Å–ª–æ—Ç—ã

        if not user_offers:
            await message.reply(
                f"ü•∑ {user_link}, –ø–æ—Ö–æ–∂–µ, —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –ß—ë—Ä–Ω–æ–º –†—ã–Ω–∫–µ –¥–ª—è —Ç–µ–±—è –ø—É—Å—Ç–æ... –∏–ª–∏ –∫—Ç–æ-—Ç–æ —É–∂–µ –≤—Å–µ —Ä–∞—Å–∫—É–ø–∏–ª.\n"
                f"–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞—Ö–æ–¥–µ –ø–æ—Å–ª–µ {Config.BLACKMARKET_RESET_HOUR:02d}:00 ({Config.TIMEZONE})."
            )
            return

        response_parts = [
            f"ü•∑ <b>–¢–≤–æ–π –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ß—ë—Ä–Ω—ã–π –†—ã–Ω–æ–∫</b> ü•∑",
            f"{user_link}, –≤–æ—Ç —á—Ç–æ —Ç–µ–Ω–∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Ç–≤–æ–∏ –ø—Ä–∏–ª–∞–≤–∫–∏ (—Ü–µ–Ω—ã —É–∂–µ –≤–∫–ª—é—á–∞—é—Ç '–æ—Å–æ–±—É—é' —Å–∫–∏–¥–∫—É):",
            "--------------------"
        ]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º user_offers –ø–æ slot_number –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
        user_offers.sort(key=lambda x: x.get('slot_number', 0))

        for offer in user_offers:
            if offer.get('is_purchased', False): # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å–ª–æ—Ç –∫—É–ø–ª–µ–Ω, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                # response_parts.append(f"<b>–°–ª–æ—Ç {offer['slot_number']}:</b> -- –ü–†–û–î–ê–ù–û --")
                # response_parts.append("---")
                continue

            slot_num = offer['slot_number']
            item_key = offer['item_key']
            item_type = offer['item_type']
            display_name_override = offer.get('display_name_override')
            current_price = offer['current_price']
            original_price = offer['original_price_before_bm']
            quantity_available = offer['quantity_available'] # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—Å–µ–≥–¥–∞ 1
            
            is_stolen = offer.get('is_stolen', False)
            is_exclusive = offer.get('is_exclusive', False)
            wear_data_from_db = offer.get('wear_data') 
            custom_data_from_db = offer.get('custom_data')

            item_name_display = ""
            item_description_details = []

            if display_name_override:
                item_name_display = html.escape(display_name_override)
            elif item_type == "phone":
                phone_info_std = PHONE_MODELS_STD_DICT.get(item_key)
                phone_info_excl = EXCLUSIVE_PHONE_MODELS_DICT.get(item_key)
                if phone_info_excl:
                    item_name_display = html.escape(phone_info_excl.get('display_name', phone_info_excl.get('name', item_key)))
                elif phone_info_std:
                    item_name_display = html.escape(phone_info_std.get('display_name', phone_info_std.get('name', item_key)))
                else:
                    item_name_display = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (<code>{html.escape(item_key)}</code>)"
            elif item_type == "component":
                comp_info = PHONE_COMPONENTS.get(item_key)
                item_name_display = html.escape(comp_info['name']) if comp_info else f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç (<code>{html.escape(item_key)}</code>)"
            elif item_type == "case":
                case_info = PHONE_CASES.get(item_key)
                item_name_display = html.escape(case_info['name']) if case_info else f"–ß–µ—Ö–æ–ª (<code>{html.escape(item_key)}</code>)"
            else:
                item_name_display = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä (<code>{html.escape(item_key)}</code>)"

            offer_line = f"<b>–°–ª–æ—Ç {slot_num}: {item_name_display}</b>"
            offer_line += f"\n   üí∞ –¶–µ–Ω–∞: <code>{current_price}</code> OC (<s>{original_price} OC</s>)"
            if quantity_available > 1 : # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ—Å—Ç–∞–≤–∏–º > 1
                 offer_line += f" | –î–æ—Å—Ç—É–ø–Ω–æ: {quantity_available} —à—Ç."
            else: # –î–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ —á–µ—Ö–ª–æ–≤, –≥–¥–µ quantity=1, "–î–æ—Å—Ç—É–ø–Ω–æ: 1 —à—Ç." –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                 pass


            if is_exclusive:
                offer_line += "\n   ‚ú® –≠–∫—Å–∫–ª—é–∑–∏–≤ –ß—ë—Ä–Ω–æ–≥–æ –†—ã–Ω–∫–∞!"
                if custom_data_from_db and custom_data_from_db.get("bm_description"):
                    item_description_details.append(html.escape(custom_data_from_db["bm_description"]))
                if custom_data_from_db and custom_data_from_db.get("custom_bonus_description"):
                     item_description_details.append(f"–û—Å–æ–±–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ: {html.escape(custom_data_from_db['custom_bonus_description'])}")

            if is_stolen:
                offer_line += "\n   Ìõî –ö—Ä–∞–¥–µ–Ω—ã–π —Ç–æ–≤–∞—Ä!"
                item_description_details.append(get_stolen_wear_description(wear_data_from_db))
            
            if item_type == "component":
                item_description_details.append(f"–†–∏—Å–∫ –±—Ä–∞–∫–∞ (–ø—Ä–æ—è–≤–∏—Ç—Å—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)")
            elif item_type == "phone" and not is_stolen and not is_exclusive : # –û–±—ã—á–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —Å –ß–†
                 item_description_details.append("–í–æ–∑–º–æ–∂–µ–Ω —Å—é—Ä–ø—Ä–∏–∑ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞!")


            if item_description_details:
                offer_line += "\n   üìù " + " ".join(filter(None,item_description_details))
            
            offer_line += f"\n   <code>/{Config.BLACKMARKET_BUY_SLOT_ALIASES[0]} {slot_num}</code> - –ö—É–ø–∏—Ç—å"
            
            response_parts.append(offer_line)
            response_parts.append("---")
        
        response_parts.append("ü•∑ –ü–æ–º–Ω–∏, —Å–¥–µ–ª–∫–∏ –∑–¥–µ—Å—å –Ω–∞ —Ç–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫. –í–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ—Ç.")

        full_response = "\n".join(response_parts)
        # ... (–ª–æ–≥–∏–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏) ...
        MAX_MESSAGE_LENGTH = 4096
        if len(full_response) > MAX_MESSAGE_LENGTH:
            temp_parts = []
            current_part_msg = "" 
            for line in full_response.split('\n'):
                if len(current_part_msg) + len(line) + 1 > MAX_MESSAGE_LENGTH:
                    if current_part_msg: temp_parts.append(current_part_msg)
                    current_part_msg = line
                else:
                    if current_part_msg: current_part_msg += "\n" + line
                    else: current_part_msg = line
            if current_part_msg: temp_parts.append(current_part_msg)
            for part_msg_item in temp_parts: 
                if part_msg_item.strip(): await message.answer(part_msg_item, parse_mode="HTML", disable_web_page_preview=True); await asyncio.sleep(0.1)
        else:
            if full_response.strip(): await message.answer(full_response, parse_mode="HTML", disable_web_page_preview=True)

    except Exception as e_show_bm:
        logger.error(f"BlackMarketShow: –û—à–∏–±–∫–∞ –¥–ª—è user {user_id}: {e_show_bm}", exc_info=True)
        await message.reply("ü•∑ –¢–µ–Ω–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Å–ø–æ–∫–æ–π–Ω—ã... –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä—ã–Ω–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    finally:
        if conn and not conn.is_closed():
            await conn.close()

@black_market_router.message(Command(*Config.BLACKMARKET_BUY_SLOT_ALIASES, ignore_case=True))
async def cmd_buy_bm_slot_start(message: Message, command: CommandObject, state: FSMContext, bot: Bot): # bot –Ω—É–∂–µ–Ω –¥–ª—è –ª–æ–≥–∞
    if not message.from_user:
        await message.reply("ü•∑ –Ø –Ω–µ –∑–Ω–∞—é, –∫—Ç–æ —Ç—ã. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è —Å–Ω–∞—á–∞–ª–∞.")
        return

    user_id = message.from_user.id
    chat_id = message.chat.id 
    user_link = get_user_mention_html(user_id, message.from_user.full_name, message.from_user.username)

    can_access, access_denied_message = await check_black_market_access(user_id)
    if not can_access:
        await message.reply(access_denied_message, parse_mode="HTML")
        return

    args = command.args
    if not args:
        await message.reply(
            f"ü•∑ {user_link}, —É–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª—è–Ω—É–ª—Å—è.\n"
            f"–ü—Ä–∏–º–µ—Ä: `/{Config.BLACKMARKET_BUY_SLOT_ALIASES[0]} 3`\n"
            f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã: `/{Config.BLACKMARKET_COMMAND_ALIASES[0]}`"
        )
        return
    
    try:
        slot_to_buy = int(args.strip())
        if not (1 <= slot_to_buy <= Config.BLACKMARKET_TOTAL_SLOTS):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞")
    except ValueError:
        await message.reply(f"ü•∑ {user_link}, –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ {Config.BLACKMARKET_TOTAL_SLOTS}.")
        return

    conn_buy_bm_start = None
    try:
        conn_buy_bm_start = await database.get_connection()
        # –ü–æ–ª—É—á–∞–µ–º –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô —Å–ª–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        offer_data = await database.get_specific_user_black_market_slot(user_id, slot_to_buy, conn_ext=conn_buy_bm_start)

        if not offer_data:
            await message.reply(f"ü•∑ {user_link}, —Ç–æ–≤–∞—Ä –≤ —Å–ª–æ—Ç–µ {slot_to_buy} –¥–ª—è —Ç–µ–±—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø—Ä–æ–¥–∞–Ω...")
            if conn_buy_bm_start and not conn_buy_bm_start.is_closed(): await conn_buy_bm_start.close()
            return
        
        if offer_data.get('is_purchased', False): # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø–æ–∫—É–ø–∫–∏
            await message.reply(f"ü•∑ {user_link}, —Ç—ã —É–∂–µ –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä –∏–∑ —Å–ª–æ—Ç–∞ {slot_to_buy}.")
            if conn_buy_bm_start and not conn_buy_bm_start.is_closed(): await conn_buy_bm_start.close()
            return

        item_key = offer_data['item_key']
        item_type = offer_data['item_type']
        item_price = offer_data['current_price']
        item_name_display = offer_data.get('display_name_override') 

        if not item_name_display: # –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –Ω–µ—Ç display_name_override
            if item_type == "phone":
                phone_info = PHONE_MODELS_STD_DICT.get(item_key) or EXCLUSIVE_PHONE_MODELS_DICT.get(item_key)
                item_name_display = html.escape(phone_info.get('name', item_key)) if phone_info else f"–¢–µ–ª–µ—Ñ–æ–Ω ({item_key})"
            elif item_type == "component":
                item_name_display = html.escape(PHONE_COMPONENTS.get(item_key, {}).get('name', item_key))
            elif item_type == "case":
                item_name_display = html.escape(PHONE_CASES.get(item_key, {}).get('name', item_key))
            else: item_name_display = item_key
        else: item_name_display = html.escape(item_name_display)


        if item_type == 'phone':
            active_phones_count = await database.count_user_active_phones(user_id, conn_ext=conn_buy_bm_start)
            if active_phones_count >= Config.MAX_PHONES_PER_USER:
                await message.reply(
                    f"ü•∑ {user_link}, —É —Ç–µ–±—è —É–∂–µ –ø–æ–ª–Ω—ã–π –∞—Ä—Å–µ–Ω–∞–ª ({active_phones_count}/{Config.MAX_PHONES_PER_USER} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤). "
                    f"–ò–∑–±–∞–≤—å—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ, –ø—Ä–µ–∂–¥–µ —á–µ–º –±—Ä–∞—Ç—å –Ω–æ–≤—ã–π."
                )
                if conn_buy_bm_start and not conn_buy_bm_start.is_closed(): await conn_buy_bm_start.close()
                return

            current_year_month = datetime.now(pytz_timezone(Config.TIMEZONE)).strftime("%Y-%m")
            phones_this_month = await database.get_user_bm_monthly_purchases(user_id, current_year_month, conn_ext=conn_buy_bm_start)
            if phones_this_month >= Config.BLACKMARKET_MAX_PHONES_PER_MONTH:
                await message.reply(
                    f"ü•∑ {user_link}, —Ç—ã —É–∂–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø—Ä–∏–∫—É–ø–∏–ª –Ω–∞ –ß—ë—Ä–Ω–æ–º –†—ã–Ω–∫–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ ({phones_this_month}/{Config.BLACKMARKET_MAX_PHONES_PER_MONTH}). "
                    f"–ü—Ä–∏—Ö–æ–¥–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º."
                )
                if conn_buy_bm_start and not conn_buy_bm_start.is_closed(): await conn_buy_bm_start.close()
                return
        
        current_balance = await database.get_user_onecoins(user_id, chat_id, conn_ext=conn_buy_bm_start)
        if current_balance < item_price:
            await message.reply(
                f"ü•∑ {user_link}, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è \"<b>{item_name_display}</b>\".\n"
                f"–ù—É–∂–Ω–æ: {item_price} OC, —É —Ç–µ–±—è: {current_balance} OC. –ü–æ–¥–∫–æ–ø–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è."
            )
            if conn_buy_bm_start and not conn_buy_bm_start.is_closed(): await conn_buy_bm_start.close()
            return
        
        await state.set_state(BlackMarketPurchaseStates.awaiting_confirmation)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å offer_data, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è, –≤–∫–ª—é—á–∞—è wear_data –∏ custom_data
        state_data_to_store = {
            "user_offer_data": offer_data, # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å –æ—Ñ—Ñ–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "confirmation_initiated_at": datetime.now(dt_timezone.utc).isoformat(),
            "original_chat_id": chat_id, 
            "original_user_id": user_id,
            "action_type": "buy_bm_slot_personal" # –ù–æ–≤—ã–π —Ç–∏–ø –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
        }
        await state.update_data(**state_data_to_store)

        confirmation_lines = [
            f"ü•∑ {user_link}, —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:",
            f"  <b>{item_name_display}</b> (–°–ª–æ—Ç {slot_to_buy})",
            f"  –¶–µ–Ω–∞: <code>{item_price}</code> OneCoin(s)"
        ]
        if offer_data.get('is_exclusive'):
            confirmation_lines.append("  ‚ú® <i>–≠—Ç–æ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç–æ–≤–∞—Ä!</i>")
            if offer_data.get('custom_data') and offer_data['custom_data'].get('bm_description'):
                 confirmation_lines.append(f"  üìù <i>{html.escape(offer_data['custom_data']['bm_description'])}</i>")
            if offer_data.get('custom_data') and offer_data['custom_data'].get('custom_bonus_description'):
                 confirmation_lines.append(f"  üí° <i>–û—Å–æ–±–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ: {html.escape(offer_data['custom_data']['custom_bonus_description'])}</i>")
        if offer_data.get('is_stolen'):
            confirmation_lines.append("  Ìõî –≠—Ç–æ –∫—Ä–∞–¥–µ–Ω—ã–π —Ç–æ–≤–∞—Ä!")
            confirmation_lines.append(f"  {get_stolen_wear_description(offer_data.get('wear_data'))}")
        if item_type == "component":
             confirmation_lines.append(f"  –†–∏—Å–∫ –±—Ä–∞–∫–∞: {Config.BLACKMARKET_COMPONENT_DEFECT_CHANCE*100:.0f}% (–ø—Ä–æ—è–≤–∏—Ç—Å—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)!")
        elif item_type == "phone" and not offer_data.get('is_stolen') and not offer_data.get('is_exclusive'):
             confirmation_lines.append("  –í–æ–∑–º–æ–∂–µ–Ω —Å—é—Ä–ø—Ä–∏–∑ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç –∏–ª–∏ –¥–µ—Ñ–µ–∫—Ç)!")

        confirmation_lines.append(f"\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {current_balance} OneCoin(s).")
        confirmation_lines.append(f"–û—Ç–≤–µ—Ç—å '<b>–î–∞</b>' –∏–ª–∏ '<b>–ù–µ—Ç</b>' –≤ —Ç–µ—á–µ–Ω–∏–µ {Config.MARKET_PHONE_CONFIRMATION_TIMEOUT_SECONDS} —Å–µ–∫—É–Ω–¥.")
        
        await message.reply("\n".join(confirmation_lines), parse_mode="HTML")

    except Exception as e_buy_bm_start:
        logger.error(f"BuyBlackMarketSlot (Personal): –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è user {user_id}, —Å–ª–æ—Ç {slot_to_buy}: {e_buy_bm_start}", exc_info=True)
        await message.reply("ü•∑ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤ —Ç–µ–Ω—è—Ö... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        await state.clear() 
    finally:
        if conn_buy_bm_start and not conn_buy_bm_start.is_closed():
            await conn_buy_bm_start.close()


# --- –•–µ–Ω–¥–ª–µ—Ä—ã FSM –¥–ª—è BlackMarketPurchaseStates ---
# –í cmd_bm_purchase_confirm_yes –º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞ –∏ –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

@black_market_router.message(BlackMarketPurchaseStates.awaiting_confirmation, F.text.lower() == "–¥–∞")
async def cmd_bm_purchase_confirm_yes(message: Message, state: FSMContext, bot: Bot):
    if not message.from_user: 
        await message.reply("ü•∑ –ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, –∫—Ç–æ —Ç—ã. –ü–æ—Ö–æ–∂–µ, —Å–¥–µ–ª–∫–∞ —Å–æ—Ä–≤–∞–ª–∞—Å—å.")
        await state.clear(); return

    user_id = message.from_user.id
    user_data_from_state = await state.get_data()
    state_user_id = user_data_from_state.get('original_user_id')
    original_chat_id_for_onecoin = user_data_from_state.get('original_chat_id')
    action_type = user_data_from_state.get('action_type')
    
    if state_user_id != user_id or action_type != "buy_bm_slot_personal": # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        logger.warning(f"BLACKMARKET FSM (Personal): –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç user {user_id} –¥–ª—è state user {state_user_id} –∏–ª–∏ action_type '{action_type}'. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
        return

    user_link = get_user_mention_html(user_id, message.from_user.full_name, message.from_user.username)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –û–§–§–ï–†–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –∏–∑ state
    user_offer_data_from_state: Optional[Dict] = user_data_from_state.get('user_offer_data') 
    confirmation_initiated_at_iso = user_data_from_state.get('confirmation_initiated_at')
    
    item_name_for_msg = html.escape(user_offer_data_from_state.get('display_name_override') or user_offer_data_from_state.get('item_key', '—Ç–æ–≤–∞—Ä —Å –ß–†')) if user_offer_data_from_state else '—Ç–æ–≤–∞—Ä —Å –ß–†'

    if not user_offer_data_from_state or not confirmation_initiated_at_iso:
        await message.reply("ü•∑ –°–¥–µ–ª–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        logger.error(f"BLACKMARKET FSM (Personal) Confirm YES: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç user_offer_data –∏–ª–∏ confirmation_initiated_at_iso –≤ state –¥–ª—è user {user_id}")
        await state.clear(); return

    timeout_seconds = Config.MARKET_PHONE_CONFIRMATION_TIMEOUT_SECONDS 
    try:
        confirmation_initiated_at = datetime.fromisoformat(confirmation_initiated_at_iso)
        if (datetime.now(dt_timezone.utc) - confirmation_initiated_at) > timedelta(seconds=timeout_seconds):
            await message.reply(f"ü•∑ –í—Ä–µ–º—è –Ω–∞ —Ä–∞–∑–¥—É–º—å—è –≤—ã—à–ª–æ, {user_link}. –¢–æ–≤–∞—Ä \"<b>{item_name_for_msg}</b>\" —É–ø–ª—ã–ª –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–Ω–∏.", parse_mode="HTML")
            await state.clear(); return
    except ValueError:
        await message.reply("ü•∑ –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–¥–µ–ª–∫–∏. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        logger.error(f"BLACKMARKET FSM (Personal) Confirm YES: ValueError –ø–∞—Ä—Å–∏–Ω–≥–∞ confirmation_initiated_at_iso –¥–ª—è user {user_id}.")
        await state.clear(); return

    conn = None
    try:
        conn = await database.get_connection()
        async with conn.transaction():
            slot_number_to_buy = user_offer_data_from_state['slot_number']
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ì–û —Å–ª–æ—Ç–∞ –∏ —á—Ç–æ –æ–Ω –Ω–µ –∫—É–ø–ª–µ–Ω
            live_user_offer_data = await database.get_specific_user_black_market_slot(user_id, slot_number_to_buy, conn_ext=conn)

            if not live_user_offer_data or live_user_offer_data.get('is_purchased', True): # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∫—É–ø–ª–µ–Ω
                await message.reply(f"ü•∑ –£–ø—Å, {user_link}! –ü–æ–∫–∞ —Ç—ã –¥—É–º–∞–ª, —Ç–æ–≤–∞—Ä \"<b>{item_name_for_msg}</b>\" –∏–∑ —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞ —É–∂–µ –±—ã–ª –∫—É–ø–ª–µ–Ω —Ç–æ–±–æ–π –∏–ª–∏ –∏—Å—á–µ–∑!", parse_mode="HTML")
                await state.clear(); return 
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å–∞–º —Ç–æ–≤–∞—Ä –≤ —Å–ª–æ—Ç–µ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            if live_user_offer_data['item_key'] != user_offer_data_from_state['item_key'] or \
               live_user_offer_data['current_price'] != user_offer_data_from_state['current_price']:
                await message.reply(f"ü•∑ –°—Ç—Ä–∞–Ω–Ω–æ... –¢–æ–≤–∞—Ä –≤ —Å–ª–æ—Ç–µ {slot_number_to_buy} –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–æ–∫–∞ —Ç—ã —Ä–∞–∑–¥—É–º—ã–≤–∞–ª. –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–Ω–æ–≤–∞: `/{Config.BLACKMARKET_COMMAND_ALIASES[0]}`")
                logger.warning(f"BLACKMARKET FSM (Personal): –¢–æ–≤–∞—Ä –≤ —Å–ª–æ—Ç–µ {slot_number_to_buy} –¥–ª—è user {user_id} –∏–∑–º–µ–Ω–∏–ª—Å—è –º–µ–∂–¥—É FSM start –∏ confirm.")
                await state.clear(); return

            item_price = live_user_offer_data['current_price']
            item_type = live_user_offer_data['item_type']
            item_key = live_user_offer_data['item_key']

            current_balance = await database.get_user_onecoins(user_id, original_chat_id_for_onecoin, conn_ext=conn)
            if current_balance < item_price:
                await message.reply(f"ü•∑ {user_link}, —Ç–≤–æ–∏ –∫–∞—Ä–º–∞–Ω—ã –ø—É—Å—Ç—ã! –ù—É–∂–Ω–æ {item_price} OC –¥–ª—è \"<b>{item_name_for_msg}</b>\", –∞ —É —Ç–µ–±—è –ª–∏—à—å {current_balance}.", parse_mode="HTML")
                await state.clear(); return

            if item_type == 'phone':
                active_phones_count = await database.count_user_active_phones(user_id, conn_ext=conn)
                if active_phones_count >= Config.MAX_PHONES_PER_USER:
                    await message.reply(f"ü•∑ {user_link}, —É —Ç–µ–±—è –∏ —Ç–∞–∫ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ ({active_phones_count}/{Config.MAX_PHONES_PER_USER}).")
                    await state.clear(); return
                
                current_year_month = datetime.now(pytz_timezone(Config.TIMEZONE)).strftime("%Y-%m")
                phones_this_month = await database.get_user_bm_monthly_purchases(user_id, current_year_month, conn_ext=conn)
                if phones_this_month >= Config.BLACKMARKET_MAX_PHONES_PER_MONTH:
                    await message.reply(f"ü•∑ {user_link}, —Ç—ã –∏—Å—á–µ—Ä–ø–∞–ª —Å–≤–æ–π –ª–∏–º–∏—Ç –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ã —Å –ß–† –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.")
                    await state.clear(); return
            
            # 1. –ü–æ–º–µ—á–∞–µ–º –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô —Å–ª–æ—Ç –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–π
            slot_marked_purchased = await database.mark_user_bm_slot_as_purchased(user_id, slot_number_to_buy, conn_ext=conn)
            if not slot_marked_purchased: 
                await message.reply(f"ü•∑ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –¢–æ–≤–∞—Ä \"<b>{item_name_for_msg}</b>\" –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–π! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.", parse_mode="HTML")
                logger.error(f"BLACKMARKET FSM (Personal): –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å —Å–ª–æ—Ç {slot_number_to_buy} user {user_id} –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–π.")
                await state.clear(); return

            # 2. –°–ø–∏—Å—ã–≤–∞–µ–º OneCoin
            user_db_data_for_log = await database.get_user_data_for_update(user_id, original_chat_id_for_onecoin, conn_ext=conn)
            new_balance = await database.update_user_onecoins(
                user_id, original_chat_id_for_onecoin, -item_price,
                username=user_db_data_for_log.get('username'), 
                full_name=user_db_data_for_log.get('full_name'),
                chat_title=user_db_data_for_log.get('chat_title'), 
                conn_ext=conn
            )

            # 3. –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–≥—Ä–æ–∫—É (–ª–æ–≥–∏–∫–∞ –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –Ω–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ live_user_offer_data)
            purchase_time_utc = datetime.now(dt_timezone.utc)
            final_item_data_to_store_in_db: Optional[Dict] = None 
            
            log_item_name = live_user_offer_data.get('display_name_override') or item_key
            log_item_details = f"(–°–ª–æ—Ç: {slot_number_to_buy}, –ö–ª—é—á: {item_key}, –¢–∏–ø: {item_type}"
            if live_user_offer_data.get('is_stolen'): log_item_details += ", –ö—Ä–∞–¥–µ–Ω—ã–π"
            if live_user_offer_data.get('is_exclusive'): log_item_details += ", –≠–∫—Å–∫–ª—é–∑–∏–≤"
            log_item_details += ")"

            if item_type == 'phone':
                phone_static_data_std = PHONE_MODELS_STD_DICT.get(item_key)
                phone_static_data_excl = EXCLUSIVE_PHONE_MODELS_DICT.get(item_key)
                phone_static_data_source = phone_static_data_excl or phone_static_data_std

                if not phone_static_data_source:
                    logger.error(f"BLACKMARKET FSM (Personal): –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {item_key} –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ user {user_id}.")
                    raise Exception("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ.")

                initial_memory_gb_str = phone_static_data_source.get('memory', '0GB')
                initial_memory_gb = 0 # ... (–ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initial_memory_gb –∫–∞–∫ —Ä–∞–Ω—å—à–µ) ...
                if 'TB' in initial_memory_gb_str.upper():
                    try: initial_memory_gb = int(float(initial_memory_gb_str.upper().replace('TB','').strip())*1024)
                    except ValueError: initial_memory_gb = 1024 
                elif 'GB' in initial_memory_gb_str.upper():
                    try: initial_memory_gb = int(float(initial_memory_gb_str.upper().replace('GB','').strip()))
                    except ValueError: initial_memory_gb = 0 


                phone_color = random.choice(PHONE_COLORS) 
                # final_item_data_to_store_in_db —Ç–µ–ø–µ—Ä—å –±–µ—Ä–µ—Ç—Å—è –∏–∑ custom_data –∏ wear_data –æ—Ñ—Ñ–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                final_item_data_to_store_in_db = (live_user_offer_data.get('custom_data') or {}).copy()
                if live_user_offer_data.get('wear_data'):
                    final_item_data_to_store_in_db.update(live_user_offer_data['wear_data'])

                if live_user_offer_data.get('is_exclusive') and final_item_data_to_store_in_db.get('fixed_color'):
                    phone_color = final_item_data_to_store_in_db['fixed_color']
                    log_item_details += f", –§–∏–∫—Å. —Ü–≤–µ—Ç: {phone_color}"
                else: 
                    if random.random() < Config.BLACKMARKET_UNTRUSTED_SELLER_CHANCE:
                        original_intended_color = phone_color
                        phone_color = random.choice(PHONE_COLORS) 
                        if "cosmetic_defect" not in final_item_data_to_store_in_db and \
                           "cosmetic_defect_descriptions" in Config.BLACKMARKET_STOLEN_ITEM_WEAR_EFFECTS and \
                           Config.BLACKMARKET_STOLEN_ITEM_WEAR_EFFECTS["cosmetic_defect_descriptions"]: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
                            defect_desc_seller = random.choice(Config.BLACKMARKET_STOLEN_ITEM_WEAR_EFFECTS["cosmetic_defect_descriptions"])
                            final_item_data_to_store_in_db["cosmetic_defect"] = defect_desc_seller
                            final_item_data_to_store_in_db["effect_type"] = "cosmetic_defect" # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ
                            final_item_data_to_store_in_db["description"] = defect_desc_seller # –ò –æ–ø–∏—Å–∞–Ω–∏–µ
                            logger.info(f"BLACKMARKET (Personal): –ù–µ–Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü! User {user_id} —Ç–æ–≤–∞—Ä {item_key} —Å –¥–µ—Ñ–µ–∫—Ç–æ–º: '{defect_desc_seller}' –∏–ª–∏ —Ü–≤–µ—Ç–æ–º {phone_color} (–≤–º–µ—Å—Ç–æ {original_intended_color}).")
                            log_item_details += f", –°—é—Ä–ø—Ä–∏–∑ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ (—Ü–≤–µ—Ç/–¥–µ—Ñ–µ–∫—Ç)!"
                        else: 
                             logger.info(f"BLACKMARKET (Personal): –ù–µ–Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü! User {user_id} —Ç–æ–≤–∞—Ä {item_key} —Ü–≤–µ—Ç–æ–º {phone_color} (–≤–º–µ—Å—Ç–æ {original_intended_color}).")
                             log_item_details += f", –°—é—Ä–ø—Ä–∏–∑ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ (—Ü–≤–µ—Ç)!"

                new_phone_id = await database.add_phone_to_user_inventory(
                    user_id, original_chat_id_for_onecoin, item_key, phone_color,
                    item_price, purchase_time_utc, initial_memory_gb, 
                    is_contraband=True, # –í—Å–µ —Å –ß–† - –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∞
                    custom_phone_data_json=final_item_data_to_store_in_db if final_item_data_to_store_in_db else None,
                    conn_ext=conn
                )
                if not new_phone_id:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω {item_key} –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å user {user_id}.")
                
                await database.increment_user_bm_monthly_purchase(user_id, current_year_month, conn_ext=conn)
                log_item_details += f", –ò–Ω–≤.ID: {new_phone_id}"

            elif item_type == 'component':
                final_item_data_to_store_in_db = {"is_bm_contraband": True, "is_defective": False}
                if random.random() < Config.BLACKMARKET_COMPONENT_DEFECT_CHANCE:
                    final_item_data_to_store_in_db["is_defective"] = True
                    log_item_details += ", –ë–†–ê–ö–û–í–ê–ù–ù–´–ô!"
                
                add_comp_success = await database.add_item_to_user_inventory(
                    user_id, item_key, item_type, 
                    quantity_to_add=live_user_offer_data['quantity_available'], 
                    item_data_json=final_item_data_to_store_in_db, 
                    conn_ext=conn
                )
                if not add_comp_success:
                     raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç {item_key} –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å user {user_id}.")
            
            elif item_type == 'case':
                final_item_data_to_store_in_db = {"is_bm_contraband": True}
                add_case_success = await database.add_item_to_user_inventory(
                    user_id, item_key, item_type, 
                    quantity_to_add=1, 
                    item_data_json=final_item_data_to_store_in_db,
                    conn_ext=conn
                )
                if not add_case_success:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ö–æ–ª {item_key} –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å user {user_id}.")
            
            success_message_parts = [
                f"ü•∑ –°–¥–µ–ª–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞, {user_link}!",
                f"–¢—ã –∑–∞–ø–æ–ª—É—á–∏–ª \"<b>{item_name_for_msg}</b>\" –∑–∞ <code>{item_price}</code> OneCoin(s).",
            ]
            if item_type == "phone": success_message_parts.append("<i>–ù–µ –∑–∞–±—ã–≤–∞–π, –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∞ ‚Äì —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ –ø–æ–ª–æ–º–∫–∏!</i>")
            if item_type == "component" and final_item_data_to_store_in_db and final_item_data_to_store_in_db.get("is_defective"):
                success_message_parts.append("<i>–•–º, —ç—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ... –ù–∞–¥–µ—é—Å—å, –æ–Ω —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.</i>")
            elif item_type == "component":
                 success_message_parts.append("<i>–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –ø–æ–¥–≤–µ–¥–µ—Ç...</i>")
            success_message_parts.append(f"–¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{new_balance}</code> OneCoin(s).")
            await message.reply("\n".join(success_message_parts), parse_mode="HTML")

            chat_title_log = html.escape(message.chat.title or f"–ß–∞—Ç ID {original_chat_id_for_onecoin}")
            await send_telegram_log(
                bot,
                f"ü•∑ <b>–ü–æ–∫—É–ø–∫–∞ –Ω–∞ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º –ß–†</b>\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link} (ID: <code>{user_id}</code>)\n"
                f"–ß–∞—Ç: {chat_title_log} (ID: <code>{original_chat_id_for_onecoin}</code>)\n"
                f"–¢–æ–≤–∞—Ä: \"{item_name_for_msg}\" {log_item_details}\n"
                f"–¶–µ–Ω–∞: <code>{item_price}</code> OC. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{new_balance}</code> OC."
            )
            
            # --- –í–´–ó–û–í –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---
            kwargs_for_achievements = {
                "bm_buy_just_now": True, # –î–ª—è "–®–µ–ø–æ—Ç –ò–∑ –¢—å–º—ã"
                "bm_buy_total_count": 1, # –ó–∞–≥–ª—É—à–∫–∞, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –ë–î
                "bm_buy_components_total_count": 0, # –ó–∞–≥–ª—É—à–∫–∞
                "bm_buy_case_just_now": False, # –ó–∞–≥–ª—É—à–∫–∞
                "bm_buy_phone_wrong_color_just_now": False, # –ó–∞–≥–ª—É—à–∫–∞
                "bm_buy_phone_cosmetic_defect_just_now": False, # –ó–∞–≥–ª—É—à–∫–∞
                "bm_buy_vintage_phone_just_now": False, # –ó–∞–≥–ª—É—à–∫–∞
                "bm_buy_component_defective_just_now": False, # –ó–∞–≥–ª—É—à–∫–∞
                "bm_buy_component_not_defective_just_now": False, # –ó–∞–≥–ª—É—à–∫–∞
                "bm_buy_stolen_phone_total_count": 0, # –ó–∞–≥–ª—É—à–∫–∞
                "bm_buy_exclusive_phone_total_count": 0, # –ó–∞–≥–ª—É—à–∫–∞
            }

            if item_type == 'phone':
                # –î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–∏–ø–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏–∑ –ß–†
                if live_user_offer_data.get('is_stolen'):
                    kwargs_for_achievements["bm_buy_stolen_phone_total_count"] = 1 # –ó–∞–≥–ª—É—à–∫–∞
                if live_user_offer_data.get('is_exclusive'):
                    kwargs_for_achievements["bm_buy_exclusive_phone_total_count"] = 1 # –ó–∞–≥–ª—É—à–∫–∞
                # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ò—Å–∫–∞—Ç–µ–ª—å –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –°–≤—è—Ç—ã–Ω—å"
                if item_key in VINTAGE_PHONE_KEYS_FOR_BM: # VINTAGE_PHONE_KEYS_FOR_BM –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                     kwargs_for_achievements["bm_buy_vintage_phone_just_now"] = True
                # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –¥–µ—Ñ–µ–∫—Ç–∞–º/—Ü–≤–µ—Ç—É
                if final_item_data_to_store_in_db and final_item_data_to_store_in_db.get("cosmetic_defect"):
                    kwargs_for_achievements["bm_buy_phone_cosmetic_defect_just_now"] = True
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–Ω–µ —Ç–æ—Ç" —Ü–≤–µ—Ç —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º, —á—Ç–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ state.
                # –î–ª—è "–ù–µ–Ω–∞–¥–µ–∂–Ω—ã–π –ü–æ—Å—Ç–∞–≤—â–∏–∫" (—Ü–≤–µ—Ç) –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥, –∫–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç
                # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ random.random() < Config.BLACKMARKET_UNTRUSTED_SELLER_CHANCE —Å—Ä–∞–±–æ—Ç–∞–ª
                # –∏ color != original_intended_color. –≠—Ç–æ —É–∂–µ –±—ã–ª–æ –≤ –ª–æ–≥–∏–∫–µ black_market_logic.py
                # –≥–¥–µ-—Ç–æ –¥–æ —ç—Ç–æ–≥–æ.
                if "bm_buy_phone_wrong_color_just_now" in kwargs_for_checks:
                     kwargs_for_achievements["bm_buy_phone_wrong_color_just_now"] = kwargs_for_checks["bm_buy_phone_wrong_color_just_now"]


            elif item_type == 'component':
                kwargs_for_achievements["bm_buy_components_total_count"] = 1 # –ó–∞–≥–ª—É—à–∫–∞
                if final_item_data_to_store_in_db and final_item_data_to_store_in_db.get("is_defective"):
                    kwargs_for_achievements["bm_buy_component_defective_just_now"] = True
                    kwargs_for_achievements["bm_buy_defective_component_total_count"] = 1 # –ó–∞–≥–ª—É—à–∫–∞
                else:
                    kwargs_for_achievements["bm_buy_component_not_defective_just_now"] = True
            elif item_type == 'case':
                kwargs_for_achievements["bm_buy_case_just_now"] = True

            await check_and_grant_achievements(
                user_id,
                original_chat_id_for_onecoin,
                bot,
                **kwargs_for_achievements
            )
            # --- –ö–û–ù–ï–¶ –í–´–ó–û–í–ê –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---
            
    except Exception as e_confirm_bm_yes:
        logger.error(f"BLACKMARKET FSM (Personal) Confirm YES: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è user {user_id}, —Ç–æ–≤–∞—Ä '{item_name_for_msg}': {e_confirm_bm_yes}", exc_info=True)
        await message.reply(f"ü•∑ –û—à–∏–±–∫–∞ –≤ —Ç–µ–Ω—è—Ö! –°–¥–µ–ª–∫–∞ –ø–æ \"<b>{item_name_for_msg}</b>\" —Å–æ—Ä–≤–∞–ª–∞—Å—å. –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ... –ø–æ–∫–∞ —á—Ç–æ.", parse_mode="HTML")
    finally:
        if conn and not conn.is_closed():
            await conn.close()
        await state.clear()

@black_market_router.message(BlackMarketPurchaseStates.awaiting_confirmation, F.text.lower() == "–Ω–µ—Ç")
async def cmd_bm_purchase_confirm_no(message: Message, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–µ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å (Personal))
    if not message.from_user: return
    user_id = message.from_user.id
    user_data_from_state = await state.get_data()
    state_user_id = user_data_from_state.get('original_user_id')
    action_type = user_data_from_state.get('action_type')

    if state_user_id != user_id or action_type != "buy_bm_slot_personal": return # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø

    offer_data_from_state: Optional[Dict] = user_data_from_state.get('user_offer_data') # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_offer_data
    item_name_for_msg = "—Ç–æ–≤–∞—Ä —Å –ß–†"
    if offer_data_from_state:
        item_name_for_msg = html.escape(offer_data_from_state.get('display_name_override') or offer_data_from_state.get('item_key', '—Ç–æ–≤–∞—Ä —Å –ß–†'))
    
    user_link = get_user_mention_html(user_id, message.from_user.full_name, message.from_user.username)
    await message.reply(f"ü•∑ –ú—É–¥—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ, {user_link}. –°–¥–µ–ª–∫–∞ –ø–æ \"<b>{item_name_for_msg}</b>\" –æ—Ç–º–µ–Ω–µ–Ω–∞. –¢–µ–Ω–∏ –æ—Ç—Å—Ç—É–ø–∞—é—Ç... –Ω–∞ –≤—Ä–µ–º—è.", parse_mode="HTML")
    await state.clear()

@black_market_router.message(BlackMarketPurchaseStates.awaiting_confirmation)
async def cmd_bm_purchase_invalid_confirmation(message: Message, state: FSMContext):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–µ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å (Personal))
    if not message.from_user: return
    user_id = message.from_user.id
    user_data_from_state = await state.get_data()
    state_user_id = user_data_from_state.get('original_user_id')
    action_type = user_data_from_state.get('action_type')

    if state_user_id != user_id or action_type != "buy_bm_slot_personal": return # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø

    confirmation_initiated_at_iso = user_data_from_state.get('confirmation_initiated_at')
    offer_data_from_state: Optional[Dict] = user_data_from_state.get('user_offer_data') # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_offer_data
    item_name_for_msg = "—Ç–æ–≤–∞—Ä —Å –ß–†"
    if offer_data_from_state:
        item_name_for_msg = html.escape(offer_data_from_state.get('display_name_override') or offer_data_from_state.get('item_key', '—Ç–æ–≤–∞—Ä —Å –ß–†'))

    timeout_seconds = Config.MARKET_PHONE_CONFIRMATION_TIMEOUT_SECONDS

    if confirmation_initiated_at_iso:
        try:
            confirmation_initiated_at = datetime.fromisoformat(confirmation_initiated_at_iso)
            if (datetime.now(dt_timezone.utc) - confirmation_initiated_at) > timedelta(seconds=timeout_seconds):
                await state.clear()
                await message.reply(f"ü•∑ –¢–µ–Ω–∏ –Ω–µ –∂–¥—É—Ç –≤–µ—á–Ω–æ. –í—Ä–µ–º—è –Ω–∞ —Å–¥–µ–ª–∫—É –ø–æ \"<b>{item_name_for_msg}</b>\" –∏—Å—Ç–µ–∫–ª–æ.", parse_mode="HTML")
                return
        except ValueError: 
            await state.clear()
            await message.reply("ü•∑ –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞—Ä–∞–¥–æ–∫—Å! –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–¥–µ–ª–∫–∏. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
            return
    
    await message.reply("ü•∑ –†–µ—à–∞–π—Å—è, –¥–∞ –∏–ª–∏ –Ω–µ—Ç? –¢–µ–Ω–∏ –Ω–µ –ª—é–±—è—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏.")


# –§—É–Ω–∫—Ü–∏—è refresh_black_market_offers (–ì–õ–û–ë–ê–õ–¨–ù–ê–Ø) –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ß–†.
# –£–¥–∞–ª—è–µ–º –µ–µ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ
# —Å–±—Ä–æ—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–æ–π),
# —Ç–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ.

async def refresh_black_market_offers(bot: Optional[Bot] = None): # <--- –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –° –ö–†–ê–Ø
    logger.info("BLACKMARKET: –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –ß–µ—Ä–Ω–æ–≥–æ –†—ã–Ω–∫–∞...") # <--- –û–¢–°–¢–£–ü –í–ù–£–¢–†–ò –§–£–ù–ö–¶–ò–ò
    conn = None
    generated_offers_count = 0
    try: # <--- –û–¢–°–¢–£–ü –í–ù–£–¢–†–ò –§–£–ù–ö–¶–ò–ò
        conn = await database.get_connection()
        # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ refresh_black_market_offers —Å —Ç–∞–∫–∏–º –∂–µ –æ—Ç—Å—Ç—É–ø–æ–º ...
    except Exception as e: # <--- –û–¢–°–¢–£–ü –í–ù–£–¢–†–ò –§–£–ù–ö–¶–ò–ò
        logger.error(f"BLACKMARKET: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ...", exc_info=True)
    finally: # <--- –û–¢–°–¢–£–ü –í–ù–£–¢–†–ò –§–£–ù–ö–¶–ò–ò
        if conn and not conn.is_closed():
            await conn.close()


def setup_black_market_handlers(dp: Router):
    dp.include_router(black_market_router)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ß—ë—Ä–Ω–æ–≥–æ –†—ã–Ω–∫–∞ (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")