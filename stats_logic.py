import html
import logging
from typing import Optional, Tuple

from aiogram import F, Bot, Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from aiogram.utils.markdown import hlink
from pytz import timezone as pytz_timezone

import database
from config import Config #
from utils import get_user_mention_html, send_telegram_log, fetch_user_display_data, resolve_target_user
from business_data import BANK_DATA, BUSINESS_DATA #
from phone_data import PHONE_MODELS as PHONE_MODELS_STANDARD_LIST #
from exclusive_phone_data import EXCLUSIVE_PHONE_MODELS as EXCLUSIVE_PHONE_MODELS_LIST #
from datetime import datetime, timedelta
import pytz #

logger = logging.getLogger(__name__)
stats_router = Router()
PHONE_MODELS_STD_DICT_STATS = {p["key"]: p for p in PHONE_MODELS_STANDARD_LIST} #
EXCLUSIVE_PHONE_MODELS_DICT_STATS = {p["key"]: p for p in EXCLUSIVE_PHONE_MODELS_LIST} #

async def _get_formatted_stats(target_user_id: int, target_chat_id: int, bot_instance: Bot, for_self: bool = True) -> str:
    target_full_name, target_username = await fetch_user_display_data(bot_instance, target_user_id)
    target_user_link = get_user_mention_html(target_user_id, target_full_name, target_username)

    response_lines = [f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {target_user_link}</b>"]
    if not for_self:
        try:
            chat_info = await bot_instance.get_chat(target_chat_id)
            chat_title_display = html.escape(chat_info.title or f"—á–∞—Ç–µ ID {target_chat_id}")
            response_lines.append(f"<i>(–≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ: {chat_title_display})</i>")
        except Exception:
            response_lines.append(f"<i>(–≤ —á–∞—Ç–µ ID: {target_chat_id})</i>")

    response_lines.append("--------------------")
    
    # --- –ù–û–í–´–ô –ö–û–î: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ---
    selected_achievement_key = await database.get_user_selected_achievement(target_user_id)
    if selected_achievement_key:
        ach_info = Config.ACHIEVEMENTS_DATA.get(selected_achievement_key)
        if ach_info:
            response_lines.append(f"üåü –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {ach_info['icon']} <b>¬´{ach_info['name']}¬ª</b>")
            response_lines.append(f"  <i>{ach_info['description']}</i>")
        else:
            response_lines.append("üåü –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ (–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω)")
    else:
        response_lines.append("üåü –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ù–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /selectachievement)")
    response_lines.append("--------------------")
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ---

    # 1. –í–µ—Ä—Å–∏—è OneUI –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
    current_version_chat = await database.get_user_version(target_user_id, target_chat_id)
    response_lines.append(f"üíª –í–µ—Ä—Å–∏—è OneUI (—ç—Ç–æ—Ç —á–∞—Ç): {current_version_chat:.1f}")

    # 2. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è OneUI –≥–ª–æ–±–∞–ª—å–Ω–æ
    max_version_data = await database.get_user_max_version_global_with_chat_info(target_user_id)
    if max_version_data and max_version_data.get('version') is not None:
        max_v = max_version_data['version']
        chat_title = max_version_data.get('chat_title')
        chat_link = max_version_data.get('telegram_chat_link')
        chat_id_max_v = max_version_data.get('chat_id')

        chat_info_str = ""
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨:
        # –ï—Å–ª–∏ ID —á–∞—Ç–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
        # –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –µ–≥–æ –ª–∏—á–Ω—ã–π —á–∞—Ç.
        if chat_id_max_v and chat_id_max_v == target_user_id:
            chat_info_str = " (–í –ª–∏—á–Ω–æ–º —á–∞—Ç–µ)"
        elif chat_title: # –ò–Ω–∞—á–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
            escaped_chat_title = html.escape(chat_title)
            if chat_link:
                chat_info_str = f" (–≤ —á–∞—Ç–µ {hlink(escaped_chat_title, chat_link)})"
            else:
                chat_info_str = f" (–≤ —á–∞—Ç–µ '{escaped_chat_title}')"
        elif chat_id_max_v: # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è, –Ω–æ –µ—Å—Ç—å ID (–∏ —ç—Ç–æ –Ω–µ –ª–∏—á–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            chat_info_str = f" (–≤ —á–∞—Ç–µ ID <code>{chat_id_max_v}</code>)"
        # –ï—Å–ª–∏ chat_info_str –æ—Å—Ç–∞–ª—Å—è –ø—É—Å—Ç—ã–º, –∑–Ω–∞—á–∏—Ç, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ –Ω–µ—Ç

        response_lines.append(f"üèÜ –ú–∞–∫—Å. –≤–µ—Ä—Å–∏—è OneUI: <code>{float(max_v):.1f}</code>{chat_info_str}")
    else:
        response_lines.append(f"üèÜ –ú–∞–∫—Å. –≤–µ—Ä—Å–∏—è OneUI: 0.0 (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")


    # 3. OneCoin –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
    onecoins_chat = await database.get_user_onecoins(target_user_id, target_chat_id)
    response_lines.append(f"¬©Ô∏è OneCoin (—ç—Ç–æ—Ç —á–∞—Ç): {onecoins_chat:}")

    # 4. –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫
    streak_data = await database.get_user_daily_streak(target_user_id, target_chat_id)
    current_streak = 0
    if streak_data:
        today_local_date = datetime.now(pytz_timezone(Config.TIMEZONE)).date()
        last_check_date_db = streak_data.get('last_streak_check_date')
        if last_check_date_db and (last_check_date_db == today_local_date or last_check_date_db == (today_local_date - timedelta(days=1))):
            current_streak = streak_data.get('current_streak', 0)
    response_lines.append(f"üî• –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—Ç—Ä–∏–∫: {current_streak}")

    # 5. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–º—å–µ
    family_membership = await database.get_user_family_membership(target_user_id)
    if family_membership:
        family_name = html.escape(family_membership.get('family_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ–º—å—è'))
        role = "üëë –õ–∏–¥–µ—Ä" if family_membership.get('leader_id') == target_user_id else "–£—á–∞—Å—Ç–Ω–∏–∫"
        response_lines.append(f"üë™ –°–µ–º—å—è: <b>{family_name}</b> ({role})")
    else:
        response_lines.append("üë™ –°–µ–º—å—è: –ù–µ —Å–æ—Å—Ç–æ–∏—Ç")

    # 6. –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã (—Å –¥–µ—Ç–∞–ª—è–º–∏, –ë–ï–ó ID)
    user_active_phones = await database.get_user_phones(target_user_id, active_only=True)
    active_phones_count = len(user_active_phones)
    response_lines.append(f"üì± –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã ({active_phones_count}/{Config.MAX_PHONES_PER_USER}):")
    if user_active_phones:
        for phone_db in user_active_phones:
            phone_key = phone_db['phone_model_key']
            # phone_id_inv = phone_db['phone_inventory_id'] # ID –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞

            phone_name_display = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (<code>{html.escape(phone_key)}</code>)"
            phone_data_from_db = phone_db.get('data', {}) or {}

            # –ü–æ–∏—Å–∫ –∏–º–µ–Ω–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö, –ø–æ—Ç–æ–º –≤ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö, –ø–æ—Ç–æ–º –≤ data –∏–∑ –ß–†
            if phone_key in PHONE_MODELS_STD_DICT_STATS:
                phone_name_display = html.escape(PHONE_MODELS_STD_DICT_STATS[phone_key].get('display_name', PHONE_MODELS_STD_DICT_STATS[phone_key]['name']))
            elif phone_key in EXCLUSIVE_PHONE_MODELS_DICT_STATS:
                phone_name_display = html.escape(EXCLUSIVE_PHONE_MODELS_DICT_STATS[phone_key].get('display_name', EXCLUSIVE_PHONE_MODELS_DICT_STATS[phone_key]['name']))
            elif phone_data_from_db.get('display_name_override'): # –ò–∑ –ß–† —Å–ª–æ—Ç–∞
                phone_name_display = html.escape(phone_data_from_db['display_name_override'])

            # –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ID —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            response_lines.append(f"  - <b>{phone_name_display}</b>")
    else:
        response_lines.append("  <i>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.</i>")


    # 7. –£—Ä–æ–≤–µ–Ω—å –±–∞–Ω–∫–∞ –∏ –±–∞–ª–∞–Ω—Å –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
    user_bank_data = await database.get_user_bank(target_user_id, target_chat_id)
    bank_level = user_bank_data['bank_level'] if user_bank_data else 0
    bank_balance = user_bank_data['current_balance'] if user_bank_data else 0
    bank_info_static = BANK_DATA.get(bank_level)
    bank_name_display = html.escape(bank_info_static['name']) if bank_info_static else "–ú–∏–Ω–∏-–∫–æ–ø–∏–ª–∫–∞"
    response_lines.append(f"üè¶ –ë–∞–Ω–∫ ({bank_name_display}, –£—Ä. {bank_level}): {bank_balance:,} OC")

    # 8. –ë–∏–∑–Ω–µ—Å—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ (—Å –¥–µ—Ç–∞–ª—è–º–∏)
    user_businesses_chat = await database.get_user_businesses(target_user_id, target_chat_id)
    businesses_count_chat = len(user_businesses_chat)
    response_lines.append(f"üè¢ –ë–∏–∑–Ω–µ—Å—ã ({businesses_count_chat}/{Config.BUSINESS_MAX_PER_USER_PER_CHAT}, —ç—Ç–æ—Ç —á–∞—Ç):")
    if user_businesses_chat:
        for biz_db in user_businesses_chat:
            biz_key = biz_db['business_key']
            biz_level = biz_db['current_level']
            biz_id_db = biz_db['business_id']

            biz_name_override = biz_db.get('name_override')
            biz_static_data = BUSINESS_DATA.get(biz_key)

            biz_name_display = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å (<code>{html.escape(biz_key)}</code>)"
            if biz_name_override:
                biz_name_display = html.escape(biz_name_override)
            elif biz_static_data and biz_static_data.get('levels', {}).get(biz_level):
                biz_name_display = html.escape(biz_static_data['levels'][biz_level].get('display_name', biz_static_data['name']))
            elif biz_static_data:
                biz_name_display = html.escape(biz_static_data.get('name', biz_key))

            response_lines.append(f"  - <b>{biz_name_display}</b> (–£—Ä. {biz_level})")
    else:
        response_lines.append("  <i>–ù–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.</i>")

    return "\n".join(response_lines)


@stats_router.message(Command("mystats", "–º–æ—è—Å—Ç–∞—Ç–∞", "–º–æ—è—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stata", "–ø—Ä–æ—Ñ–∏–ª—å", "profile", ignore_case=True))
async def cmd_my_stats_explicit(message: Message, bot: Bot): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    if not message.from_user:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", disable_web_page_preview=True)
        return

    user_id = message.from_user.id
    chat_id = message.chat.id

    try:
        stats_message = await _get_formatted_stats(user_id, chat_id, bot, for_self=True)
        await message.reply(stats_message, parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Error in /mystats (explicit) for user {user_id} in chat {chat_id}: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", disable_web_page_preview=True)
        user_link_for_log = get_user_mention_html(user_id, message.from_user.full_name, message.from_user.username)
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /mystats (explicit) –¥–ª—è {user_link_for_log}: <pre>{html.escape(str(e))}</pre>")

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /—Å—Ç–∞—Ç–∞ –∏ /—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@stats_router.message(Command("—Å—Ç–∞—Ç–∞", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", ignore_case=True))
async def cmd_general_stats_handler(message: Message, command: CommandObject, bot: Bot):
    if not message.from_user:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", disable_web_page_preview=True)
        return

    calling_user_id = message.from_user.id
    current_chat_id = message.chat.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–ª—å (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã)
    has_args = bool(command.args)
    is_reply = bool(message.reply_to_message and message.reply_to_message.from_user and not message.reply_to_message.from_user.is_bot) # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–µ-–±–æ—Ç–∞ –≤ reply

    user_to_display_id: Optional[int] = None
    user_to_display_name: Optional[str] = None
    user_to_display_username: Optional[str] = None
    display_for_self = True

    if has_args or is_reply:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user_data = await resolve_target_user(message, command, bot)
        if target_user_data:
            user_to_display_id, user_to_display_name, user_to_display_username = target_user_data
            if user_to_display_id == calling_user_id: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª —Å–∞–º —Å–µ–±—è
                display_for_self = True
            else:
                display_for_self = False
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å –±–æ—Ç–æ–º (resolve_target_user –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å, –Ω–æ –¥—É–±–ª–∏—Ä—É–µ–º)
                try:
                    target_chat_obj = await bot.get_chat(user_to_display_id)
                    if hasattr(target_chat_obj, 'is_bot') and target_chat_obj.is_bot: # –î–ª—è User –æ–±—ä–µ–∫—Ç–æ–≤
                        await message.reply("–ù–µ–ª—å–∑—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞.", disable_web_page_preview=True)
                        return
                    elif target_chat_obj.type != "private": # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª
                         # resolve_target_user –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —ç—Ç–æ, –µ—Å–ª–∏ –æ–Ω –∏—â–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                         pass # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ resolve_target_user –≤–µ—Ä–Ω—É–ª ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                except Exception:
                    pass # –û—à–∏–±–∫–∏ resolve_target_user –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∞–º
        else:
            # resolve_target_user —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –±—ã–ª–∏, –Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–µ.
            # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ—Ç–≤–µ—Ç –±–æ—Ç—É/—Å–∏—Å—Ç–µ–º–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, —Ç–æ target_user_data –±—É–¥–µ—Ç None.
            if is_reply and not has_args: # –Ø–≤–Ω—ã–π –æ—Ç–≤–µ—Ç, –Ω–æ —Ü–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–∞—à–µ–º—É –æ—Ç–≤–µ—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", disable_web_page_preview=True)
            return
    else:
        # –ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ –æ—Ç–≤–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–∑–≤–∞–≤—à–µ–≥–æ
        user_to_display_id = calling_user_id
        user_to_display_name = message.from_user.full_name
        user_to_display_username = message.from_user.username
        display_for_self = True

    if user_to_display_id is None:
        # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –ª–æ–≥–∏–∫–∞ –≤—ã—à–µ –≤–µ—Ä–Ω–∞
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", disable_web_page_preview=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    try:
        stats_message_content = await _get_formatted_stats(user_to_display_id, current_chat_id, bot, for_self=display_for_self)
        await message.reply(stats_message_content, parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Error in /—Å—Ç–∞—Ç–∞ (general_stats_handler) for target {user_to_display_id} by {calling_user_id}: {e}", exc_info=True)
        target_user_link_log = get_user_mention_html(user_to_display_id, user_to_display_name, user_to_display_username)
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {target_user_link_log}.", parse_mode="HTML", disable_web_page_preview=True)
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        calling_user_link_log = get_user_mention_html(calling_user_id, message.from_user.full_name, message.from_user.username)
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /—Å—Ç–∞—Ç–∞ (general) –¥–ª—è {target_user_link_log} (–∑–∞–ø—Ä–æ—Å–∏–ª {calling_user_link_log}): <pre>{html.escape(str(e))}</pre>")


@stats_router.message(Command("userstats", "—Å—Ç–∞—Ç–∞–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", ignore_case=True))
async def cmd_user_stats_explicit(message: Message, command: CommandObject, bot: Bot): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    if not message.from_user:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É.", disable_web_page_preview=True)
        return

    target_user_data = await resolve_target_user(message, command, bot)

    if not target_user_data:
        # resolve_target_user –¥–æ–ª–∂–µ–Ω –±—ã–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –±—ã–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–º–∏,
        # –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞.
        # –ï—Å–ª–∏ –∂–µ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ –æ—Ç–≤–µ—Ç–æ–º - —Å–æ–æ–±—â–∞–µ–º.
        if not command.args and not message.reply_to_message:
            await message.reply("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID, @username –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ), —á—å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.", disable_web_page_preview=True)
        return

    target_user_id, target_full_name, target_username = target_user_data
    current_chat_id = message.chat.id

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ—Ç–∞
        target_chat_obj = await bot.get_chat(target_user_id)
        if hasattr(target_chat_obj, 'is_bot') and target_chat_obj.is_bot:
            await message.reply("–ù–µ–ª—å–∑—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞.", disable_web_page_preview=True)
            return
        elif target_chat_obj.type != "private": # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∞ –Ω–µ –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª
            # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–ª–∏—à–Ω–µ–π, –µ—Å–ª–∏ resolve_target_user —É–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pass

    except Exception as e_check_bot:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å {target_user_id} –±–æ—Ç–æ–º (userstats_explicit): {e_check_bot}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–æ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –±–æ—Ç, –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î –º–æ–≥—É—Ç –±—ã—Ç—å –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã

    try:
        stats_message = await _get_formatted_stats(target_user_id, current_chat_id, bot, for_self=(target_user_id == message.from_user.id))
        await message.reply(stats_message, parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Error in /userstats (explicit) for target {target_user_id} by {message.from_user.id}: {e}", exc_info=True)
        target_user_link_for_log = get_user_mention_html(target_user_id, target_full_name, target_username)
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {target_user_link_for_log}.", parse_mode="HTML", disable_web_page_preview=True)
        calling_user_link_for_log = get_user_mention_html(message.from_user.id, message.from_user.full_name, message.from_user.username)
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /userstats (explicit) –¥–ª—è {target_user_link_for_log} (–∑–∞–ø—Ä–æ—Å–∏–ª {calling_user_link_for_log}): <pre>{html.escape(str(e))}</pre>")


def setup_stats_handlers(dp: Router):
    dp.include_router(stats_router)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
