# families_logic.py
import asyncio
import html
from datetime import datetime, timedelta, timezone as dt_timezone
from typing import Optional, List # –£–±—Ä–∞–Ω Any, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

from aiogram import Router, Bot, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, User as AiogramUser
# hlink –£–î–ê–õ–ï–ù –û–¢–°–Æ–î–ê, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ utils
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from pytz import timezone as pytz_timezone
from achievements_logic import check_and_grant_achievements # <<< –ù–û–í–´–ô –ò–ú–ü–û–†–¢

import database
from config import Config
from utils import get_user_mention_html, send_telegram_log # –ò–º–ø–æ—Ä—Ç –∏–∑ utils

families_router = Router()

class FamilyLeaveStates(StatesGroup):
    awaiting_text_confirmation = State()

CONFIRMATION_TIMEOUT_SECONDS = 60

# –õ–æ–∫–∞–ª—å–Ω—ã–µ get_user_mention_link –∏ get_user_mention_link_by_id_and_name –£–î–ê–õ–ï–ù–´
# –í–º–µ—Å—Ç–æ –Ω–∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è get_user_mention_html –∏–∑ utils.py


@families_router.message(Command(
    "familycreate", "—Å–æ–∑–¥–∞—Ç—å—Å–µ–º—å—é", "–Ω–æ–≤–∞—è—Å–µ–º—å—è", "–æ—Å–Ω–æ–≤–∞—Ç—å—Å–µ–º—å—é", "createfamily", "newfamily", "—Å–µ–º—å—è—Å–æ–∑–¥–∞—Ç—å",
    ignore_case=True
))
async def family_create_command(message: Message, command: CommandObject, bot: Bot): # bot –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è send_telegram_log
    user = message.from_user
    if not user: return await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    user_link = get_user_mention_html(user.id, user.full_name, user.username)

    if command.args is None:
        return await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —Å–µ–º—å–∏. –ü—Ä–∏–º–µ—Ä: <code>/familycreate –ú–æ—è –°–µ–º—å—è</code>")
    family_name = command.args.strip()
    if not family_name or len(family_name) < 3 or len(family_name) > 30:
        return await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤.")

    try:
        user_max_global_version = await database.get_user_max_version_global(user.id)
        if user_max_global_version < database.FAMILY_CREATION_MIN_VERSION:
            return await message.reply(
                f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏ –≤–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è OneUI (–≥–¥–µ-–ª–∏–±–æ) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {database.FAMILY_CREATION_MIN_VERSION:.1f}. "
                f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {user_max_global_version:.1f}."
            )

        success, result = await database.create_family(
            family_name, user.id, user.full_name,
            message.chat.id, message.chat.title or f"Chat {message.chat.id}"
        )
        if success:
            family_id = result
            await message.reply(f"–°–µ–º—å—è '<b>{html.escape(family_name)}</b>' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ï—ë –ª–∏–¥–µ—Ä: {user_link}.\nID –°–µ–º—å–∏: {family_id}")
            await send_telegram_log(bot, f"üë™ –°–µ–º—å—è '<b>{html.escape(family_name)}</b>' (ID: {family_id}) —Å–æ–∑–¥–∞–Ω–∞ –ª–∏–¥–µ—Ä–æ–º {user_link}.")
            
    # --- –í–´–ó–û–í –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---
            await check_and_grant_achievements(
                  user.id,
                  message.chat.id,
                  bot,
                  family_created_just_now=True # –î–ª—è "–ó–∞—Ä–æ–¥—ã—à –ö–ª–∞–Ω–∞"
            )
                # --- –ö–û–ù–ï–¶ –í–´–ó–û–í–ê –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---        
        else:
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é: {html.escape(str(result))}")
            if "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" not in str(result): # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–º—è –∑–∞–Ω—è—Ç–æ
                await send_telegram_log(bot, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é '{html.escape(family_name)}' –¥–ª—è {user_link}. –ü—Ä–∏—á–∏–Ω–∞: {html.escape(str(result))}")
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–º—å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–º—å–∏ '{html.escape(family_name)}' –¥–ª—è {user_link}: <pre>{html.escape(str(e))}</pre>")


@families_router.message(Command(
    "familyjoin", "–≤—Å—Ç—É–ø–∏—Ç—å–≤—Å–µ–º—å—é", "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è–∫—Å–µ–º—å–µ", "joinfamily", "—Å–µ–º—å—è–≤—Å—Ç—É–ø–∏—Ç—å", "–≤–æ–π—Ç–∏–≤—Å–µ–º—å—é",
    ignore_case=True
))
async def family_join_command(message: Message, command: CommandObject, bot: Bot): # bot –¥–æ–±–∞–≤–ª–µ–Ω
    user = message.from_user
    if not user: return await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    user_link = get_user_mention_html(user.id, user.full_name, user.username)

    if command.args is None:
        return await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å. –ü—Ä–∏–º–µ—Ä: <code>/familyjoin –ò–º—è–°–µ–º—å–∏</code>")
    family_name_arg = command.args.strip()

    try:
        family_info = await database.get_family_by_name(family_name_arg, chat_id=None)
        if not family_info:
            return await message.reply(f"–°–µ–º—å—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{html.escape(family_name_arg)}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        success, result_message = await database.add_user_to_family(
            user.id, user.full_name, family_info['family_id'],
            message.chat.id, message.chat.title or f"Chat {message.chat.id}"
        )
        processed_message = html.escape(result_message)
        if user.full_name and html.escape(user.full_name) in processed_message: # –ó–∞–º–µ–Ω—è–µ–º –∏–º—è –Ω–∞ —Å—Å—ã–ª–∫—É
            processed_message = processed_message.replace(html.escape(user.full_name), user_link)

        await message.reply(processed_message)
        if success:
            await send_telegram_log(bot, f"‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} –≤—Å—Ç—É–ø–∏–ª –≤ —Å–µ–º—å—é '{html.escape(family_info['name'])}'.")
        # --- –í–´–ó–û–í –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---
        await check_and_grant_achievements(
              user.id,
              message.chat.id,
              bot,
              family_joined_just_now=True, # –î–ª—è "–í–µ—Ä–Ω—ã–π –ü–æ—Å–ª—É—à–Ω–∏–∫"
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –¥–ª—è "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ê–ª—å—è–Ω—Å–æ–≤" - –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ–º—å—è —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏
              family_joined_active_competition_just_now=(await database.get_active_family_competition() is not None)
        )
            # --- –ö–û–ù–ï–¶ –í–´–ó–û–í–ê –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---    
    
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ —Å–µ–º—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ {user_link} –≤ —Å–µ–º—å—é '{html.escape(family_name_arg)}': <pre>{html.escape(str(e))}</pre>")


@families_router.message(Command(
    "familyleave", "–ø–æ–∫–∏–Ω—É—Ç—å—Å–µ–º—å—é", "–≤—ã–π—Ç–∏–∏–∑—Å–µ–º—å–∏", "leavefamily", "—Å–µ–º—å—è—É–π—Ç–∏", "—É–π—Ç–∏–∏–∑—Å–µ–º—å–∏",
    ignore_case=True
))
async def family_leave_command(message: Message, state: FSMContext): # bot –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤ confirm
    user = message.from_user
    if not user: return await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    membership = await database.get_user_family_membership(user.id)
    if not membership: return await message.reply("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –∫–∞–∫–æ–π —Å–µ–º—å–µ.")

    family_id = membership['family_id']
    family_name = membership.get('family_name', '–≤–∞—à—É —Å–µ–º—å—é')

    await state.set_state(FamilyLeaveStates.awaiting_text_confirmation)
    await state.update_data(
        family_id_to_leave=family_id,
        family_name_to_leave=family_name,
        confirmation_initiated_at=datetime.now(dt_timezone.utc).isoformat()
    )
    await message.reply(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å–µ–º—å—é '<b>{html.escape(family_name)}</b>'? "
        f"–û—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç' –≤ —Ç–µ—á–µ–Ω–∏–µ {CONFIRMATION_TIMEOUT_SECONDS} —Å–µ–∫—É–Ω–¥."
    )

@families_router.message(FamilyLeaveStates.awaiting_text_confirmation, F.text.lower() == '–¥–∞')
async def family_leave_confirm_yes(message: Message, state: FSMContext, bot: Bot):
    user = message.from_user
    if not user:
        await state.clear()
        return await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    user_link = get_user_mention_html(user.id, user.full_name, user.username)

    user_data = await state.get_data()
    family_id_to_leave = user_data.get('family_id_to_leave')
    family_name_to_leave = user_data.get('family_name_to_leave', '–≤–∞—à—É —Å–µ–º—å—é')
    confirmation_initiated_at_iso = user_data.get('confirmation_initiated_at')

    if not family_id_to_leave or not confirmation_initiated_at_iso:
        await state.clear()
        return await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /familyleave.")

    try:
        confirmation_initiated_at = datetime.fromisoformat(confirmation_initiated_at_iso)
        current_time = datetime.now(dt_timezone.utc)
        if (current_time - confirmation_initiated_at) > timedelta(seconds=CONFIRMATION_TIMEOUT_SECONDS):
            await state.clear()
            return await message.reply(f"–í—Ä–µ–º—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–µ–º—å–∏ '<b>{html.escape(family_name_to_leave)}</b>' –∏—Å—Ç–µ–∫–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /familyleave —Å–Ω–æ–≤–∞.")
    except ValueError:
         await state.clear()
         return await message.reply("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Ä–µ–º–µ–Ω–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")

    try:
        current_membership = await database.get_user_family_membership(user.id)
        if not current_membership or current_membership['family_id'] != family_id_to_leave:
            await state.clear()
            return await message.reply(f"–í—ã –±–æ–ª—å—à–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ '{html.escape(family_name_to_leave)}' –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

        success, result_message_db = await database.remove_user_from_family(
            user.id, family_id_to_leave, user.id, user.full_name, "LEAVE",
            message.chat.id, message.chat.title or f"Chat {message.chat.id}"
        )
        processed_message = html.escape(result_message_db)
        if user.full_name and html.escape(user.full_name) in processed_message:
            processed_message = processed_message.replace(html.escape(user.full_name), user_link)

        await message.reply(processed_message)
        if success:
            await send_telegram_log(bot, f"‚ûñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} –ø–æ–∫–∏–Ω—É–ª —Å–µ–º—å—é '{html.escape(family_name_to_leave)}'.")
            # --- –í–´–ó–û–í –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---
            await check_and_grant_achievements(
                user.id,
                message.chat.id,
                bot,
                family_left_just_now=True # –î–ª—è "–ü—Ä–µ–¥–∞—Ç–µ–ª—å –°–∏—Å—Ç–µ–º—ã"
            )
            # --- –ö–û–ù–ï–¶ –í–´–ó–û–í–ê –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–µ–º—å–∏.")
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ {user_link} –∏–∑ —Å–µ–º—å–∏ '{html.escape(family_name_to_leave)}': <pre>{html.escape(str(e))}</pre>")
    finally:
        await state.clear()


@families_router.message(FamilyLeaveStates.awaiting_text_confirmation, F.text.lower() == '–Ω–µ—Ç')
async def family_leave_confirm_no(message: Message, state: FSMContext):
    user_data = await state.get_data()
    family_name_to_leave = user_data.get('family_name_to_leave', '–≤–∞—à—É —Å–µ–º—å—é')
    await message.reply(f"–í—ã—Ö–æ–¥ –∏–∑ —Å–µ–º—å–∏ '<b>{html.escape(family_name_to_leave)}</b>' –æ—Ç–º–µ–Ω–µ–Ω.")
    await state.clear()

@families_router.message(FamilyLeaveStates.awaiting_text_confirmation)
async def family_leave_invalid_confirmation(message: Message, state: FSMContext):
    user_data = await state.get_data()
    confirmation_initiated_at_iso = user_data.get('confirmation_initiated_at')
    if confirmation_initiated_at_iso:
        try:
            confirmation_initiated_at = datetime.fromisoformat(confirmation_initiated_at_iso)
            current_time = datetime.now(dt_timezone.utc)
            if (current_time - confirmation_initiated_at) > timedelta(seconds=CONFIRMATION_TIMEOUT_SECONDS):
                family_name_to_leave = user_data.get('family_name_to_leave', '–≤–∞—à—É —Å–µ–º—å—é')
                await state.clear()
                return await message.reply(f"–í—Ä–µ–º—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–µ–º—å–∏ '<b>{html.escape(family_name_to_leave)}</b>' –∏—Å—Ç–µ–∫–ª–æ.")
        except ValueError: pass # –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ confirm_yes, –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞

    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")


@families_router.message(Command(
    "familykick", "–∫–∏–∫–Ω—É—Ç—å–∏–∑—Å–µ–º—å–∏", "–≤—ã–≥–Ω–∞—Ç—å–∏–∑—Å–µ–º—å–∏", "–∏—Å–∫–ª—é—á–∏—Ç—å–∏–∑—Å–µ–º—å–∏", "kickfamily", "—Å–µ–º—å—è–∫–∏–∫",
    ignore_case=True
))
async def family_kick_command(message: Message, command: CommandObject, bot: Bot):
    leader = message.from_user
    if not leader: return await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–∏–¥–µ—Ä–∞.")
    leader_link = get_user_mention_html(leader.id, leader.full_name, leader.username)

    target_user_id: Optional[int] = None
    target_user_full_name_for_db: Optional[str] = None
    target_user_username_for_link: Optional[str] = None
    target_user_display_link: str = "N/A"

    if message.reply_to_message and message.reply_to_message.from_user:
        target_user_obj = message.reply_to_message.from_user
        target_user_id = target_user_obj.id
        target_user_full_name_for_db = target_user_obj.full_name
        target_user_username_for_link = target_user_obj.username
        target_user_display_link = get_user_mention_html(target_user_id, target_user_full_name_for_db, target_user_username_for_link)
    elif command.args:
        target_arg = command.args.strip()
        if target_arg.startswith('@'):
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å username –±–µ–∑ @
            username_to_check = target_arg[1:]
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ user_id –ø–æ username, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
            # –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î –∏–ª–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ username:user_id.
            # –ü–æ–∫–∞ —á—Ç–æ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ "–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã.
            return await message.reply("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ @username –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ –±–µ–∑ –ø–æ–∏—Å–∫–∞ ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        else:
            try:
                target_user_id = int(target_arg)
                # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                try:
                    # get_chat –º–æ–∂–µ—Ç –Ω–µ –≤–µ—Ä–Ω—É—Ç—å full_name –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –±–æ—Ç —Å –Ω–∏–º –Ω–µ –æ–±—â–∞–ª—Å—è
                    # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏–º–µ—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ –ë–î –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
                    target_user_chat_info = await bot.get_chat(target_user_id) # type: ignore
                    target_user_full_name_for_db = getattr(target_user_chat_info, 'full_name', None) or getattr(target_user_chat_info, 'first_name', None) # –î–æ–±–∞–≤–∏–ª first_name
                    target_user_username_for_link = getattr(target_user_chat_info, 'username', None)
                    target_user_display_link = get_user_mention_html(target_user_id, target_user_full_name_for_db, target_user_username_for_link)
                except Exception: # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    target_user_full_name_for_db = f"User ID {target_user_id}" # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                    target_user_display_link = get_user_mention_html(target_user_id, None, None) # –ò–º—è –±—É–¥–µ—Ç "User ID X"
            except ValueError:
                return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        return await message.reply("–£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è.")

    if not target_user_id: return await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è.")
    if target_user_id == leader.id: return await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")

    try:
        leader_membership = await database.get_user_family_membership(leader.id)
        if not leader_membership: return await message.reply("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.")

        family_info = await database.get_family_by_id(leader_membership['family_id'])
        if not family_info or family_info['leader_id'] != leader.id:
            return await message.reply("–¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä —Å–µ–º—å–∏ –º–æ–∂–µ—Ç –∏—Å–∫–ª—é—á–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")

        target_membership = await database.get_user_family_membership(target_user_id)
        if not target_membership or target_membership['family_id'] != family_info['family_id']:
            return await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_display_link} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–π —Å–µ–º—å–µ.")

        success, result_message_from_db = await database.remove_user_from_family(
            target_user_id, family_info['family_id'], leader.id, leader.full_name, "KICK",
            message.chat.id, message.chat.title or f"Chat {message.chat.id}",
            target_full_name_override = target_user_full_name_for_db # –ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
        )
        final_message = html.escape(result_message_from_db)
        # –ó–∞–º–µ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –Ω–∞ —Å—Å—ã–ª–∫–∏
        placeholder_name_escaped = html.escape(target_user_full_name_for_db or f"User ID {target_user_id}")
        if placeholder_name_escaped in final_message:
             final_message = final_message.replace(placeholder_name_escaped, target_user_display_link)
        elif f"User ID {target_user_id}" in final_message: # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑ –ë–î –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è ID
             final_message = final_message.replace(f"User ID {target_user_id}", target_user_display_link)

        if leader.full_name and html.escape(leader.full_name) in final_message:
            final_message = final_message.replace(html.escape(leader.full_name), leader_link)

        await message.reply(final_message)
        if success:
            await send_telegram_log(bot, f"üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_display_link} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Å–µ–º—å–∏ '{html.escape(family_info['name'])}' –ª–∏–¥–µ—Ä–æ–º {leader_link}.")
        # --- –í–´–ó–û–í –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô (–¥–ª—è –∫–∏–∫–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ---
            # –≠—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ—Ç, –∫–æ–≥–æ –∫–∏–∫–Ω—É–ª–∏, –∞ –Ω–µ —Ç–æ—Ç, –∫—Ç–æ –∫–∏–∫–Ω—É–ª
        await check_and_grant_achievements(
              target_user_id, # ID –∫–∏–∫–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              message.chat.id,
              bot,
              family_kicked_just_now=True # –î–ª—è "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –ö—Ä—É–≥–∞"
        )
            # --- –ö–û–ù–ï–¶ –í–´–ó–û–í–ê –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---
        
    
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ {target_user_display_link} –ª–∏–¥–µ—Ä–æ–º {leader_link} –∏–∑ —Å–µ–º—å–∏: <pre>{html.escape(str(e))}</pre>")


@families_router.message(Command(
    "familyrename", "–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å—Å–µ–º—å—é", "—Å–º–µ–Ω–∏—Ç—å–∏–º—è—Å–µ–º—å–∏", "renamefamily", "—Å–µ–º—å—è–∏–º—è", "–Ω–æ–≤–æ–µ–∏–º—è—Å–µ–º—å–∏",
    ignore_case=True
))
async def family_rename_command(message: Message, command: CommandObject, bot: Bot):
    user = message.from_user
    if not user: return await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    user_link = get_user_mention_html(user.id, user.full_name, user.username)

    if command.args is None:
        return await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–µ–º—å–∏. –ü—Ä–∏–º–µ—Ä: <code>/familyrename –ù–æ–≤–æ–µ–ò–º—è</code>")
    new_name = command.args.strip()
    if not new_name or len(new_name) < 3 or len(new_name) > 30:
        return await message.reply("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤.")

    try:
        membership = await database.get_user_family_membership(user.id)
        if not membership: return await message.reply("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.")
        
        old_family_info = await database.get_family_by_id(membership['family_id'])
        old_name_for_log = old_family_info['name'] if old_family_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å—Ç–∞—Ä–æ–µ –∏–º—è"


        success, result_message = await database.update_family_name(
            membership['family_id'], new_name, user.id, user.full_name,
            message.chat.id, message.chat.title or f"Chat {message.chat.id}"
        )
        await message.reply(html.escape(result_message))
        if success:
            await send_telegram_log(bot, f"‚úèÔ∏è –°–µ–º—å—è '{html.escape(old_name_for_log)}' (ID: {membership['family_id']}) –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{html.escape(new_name)}' –ª–∏–¥–µ—Ä–æ–º {user_link}.")
        elif "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" not in result_message:
             await send_telegram_log(bot, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å–µ–º—å—é (ID: {membership['family_id']}) –≤ '{html.escape(new_name)}' –ª–∏–¥–µ—Ä–æ–º {user_link}. –ü—Ä–∏—á–∏–Ω–∞: {html.escape(result_message)}")
        
        # --- –í–´–ó–û–í –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---
        await check_and_grant_achievements(
              user.id,
              message.chat.id,
              bot,
              family_renamed_just_now=True # –î–ª—è "–ì–æ–ª–æ—Å –•–∞–æ—Å–∞"
        )
            # --- –ö–û–ù–ï–¶ –í–´–ó–û–í–ê –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---        
    
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Å–µ–º—å–∏.")
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Å–µ–º—å–∏ (–ª–∏–¥–µ—Ä {user_link}) –≤ '{html.escape(new_name)}': <pre>{html.escape(str(e))}</pre>")


@families_router.message(Command(
    "familystats", "—Å—Ç–∞—Ç–∞—Å–µ–º—å–∏", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å–µ–º—å–∏", "familyinfo", "–∏–Ω—Ñ–æ—Å–µ–º—å–∏", "–∏–Ω—Ñ–∞—Å–µ–º—å—è",
    "—Å–µ–º—å—è—Å—Ç–∞—Ç", "statfamily", "—Å–µ–º—å—è–∏–Ω—Ñ–æ", "—Å–µ–º—å—è",
    ignore_case=True
))
async def family_stats_command(message: Message, command: CommandObject, bot: Bot):
    chat_id_context = message.chat.id
    family_to_show_data: Optional[dict] = None
    user_who_called = message.from_user

    try:
        if command.args:
            family_name_arg = command.args.strip()
            family_to_show_data = await database.get_family_by_name(family_name_arg, chat_id=None)
            if not family_to_show_data:
                return await message.reply(f"–°–µ–º—å—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{html.escape(family_name_arg)}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        elif user_who_called:
            membership = await database.get_user_family_membership(user_who_called.id)
            if not membership:
                await top_families_command(message, bot)
                return
            family_to_show_data = await database.get_family_by_id(membership['family_id'])
        else:
            await top_families_command(message, bot)
            return

        if not family_to_show_data:
            return await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–º—å–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, –∏–ª–∏ –≤—ã –±–æ–ª—å—à–µ –Ω–µ –µ–µ —É—á–∞—Å—Ç–Ω–∏–∫.")

        family_id = family_to_show_data['family_id']
        family_name = html.escape(family_to_show_data['name'])
        leader_id = family_to_show_data['leader_id']

        leader_full_name_from_db: Optional[str] = None
        leader_username_from_db: Optional[str] = None
        conn = None
        try:
            conn = await database.get_connection()
            leader_info_row = await conn.fetchrow("SELECT full_name, username FROM user_oneui WHERE user_id = $1 ORDER BY last_used DESC NULLS LAST LIMIT 1", leader_id)
            if leader_info_row:
                leader_full_name_from_db = leader_info_row['full_name']
                leader_username_from_db = leader_info_row['username']
        except Exception as e_db: print(f"DB error fetching leader info for {leader_id}: {e_db}") # –û—Å—Ç–∞–≤–∏–º print –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ë–î
        finally:
            if conn and not conn.is_closed(): await conn.close()

        if not leader_full_name_from_db:
            try:
                leader_chat_info = await bot.get_chat(leader_id) # type: ignore
                leader_full_name_from_db = getattr(leader_chat_info, 'full_name', None) or getattr(leader_chat_info, 'first_name', None)
                leader_username_from_db = getattr(leader_chat_info, 'username', None)
            except Exception as e_api: print(f"API error fetching leader info for {leader_id}: {e_api}") # –û—Å—Ç–∞–≤–∏–º print –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ API

        leader_link = get_user_mention_html(leader_id, leader_full_name_from_db, leader_username_from_db)
        members_data = await database.get_family_members(family_id)
        member_count = len(members_data)

        response_lines = [
            f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–µ–º—å–∏: {family_name}</b> (ID: {family_id})",
            f"üëë –õ–∏–¥–µ—Ä: {leader_link}",
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}/{Config.FAMILY_MAX_MEMBERS}",
            "--------------------",
        ]
        if members_data:
            response_lines.append("<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è):</b>")
            for member in members_data:
                user_id_member = member['user_id']
                member_full_name = member.get('full_name_when_joined')
                member_username_db = member.get('username') # username —Ç–µ–ø–µ—Ä—å –±–µ—Ä–µ—Ç—Å—è –∏–∑ get_family_members
                member_display_link = get_user_mention_html(user_id_member, member_full_name, member_username_db)
                user_personal_version_in_this_chat = await database.get_user_version(user_id_member, chat_id_context)
                response_lines.append(
                    f"üë§ {member_display_link}: \n"
                    f"   ‚ñ´Ô∏è –õ–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è: <code>{user_personal_version_in_this_chat:.1f}</code>"
                )
        else:
            response_lines.append("–í —Å–µ–º—å–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        await message.reply("\n".join(response_lines), parse_mode="HTML", disable_web_page_preview=True)

    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ–º—å–∏.")
        user_who_called_link = get_user_mention_html(user_who_called.id, user_who_called.full_name, user_who_called.username) if user_who_called else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /familystats (–∑–∞–ø—Ä–æ—Å–∏–ª {user_who_called_link}): <pre>{html.escape(str(e))}</pre>")


@families_router.message(Command(
    "topfamilies", "—Ç–æ–ø—Å–µ–º—å—è", "—Ç–æ–ø—Å–µ–º–µ–π", "topfamily", "—Å–µ–º–µ–π–Ω—ã–π—Ç–æ–ø", "—Ä–µ–π—Ç–∏–Ω–≥—Å–µ–º–µ–π",
    "familytop", "families_top", "–ª—É—á—à–∏–µ—Å–µ–º—å–∏", "—Å–µ–º—å—è—Ç–æ–ø",
    ignore_case=True
))
async def top_families_command(message: Message, bot: Bot):
    try:
        top_fams = await database.get_top_families_by_total_contribution(limit=10)
        if not top_fams:
            return await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç —Å–µ–º–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–æ–ø–µ.")

        response_lines = ["<b>üèÜ –¢–æ–ø –°–µ–º–µ–π (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º):</b>"]
        conn_local = None # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–º—è, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è —Å conn –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
        try:
            conn_local = await database.get_connection()
            for i, fam_data in enumerate(top_fams):
                leader_id = fam_data['leader_id']
                leader_full_name = fam_data.get('leader_full_name') # –≠—Ç–æ –∏–º—è –∏–∑ user_oneui –∏–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
                leader_username: Optional[str] = None

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–∞–º–æ–≥–æ —Å–≤–µ–∂–µ–≥–æ username, –µ—Å–ª–∏ leader_full_name —É–∂–µ –µ—Å—Ç—å
                # leader_full_name –∏–∑ get_top_families_by_total_contribution —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∏–∑ user_oneui
                if conn_local:
                    leader_info_row = await conn_local.fetchrow("SELECT username FROM user_oneui WHERE user_id = $1 ORDER BY last_used DESC NULLS LAST LIMIT 1", leader_id)
                    if leader_info_row:
                        leader_username = leader_info_row['username']
                
                # –ï—Å–ª–∏ –∏–º—è –≤—Å–µ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –µ—Å–ª–∏ –ª–∏–¥–µ—Ä –µ—Å—Ç—å –≤ user_oneui)
                if not leader_full_name:
                    try:
                        leader_chat_info = await bot.get_chat(leader_id) # type: ignore
                        leader_full_name = getattr(leader_chat_info, 'full_name', None) or getattr(leader_chat_info, 'first_name', None)
                        if not leader_username: # –ï—Å–ª–∏ username –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏–∑ –ë–î
                           leader_username = getattr(leader_chat_info, 'username', None)
                    except Exception as e_gc: print(f"API error fetching leader info {leader_id} for topfamilies: {e_gc}")


                leader_link = get_user_mention_html(leader_id, leader_full_name, leader_username)
                response_lines.append(
                    f"{i + 1}. <b>{html.escape(fam_data['name'])}</b> - "
                    f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {fam_data['member_count']}/{Config.FAMILY_MAX_MEMBERS}, –õ–∏–¥–µ—Ä: {leader_link}"
                )
        finally:
            if conn_local and not conn_local.is_closed(): await conn_local.close()
        await message.reply("\n".join(response_lines), parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–ø–∞ —Å–µ–º–µ–π.")
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /topfamilies: <pre>{html.escape(str(e))}</pre>")


@families_router.message(Command(
    "familylog", "–ª–æ–≥—Å–µ–º—å–∏", "–∏—Å—Ç–æ—Ä–∏—è—Å–µ–º—å–∏", "familyhistory", "logfamily", "—Å–µ–º—å—è–ª–æ–≥", "–¥–µ–π—Å—Ç–≤–∏—è—Å–µ–º—å–∏",
    ignore_case=True
))
async def family_log_command(message: Message, bot: Bot): # bot –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è send_telegram_log
    user = message.from_user
    if not user: return await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    user_link = get_user_mention_html(user.id, user.full_name, user.username)

    try:
        membership = await database.get_user_family_membership(user.id)
        if not membership:
            return await message.reply("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –µ—ë –ª–æ–≥.")

        family_id = membership['family_id']
        family_info = await database.get_family_by_id(family_id)
        if not family_info:
            return await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π —Å–µ–º—å–µ.")

        logs = await database.get_family_logs(family_id, limit=20)
        if not logs:
            return await message.reply(f"–õ–æ–≥ –¥–ª—è —Å–µ–º—å–∏ '{html.escape(family_info['name'])}' –ø–æ–∫–∞ –ø—É—Å—Ç.")

        response_lines = [f"<b>üìú –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π —Å–µ–º—å–∏ '{html.escape(family_info['name'])}' (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(logs)}):</b>"]
        pytz_tz = pytz_timezone(Config.TIMEZONE if Config.TIMEZONE else "UTC")

        for log_entry in logs:
            ts_db = log_entry['timestamp']
            ts_local = ts_db.astimezone(pytz_tz)
            ts_formatted = ts_local.strftime('%Y-%m-%d %H:%M:%S %Z')

            actor_display_link = "–°–∏—Å—Ç–µ–º–∞"
            actor_name = log_entry['actor_full_name']
            actor_id = log_entry['actor_user_id']
            # Username –¥–ª—è –ª–æ–≥–æ–≤ –Ω–µ –±—É–¥–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å
            if actor_id:
                 actor_display_link = get_user_mention_html(actor_id, actor_name, None) # username=None

            description_text = html.escape(log_entry['description'])
            if actor_id and actor_name and html.escape(actor_name) in description_text:
                description_text = description_text.replace(html.escape(actor_name), actor_display_link)

            target_id = log_entry['target_user_id']
            target_name = log_entry['target_full_name']
            if target_id and target_name and html.escape(target_name) in description_text:
                target_name_in_desc_link = get_user_mention_html(target_id, target_name, None) # username=None
                description_text = description_text.replace(html.escape(target_name), target_name_in_desc_link)

            action_type_display = html.escape(log_entry['action_type'].replace("_", " ").title())
            log_line_start = f"<pre>[{ts_formatted}]</pre> {action_type_display}"
            if log_entry['actor_user_id']:
                log_line_start += f" (–∏–Ω–∏—Ü: {actor_display_link})"
            response_lines.append(f"{log_line_start}: {description_text}")

        await message.reply("\n".join(response_lines), parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ª–æ–≥–∞ —Å–µ–º—å–∏.")
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /familylog (–∑–∞–ø—Ä–æ—Å–∏–ª {user_link}): <pre>{html.escape(str(e))}</pre>")


def setup_families_handlers(main_dp: Router):
    main_dp.include_router(families_router)
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å–µ–º–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")