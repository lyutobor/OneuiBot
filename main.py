# main.py
import os
import random
import asyncio
import html
from datetime import datetime, timedelta, date as DDate, timezone as dt_timezone
from typing import Optional, List, Dict, Any, Tuple

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, Chat, User as AiogramUser # AiogramUser –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–∂–µ–Ω –¥–ª—è resolve_target_user
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è FSM
from phone_data import PHONE_MODELS as PHONE_MODELS_STANDARD_LIST_FOR_MAIN
from exclusive_phone_data import EXCLUSIVE_PHONE_MODELS as EXCLUSIVE_PHONE_MODELS_LIST_FOR_MAIN
from business_data import BUSINESS_DATA # –î–æ–±–∞–≤–ª–µ–Ω–æ
from business_logic import setup_business_handlers, process_daily_business_income_and_events # –î–æ–±–∞–≤–ª–µ–Ω–æ
from stats_logic import setup_stats_handlers
from achievements_logic import check_and_grant_achievements, setup_achievements_handlers
from commands_data import COMMAND_CATEGORIES
from robbank_logic import setup_robbank_handlers
from dotenv import load_dotenv
from pytz import timezone as pytz_timezone # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ pytz —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install pytz
import logging
from phrases import ONEUI_BLOCKED_PHRASES
from daily_onecoin_logic import setup_daily_onecoin_handlers

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.date import DateTrigger
from black_market_logic import setup_black_market_handlers, refresh_black_market_offers

from config import Config
import database # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å database —Ü–µ–ª–∏–∫–æ–º
# –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ –∏ —ç—Ç–æ —É–ª—É—á—à–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
from database import (
    init_db,
    get_user_version, update_user_version, check_cooldown,
    get_top_users_in_chat, get_global_top_users, get_user_top_versions, get_user_version_history,
    get_user_family_membership, # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–∞—Ö —Å–µ–º–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–¥–µ—Å—å
    # FAMILY_CREATION_MIN_VERSION, # –õ—É—á—à–µ –±—Ä–∞—Ç—å –∏–∑ Config –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞
    get_user_onecoins, update_user_onecoins,
    get_top_onecoins_in_chat, get_global_top_onecoins,
    get_setting_timestamp, set_setting_timestamp,
    get_user_bonus_multiplier_status, update_user_bonus_multiplier_status,
    get_user_daily_streak, update_user_daily_streak,
    # –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø –®–ï–î–£–õ–ï–†–ê –¢–ï–õ–ï–§–û–ù–û–í
    get_all_operational_phones, get_phones_for_battery_check, update_phone_status_fields,
    get_phones_with_expiring_insurance,
    get_user_chat_lock
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from utils import get_user_mention_html, send_telegram_log
    from item_data import PHONE_CASES, CORE_PHONE_COMPONENT_TYPES, PHONE_COMPONENTS
    from phone_data import PHONE_MODELS as PHONE_MODELS_LIST_MAIN


except ImportError:
    logging.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ utils.py! –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∏.")
    # –ó–∞–≥–ª—É—à–∫–∏, –µ—Å–ª–∏ utils.py –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤ –Ω–µ–º –æ—à–∏–±–∫–∞
    def get_user_mention_html(user_id: int, full_name: Optional[str], username: Optional[str] = None) -> str:
        display_name = html.escape(full_name or f"User ID {user_id}")
        if username: return f'<a href="https://t.me/{html.escape(username)}">{display_name}</a>'
        return f'<a href="tg://user?id={user_id}">{display_name}</a>'
    async def send_telegram_log(bot_instance: Bot, message_text: str, include_timestamp: bool = True): # type: ignore
        logging.error(f"–§—É–Ω–∫—Ü–∏—è send_telegram_log –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞). –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")

from item_data import PHONE_CASES, CORE_PHONE_COMPONENT_TYPES
from families_logic import setup_families_handlers
from onecoin_logic import setup_onecoin_handlers
from competition_logic import setup_competition_handlers
from bonus_logic import setup_bonus_handlers
from roulette_logic import setup_roulette_handlers
from market_logic import setup_market_handlers # <<< –ò–ú–ü–û–†–¢ –î–õ–Ø –†–´–ù–ö–ê
from phone_logic import setup_phone_handlers, get_active_user_phone_bonuses 

PHONE_MODELS_MAIN = {phone_info["key"]: phone_info for phone_info in PHONE_MODELS_LIST_MAIN}
load_dotenv()
EXCLUSIVE_PHONE_MODELS_DICT = {p["key"]: p for p in EXCLUSIVE_PHONE_MODELS_LIST_FOR_MAIN}

logging.basicConfig(
    level=logging.INFO, # –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å INFO
    format='%(asctime)s - %(levelname)s - %(name)s - %(filename)s:%(lineno)d - %(message)s'
)
logger = logging.getLogger(__name__)
logging.getLogger('apscheduler').setLevel(logging.DEBUG)

if not Config.BOT_TOKEN:
    logger.critical("BOT_TOKEN environment variable not set.")
    raise ValueError("BOT_TOKEN environment variable not set.")

bot = Bot(token=Config.BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage() # –î–ª—è FSM
dp = Dispatcher(storage=storage)
scheduler = AsyncIOScheduler(timezone=Config.TIMEZONE if Config.TIMEZONE else "UTC")

# --- –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∫–æ–º–∞–Ω–¥ ---
user_command_locks: Dict[Tuple[int, int], asyncio.Lock] = {}
locks_dict_creation_lock = asyncio.Lock()


# --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ ---

# –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è /oneui
try:
    from responses import POSITIVE_RESPONSES, NEGATIVE_RESPONSES, POS_MICRO_CHANGES, NEG_MICRO_CHANGES, ONEUI_COOLDOWN_RESPONSES, ONEUI_STREAK_INFO_DURING_COOLDOWN, ONEUI_STREAK_INFO_DURING_COOLDOWN
except ImportError:
    POSITIVE_RESPONSES = ["–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –¢–≤–æ—è –≤–µ—Ä—Å–∏—è OneUI —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –Ω–∞ %.1f!", "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ %.1f —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"]
    NEGATIVE_RESPONSES = ["–û –Ω–µ—Ç! –ü—Ä–æ–∏–∑–æ—à–µ–ª –æ—Ç–∫–∞—Ç –≤–µ—Ä—Å–∏–∏ OneUI –Ω–∞ %.1f.", "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–µ—Ä—Å–∏—è —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –Ω–∞ %.1f."]
    ONEUI_STREAK_INFO_DURING_COOLDOWN = ["üî• –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: <b>{streak_days}</b> –¥. (–æ–Ω –Ω–µ —Å–±—Ä–æ—Å–∏—Ç—Å—è, –µ—Å–ª–∏ –≤–µ—Ä–Ω–µ—à—å—Å—è –≤–æ–≤—Ä–µ–º—è)."] # <-- –í–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞
    #POS_MICRO_CHANGES: List[float] = [0.1, 0.2, 0.3, 0.4, 0.5]
    #NEG_MICRO_CHANGES: List[float] = [-0.1, -0.2, -0.3, -0.4, -0.5]
    logging.warning("–§–∞–π–ª responses.py –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")


# === –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ó–ê–î–ê–ß–ò (–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ñ–∞–π–ª–∞) ===
async def daily_competition_score_update():
    logger.info("Starting daily competition score update job.")
    try:
        active_comp = await database.get_active_family_competition()
        if not active_comp:
            logger.info("No active family competition. Skipping score update.")
            return
        competition_id = active_comp['competition_id']
        today_date_local = datetime.now(pytz_timezone(Config.TIMEZONE)).date()
        logger.info(f"Processing contributions for competition ID {competition_id} for date {today_date_local}")
        all_families = await database.get_all_families_with_active_members()
        if not all_families:
            logger.info("No families with active members found for competition scoring.")
            return
        conn = await database.get_connection()
        try:
            async with conn.transaction():
                for family_data in all_families:
                    family_id = family_data['family_id']
                    family_name = family_data['name']
                    for user_id_member in family_data['member_ids']:
                        max_version = await database.get_user_max_oneui_for_day_in_competition(user_id_member, today_date_local)
                        if max_version is not None and max_version > 0:
                            await database.record_family_daily_contribution(
                                competition_id, family_id, user_id_member, today_date_local, max_version, conn_ext=conn
                            )
                            logger.info(f"User {user_id_member} (Family '{family_name}') contributed {max_version:.1f} for competition {competition_id} on {today_date_local}")
                await database.calculate_and_set_family_competition_total_scores(competition_id, conn_ext=conn)
                logger.info(f"Total scores recalculated for competition ID {competition_id}")
        finally:
            if conn and not conn.is_closed():
                await conn.close()
    except Exception as e:
        logger.error(f"Error in daily_competition_score_update: {e}", exc_info=True)
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—á–∫–æ–≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:\n<pre>{html.escape(str(e))}</pre>")
    logger.info("Finished daily competition score update job.")

async def start_new_competition_after_delay(admin_id: int, delay_seconds: int):
    await asyncio.sleep(delay_seconds)
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ {delay_seconds} —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è.")
    try:
        active_comp_check = await database.get_active_family_competition()
        if active_comp_check:
            logger.info(f"–ù–æ–≤–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ: ID {active_comp_check['competition_id']}")
            return
        new_competition_id = await database.create_family_competition(admin_id, Config.COMPETITION_DURATION_DAYS)
        if new_competition_id:
            logger.info(f"–ù–æ–≤–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —Å–µ–º–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! ID: {new_competition_id}")
            comp_details_row = None
            conn_temp = await database.get_connection()
            try:
                 comp_details_row_raw = await conn_temp.fetchrow("SELECT * FROM family_competitions WHERE competition_id = $1", new_competition_id)
                 if comp_details_row_raw: comp_details_row = dict(comp_details_row_raw)
            finally:
                 if conn_temp and not conn_temp.is_closed(): await conn_temp.close()

            announcement_text = f"üèÜ –ó–∞–ø—É—â–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —Å–µ–º–µ–π! ID: <code>{new_competition_id}</code>."
            if comp_details_row and comp_details_row.get('start_ts') and comp_details_row.get('end_ts'):
                start_ts_obj = comp_details_row['start_ts']
                end_ts_obj = comp_details_row['end_ts']
                start_ts_aware = start_ts_obj.replace(tzinfo=dt_timezone.utc) if start_ts_obj.tzinfo is None else start_ts_obj.astimezone(dt_timezone.utc)
                end_ts_aware = end_ts_obj.replace(tzinfo=dt_timezone.utc) if end_ts_obj.tzinfo is None else end_ts_obj.astimezone(dt_timezone.utc)
                start_local = start_ts_aware.astimezone(pytz_timezone(Config.TIMEZONE))
                end_local = end_ts_aware.astimezone(pytz_timezone(Config.TIMEZONE))
                announcement_text += (
                    f"\n–ù–∞—á–∞–ª–æ: {start_local.strftime('%Y-%m-%d %H:%M:%S %Z')}"
                    f"\n–û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_local.strftime('%Y-%m-%d %H:%M:%S %Z')}"
                )
            await send_telegram_log(bot, f"üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è ID: {new_competition_id}. {announcement_text}")
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.")
            await send_telegram_log(bot, "üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ.")
    except Exception as e:
        logger.error(f"Error in start_new_competition_after_delay: {e}", exc_info=True)
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∞–≤—Ç–æ-–∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:\n<pre>{html.escape(str(e))}</pre>")

async def check_and_finalize_competitions():
    logger.info("Checking for competitions to finalize.")
    try:
        pending_competitions = await database.get_competitions_to_finalize()
        if not pending_competitions: return
        logger.info(f"Found {len(pending_competitions)} competitions to finalize.")
        should_schedule_new_competition = False
        for comp_data in pending_competitions:
            competition_id = comp_data['competition_id']
            logger.info(f"Finalizing competition ID {competition_id}...")
            await database.calculate_and_set_family_competition_total_scores(competition_id)
            leaderboard = await database.get_competition_leaderboard(competition_id, limit=1)
            winner_family_id = None
            winner_family_name = "–Ω–µ—Ç"
            if leaderboard and leaderboard[0]['total_score'] > 0:
                winner_entry = leaderboard[0]
                winner_family_id = winner_entry['family_id']
                winner_family_name = html.escape(winner_entry['family_name'])
                logger.info(f"Competition {competition_id} winner is family '{winner_family_name}' (ID: {winner_family_id}) with score {winner_entry['total_score']:.1f}")
                winner_members_data = await database.get_family_members(winner_family_id) if winner_family_id else []
                if winner_members_data:
                    logger.info(f"Awarding {len(winner_members_data)} members of family '{winner_family_name}'.")
                    conn_reward = await database.get_connection()
                    try:
                        async with conn_reward.transaction():
                            for member in winner_members_data:
                                user_id_member = member['user_id']
                                current_user_data = await database.get_user_data_for_update(user_id_member, Config.ADMIN_ID, conn_ext=conn_reward) # Chat_id –∑–∞–≥–ª—É—à–∫–∞
                                final_full_name_for_reward = current_user_data.get('full_name') or member.get('full_name_when_joined') or f"User ID {user_id_member}"
                                final_username_for_reward = current_user_data.get('username') or member.get('username')
                                user_chat_records = await database.get_user_chat_records(user_id_member, conn_ext=conn_reward)
                                reward_chat_id_to_use: Optional[int] = user_id_member
                                if user_chat_records:
                                    user_chat_records.sort(key=lambda x: x.get('last_used', datetime.min.replace(tzinfo=dt_timezone.utc)), reverse=True)
                                    reward_chat_id_to_use = user_chat_records[0]['chat_id']
                                else:
                                     logger.warning(f"User {user_id_member} has no chat records. Awarding to private chat ID {reward_chat_id_to_use}.")

                                current_user_version = await database.get_user_version(user_id_member, reward_chat_id_to_use)
                                new_version = current_user_version + Config.COMPETITION_WINNER_VERSION_BONUS
                                await database.update_user_version(
                                    user_id_member, reward_chat_id_to_use, new_version,
                                    username=final_username_for_reward, full_name=final_full_name_for_reward,
                                    chat_title=f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ {competition_id}", conn_ext=conn_reward
                                )
                                await database.update_user_onecoins(
                                    user_id_member, reward_chat_id_to_use, Config.COMPETITION_WINNER_ONECOIN_BONUS,
                                    username=final_username_for_reward, full_name=final_full_name_for_reward,
                                    chat_title=f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ {competition_id}", conn_ext=conn_reward
                                )
                                logger.info(f"Rewarded user {user_id_member} (Family '{winner_family_name}') with {Config.COMPETITION_WINNER_VERSION_BONUS:.1f}V and {Config.COMPETITION_WINNER_ONECOIN_BONUS}C in chat {reward_chat_id_to_use}.")
                    except Exception as e_reward:
                        logger.error(f"Error during reward transaction for comp {competition_id}, family {winner_family_id}: {e_reward}", exc_info=True)
                    finally:
                        if conn_reward and not conn_reward.is_closed(): await conn_reward.close()
                else:
                    logger.warning(f"Competition {competition_id} winner family '{winner_family_name}' (ID: {winner_family_id}) has no members.")
            else:
                logger.info(f"Competition {competition_id} finished with no clear winner.")

            await database.set_competition_winner_and_finish_status(competition_id, winner_family_id)
            await database.mark_competition_rewards_distributed(competition_id)
            comp_end_ts = comp_data.get('end_ts')
            comp_end_local_str = comp_end_ts.astimezone(pytz_timezone(Config.TIMEZONE)).strftime('%Y-%m-%d %H:%M:%S %Z') if comp_end_ts and isinstance(comp_end_ts, datetime) else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            announcement_message = f"üèÅ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ ID <code>{competition_id}</code> –∑–∞–≤–µ—Ä—à–µ–Ω–æ {comp_end_local_str}!\n"
            announcement_message += f"üéâ –ü–æ–±–µ–¥–∏–ª–∞ —Å–µ–º—å—è <b>{winner_family_name}</b>!" if winner_family_id else "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω."
            await send_telegram_log(bot, announcement_message)
            should_schedule_new_competition = True
        if should_schedule_new_competition:
            active_comp_after_finalize = await database.get_active_family_competition()
            if not active_comp_after_finalize:
                logger.info(f"–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ {Config.COMPETITION_RESTART_DELAY_SECONDS} —Å–µ–∫. ADMIN_ID: {Config.ADMIN_ID}")
                asyncio.create_task(start_new_competition_after_delay(Config.ADMIN_ID, Config.COMPETITION_RESTART_DELAY_SECONDS))
            else:
                logger.info(f"–ù–æ–≤–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ, –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ ID: {active_comp_after_finalize['competition_id']}.")
    except Exception as e_main_check:
        logger.error(f"Critical error in check_and_finalize_competitions: {e_main_check}", exc_info=True)
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π:\n<pre>{html.escape(str(e_main_check))}</pre>")
        
async def scheduled_check_expired_phone_prizes(bot_instance: Bot):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–µ—à–µ–Ω–∏—è.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–∞–µ—Ç –∏—Ö –±–æ—Ç—É.
    """
    logger.info("SCHEDULER: –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤...")
    expiry_time_td = timedelta(seconds=getattr(Config, "MARKET_PHONE_CONFIRMATION_TIMEOUT_SECONDS", 60)) # –¢–æ—Ç –∂–µ —Ç–∞–π–º–∞—É—Ç

    conn = None
    try:
        conn = await database.get_connection() # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        expired_prizes = await database.get_expired_pending_phone_prizes(expiry_time_td, conn_ext=conn)

        if not expired_prizes:
            logger.info("SCHEDULER (Expired Prizes): –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return

        logger.info(f"SCHEDULER (Expired Prizes): –ù–∞–π–¥–µ–Ω–æ {len(expired_prizes)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤.")

        async with conn.transaction(): # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –≤ –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            for prize_data in expired_prizes:
                user_id = prize_data['user_id']
                logger.info(f"SCHEDULER (Expired Prizes): –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–∑–∞ –¥–ª—è user {user_id}.")
                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–¥–∞–∂–∏ –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                try:
                    await _auto_sell_expired_prize(user_id, bot_instance, conn_ext=conn)
                except Exception as e_auto_sell:
                    logger.error(f"SCHEDULER (Expired Prizes): –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–µ –ø—Ä–∏–∑–∞ –¥–ª—è user {user_id}: {e_auto_sell}", exc_info=True)
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–∑–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö —Ç–æ–π –∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏


        logger.info(f"SCHEDULER (Expired Prizes): –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤.")

    except Exception as e_main_scheduler:
        logger.error(f"SCHEDULER (Expired Prizes): –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤: {e_main_scheduler}", exc_info=True)
        await send_telegram_log(bot_instance, f"üî¥ SCHEDULER: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤:\n<pre>{html.escape(str(e_main_scheduler))}</pre>")
    finally:
        if conn and not conn.is_closed():
            await conn.close()        
        

async def global_roulette_period_reset_task():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä—É–ª–µ—Ç–∫–∏."""
    current_time_utc = datetime.now(dt_timezone.utc)
    setting_key_roulette_reset = 'last_global_roulette_period_reset' # –ö–ª—é—á –¥–ª—è system_settings

    await database.set_setting_timestamp(setting_key_roulette_reset, current_time_utc)

    local_tz = pytz_timezone(Config.TIMEZONE)
    current_time_local_str = current_time_utc.astimezone(local_tz).strftime('%Y-%m-%d %H:%M:%S %Z')
    logger.info(f"Global roulette usage period reset at {current_time_local_str}.")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∞–ª–∏–∞—Å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Ä—É–ª–µ—Ç–∫–∏ –≤ –ª–æ–≥–µ
    roulette_cmd_alias = Config.ROULETTE_COMMAND_ALIASES[0] if Config.ROULETTE_COMMAND_ALIASES else 'roulette'
    await send_telegram_log(bot,
        f"üîÑ –ü–µ—Ä–∏–æ–¥ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã "
        f"<code>/{roulette_cmd_alias}</code> "
        f"–≥–ª–æ–±–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω ({current_time_local_str})."
    )

async def global_bonus_multiplier_reset_task():
    current_time_utc = datetime.now(dt_timezone.utc)
    local_tz = pytz_timezone(Config.TIMEZONE)
    await database.set_setting_timestamp('last_global_bonus_multiplier_reset', current_time_utc)
    current_time_local_str = current_time_utc.astimezone(local_tz).strftime('%Y-%m-%d %H:%M:%S %Z')
    logger.info(f"Global bonus multiplier claim period reset at {current_time_local_str}.")
    await send_telegram_log(bot, f"üîÑ –ü–µ—Ä–∏–æ–¥ –¥–ª—è /bonus –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö ({current_time_local_str}).")

async def daily_reset_roulette_attempts():
    logger.info("–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –¥–æ–ø. –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç —Ä—É–ª–µ—Ç–∫–∏ (–¥–ª—è /bonus, /oneui).")
    conn = None
    try:
        conn = await database.get_connection()
        result = await conn.execute(
            "UPDATE roulette_status SET extra_bonus_attempts = 0, extra_oneui_attempts = 0 "
            "WHERE extra_bonus_attempts > 0 OR extra_oneui_attempts > 0"
        )
        if result and "UPDATE 0" not in result.upper():
            logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –¥–æ–ø. –ø–æ–ø—ã—Ç–æ–∫ —Ä—É–ª–µ—Ç–∫–∏ (–¥–ª—è /bonus, /oneui) –≤—ã–ø–æ–ª–Ω–µ–Ω. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ: {result}")
            await send_telegram_log(bot, "üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –¥–æ–ø. –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç —Ä—É–ª–µ—Ç–∫–∏ (/bonus, /oneui) –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        else:
            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –¥–æ–ø. –ø–æ–ø—ã—Ç–æ–∫ —Ä—É–ª–µ—Ç–∫–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ daily_reset_roulette_attempts: {e}", exc_info=True)
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–æ–ø. –ø–æ–ø—ã—Ç–æ–∫ —Ä—É–ª–µ—Ç–∫–∏: <pre>{html.escape(str(e))}</pre>")
    finally:
        if conn and not conn.is_closed(): await conn.close()
    logger.debug("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–±—Ä–æ—Å–∞ –¥–æ–ø. –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç —Ä—É–ª–µ—Ç–∫–∏.")
# === –ö–æ–Ω–µ—Ü –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á ===

async def scheduled_check_phone_breakdowns(bot_instance: Bot): # –ó–∞–º–µ–Ω–∏ Bot –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–∏–ø —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
    """
    –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–ª–æ–º–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å —É—á–µ—Ç–æ–º
    –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥—ã, –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏ –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
    """
    logger.info("SCHEDULER: –ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–æ–º–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–¥–∞–Ω—ã –∏ –Ω–µ —Å–ª–æ–º–∞–Ω—ã (is_sold=False, is_broken=False)
        operational_phones = await database.get_all_operational_phones() 
        if not operational_phones:
            logger.info("SCHEDULER (Breakdowns): –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return

        phones_broken_count = 0
        for phone_data in operational_phones:
            phone_id = phone_data['phone_inventory_id']
            user_id_owner = phone_data['user_id']
            phone_model_key = phone_data.get('phone_model_key')
            
            # --- –ü–û–õ–£–ß–ê–ï–ú –§–õ–ê–ì –ö–û–ù–¢–†–ê–ë–ê–ù–î–´ –ò –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï ---
            is_contraband_phone = phone_data.get('is_contraband', False)
            # phone_custom_data —ç—Ç–æ JSONB –ø–æ–ª–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_phones, –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            phone_custom_data = phone_data.get('data', {}) 
            # --- –ö–û–ù–ï–¶ –ü–û–õ–£–ß–ï–ù–ò–Ø –§–õ–ê–ì–ê –ò –î–ê–ù–ù–´–• ---

            if not phone_model_key:
                logger.warning(f"SCHEDULER (Breakdowns): –£ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ID {phone_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç phone_model_key. –ü—Ä–æ–ø—É—Å–∫.")
                continue

            # --- –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–ß–ï–°–ö–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ú–û–î–ï–õ–ò –¢–ï–õ–ï–§–û–ù–ê ---
            phone_static_info = PHONE_MODELS_MAIN.get(phone_model_key)
            # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ, –∏—â–µ–º –≤ —Å–ª–æ–≤–∞—Ä–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            if not phone_static_info and phone_model_key in EXCLUSIVE_PHONE_MODELS_DICT:
                phone_static_info = EXCLUSIVE_PHONE_MODELS_DICT.get(phone_model_key)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ª–æ–≥–æ–≤
            phone_name_for_msg = phone_static_info.get('name', f"–¢–µ–ª–µ—Ñ–æ–Ω (–∫–ª—é—á: {phone_model_key})") if phone_static_info else f"–¢–µ–ª–µ—Ñ–æ–Ω (–∫–ª—é—á: {phone_model_key})"
            # --- –ö–û–ù–ï–¶ –ü–û–õ–£–ß–ï–ù–ò–Ø –°–¢–ê–¢–ò–ß–ï–°–ö–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò ---

            # --- –†–ê–°–ß–ï–¢ –®–ê–ù–°–ê –ü–û–õ–û–ú–ö–ò ---
            # 1. –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å (—Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ)
            base_break_chance = random.randint(5, 20) # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 5% –¥–æ 20%
            original_base_chance_for_log = base_break_chance # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

            # 2. –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —à–∞–Ω—Å–∞ (–∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∞, –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã)
            final_chance_multiplier = 1.0 # –ù–∞—á–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
            log_breakdown_factors = [] # –°–ø–∏—Å–æ–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤

            # –∞) –£—á–µ—Ç –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥—ã
            if is_contraband_phone:
                # CONTRABAND_BREAK_CHANCE_MULTIPLIER –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ Config, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5 –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —à–∞–Ω—Å–∞ –Ω–∞ 50%
                contraband_mult = getattr(Config, "CONTRABAND_BREAK_CHANCE_MULTIPLIER", 1.5) 
                final_chance_multiplier *= contraband_mult
                log_breakdown_factors.append(f"–∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∞ x{contraband_mult:.1f}")

            # –±) –£—á–µ—Ç "increased_break_chance_factor" –∏–∑ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∫—Ä–∞–¥–µ–Ω—ã—Ö –∏–ª–∏ –æ—Å–æ–±—ã—Ö —ç–∫—Å–∫–ª—é–∑–∏–≤–æ–≤)
            # –≠—Ç–æ—Ç —Ñ–∞–∫—Ç–æ—Ä –£–í–ï–õ–ò–ß–ò–í–ê–ï–¢ —à–∞–Ω—Å –ø–æ–ª–æ–º–∫–∏.
            if phone_custom_data and isinstance(phone_custom_data.get("increased_break_chance_factor"), (int, float)):
                custom_mult = float(phone_custom_data["increased_break_chance_factor"])
                if custom_mult > 0: # –ü—Ä–∏–º–µ–Ω—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π (–æ–±—ã—á–Ω–æ > 1.0 –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è)
                    final_chance_multiplier *= custom_mult
                    log_breakdown_factors.append(f"–æ—Å–æ–±—ã–π x{custom_mult:.1f}")
            
            # –≤) –£—á–µ—Ç "intrinsic_wear_resistance_factor" –∏–∑ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø—Ä–æ—á–Ω—ã—Ö —ç–∫—Å–∫–ª—é–∑–∏–≤–æ–≤)
            # –≠—Ç–æ—Ç —Ñ–∞–∫—Ç–æ—Ä –ò–ó–ú–ï–ù–Ø–ï–¢ (–æ–±—ã—á–Ω–æ —É–º–µ–Ω—å—à–∞–µ—Ç, –µ—Å–ª–∏ < 1.0) –∏—Ç–æ–≥–æ–≤—ã–π —à–∞–Ω—Å.
            if phone_custom_data and isinstance(phone_custom_data.get("intrinsic_wear_resistance_factor"), (int, float)):
                resistance_mult = float(phone_custom_data["intrinsic_wear_resistance_factor"])
                if resistance_mult > 0: # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º
                                        # –ï—Å–ª–∏ resistance_mult < 1.0, —à–∞–Ω—Å –£–ú–ï–ù–¨–®–ò–¢–°–Ø (—Ç–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ—á–Ω–µ–µ)
                                        # –ï—Å–ª–∏ resistance_mult > 1.0, —à–∞–Ω—Å –£–í–ï–õ–ò–ß–ò–¢–°–Ø (—Ç–µ–ª–µ—Ñ–æ–Ω —Ö—Ä—É–ø—á–µ –ø–æ —ç—Ç–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É)
                    final_chance_multiplier *= resistance_mult 
                    log_breakdown_factors.append(f"—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ x{resistance_mult:.2f}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –æ–±—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫ –±–∞–∑–æ–≤–æ–º—É —à–∞–Ω—Å—É
            if final_chance_multiplier != 1.0:
                base_break_chance = int(round(base_break_chance * final_chance_multiplier))
                logger.debug(f"Phone ID {phone_id} (model: {phone_model_key}). BaseBreak: {original_base_chance_for_log}% -> ModifiedBase: {base_break_chance}% (Factors: {', '.join(log_breakdown_factors)})")
            
            # 3. –£–º–µ–Ω—å—à–µ–Ω–∏–µ —à–∞–Ω—Å–∞ –ø–æ–ª–æ–º–∫–∏ –∑–∞ —Å—á–µ—Ç —á–µ—Ö–ª–∞
            break_reduction_percent = 0 # –ü—Ä–æ—Ü–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —á–µ—Ö–æ–ª —É–º–µ–Ω—å—à–∞–µ—Ç —à–∞–Ω—Å –ø–æ–ª–æ–º–∫–∏
            equipped_case_key = phone_data.get('equipped_case_key')
            if equipped_case_key and equipped_case_key in PHONE_CASES:
                break_reduction_percent = PHONE_CASES[equipped_case_key].get('break_chance_reduction_percent', 0)

            # –ò—Ç–æ–≥–æ–≤—ã–π —à–∞–Ω—Å –ø–æ–ª–æ–º–∫–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –∏ —á–µ—Ö–ª–∞
            # –í–∞–∂–Ω–æ: base_break_chance –∑–¥–µ—Å—å —É–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏
            final_break_chance = base_break_chance - break_reduction_percent
            
            # –®–∞–Ω—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
            if final_break_chance < 0: 
                final_break_chance = 0
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–Ω—Å –ø–æ–ª–æ–º–∫–∏ (–µ—Å–ª–∏ —à–∞–Ω—Å –≤–æ–æ–±—â–µ –µ—Å—Ç—å, –æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –º–∞–ª)
            min_active_break_chance = 1 # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —à–∞–Ω—Å –ø–æ–ª–æ–º–∫–∏ > 0, –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1%
            if final_break_chance > 0 and final_break_chance < min_active_break_chance:
                final_break_chance = min_active_break_chance

            logger.debug(f"Phone ID {phone_id}: FinalBreakChance={final_break_chance}% (InitialBase: {original_base_chance_for_log}%, MultipliedBase: {base_break_chance}%, CaseReduction: {break_reduction_percent}%)")
            # --- –ö–û–ù–ï–¶ –†–ê–°–ß–ï–¢–ê –®–ê–ù–°–ê –ü–û–õ–û–ú–ö–ò ---

            # --- –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–û–õ–û–ú–ö–£ –ò –û–ë–†–ê–ë–û–¢–ö–ê ---
            # "–ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫": –µ—Å–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∏—Ç–æ–≥–æ–≤–æ–º—É —à–∞–Ω—Å—É, —Ç–µ–ª–µ—Ñ–æ–Ω –ª–æ–º–∞–µ—Ç—Å—è
            if final_break_chance > 0 and random.randint(1, 100) <= final_break_chance:
                
                # –∞) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–∫–ª—é–∑–∏–≤–æ–≤
                # –ï—Å–ª–∏ —É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ data –µ—Å—Ç—å —Ñ–ª–∞–≥ "components_are_indestructible_standard_wear": true,
                # —Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–ª–æ–º–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.
                if phone_custom_data and phone_custom_data.get("components_are_indestructible_standard_wear") is True:
                    logger.info(f"Phone ID {phone_id} (–º–æ–¥–µ–ª—å: {phone_model_key}) –∏–º–µ–µ—Ç –Ω–µ—É—è–∑–≤–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∏–∑–Ω–æ—Å–∞. –ü—Ä–æ–ø—É—Å–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø–æ–ª–æ–º–∫–∏.")
                    continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É

                # –±) –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª–æ–º–∫–∏
                if not CORE_PHONE_COMPONENT_TYPES:
                    logger.error("SCHEDULER (Breakdowns): CORE_PHONE_COMPONENT_TYPES –ø—É—Å—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–æ–ª–æ–º–∫–∏.")
                    continue

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ª–æ–º–∞—Ç—å—Å—è (A, S, Z –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è A –¥–ª—è –¥—Ä—É–≥–∏—Ö)
                phone_series_for_component = "A" # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å–µ—Ä–∏—è
                if phone_static_info and phone_static_info.get('series') in ['A', 'S', 'Z']:
                    phone_series_for_component = phone_static_info.get('series')
                elif phone_static_info and phone_static_info.get('series') not in ['A', 'S', 'Z']:
                    # –î–ª—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö —Å–µ—Ä–∏–π (X, L –∏ —Ç.–¥.) –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã A-—Å–µ—Ä–∏–∏.
                    # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —ç—Ç–æ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å.
                    logger.warning(f"SCHEDULER (Breakdowns): –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω {phone_model_key} (—Å–µ—Ä–∏—è: {phone_static_info.get('series')}) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã A-—Å–µ—Ä–∏–∏ –¥–ª—è –ø–æ–ª–æ–º–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª–æ–º–∫–∏
                possible_broken_component_keys = [
                    f"{comp_type.upper()}_{phone_series_for_component}" for comp_type in CORE_PHONE_COMPONENT_TYPES
                ]
                chosen_component_key_to_break = random.choice(possible_broken_component_keys)

                if chosen_component_key_to_break not in PHONE_COMPONENTS:
                    logger.error(f"SCHEDULER (Breakdowns): –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ '{chosen_component_key_to_break}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PHONE_COMPONENTS. –ü–æ–ª–æ–º–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ID {phone_id}.")
                    continue

                # –≤) –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                update_success = await database.update_phone_status_fields(
                    phone_id,
                    {'is_broken': True, 'broken_component_key': chosen_component_key_to_break}
                )
                
                # –≥) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if update_success:
                    phones_broken_count += 1
                    logger.info(f"SCHEDULER (Breakdowns): –¢–µ–ª–µ—Ñ–æ–Ω ID {phone_id} (–≤–ª–∞–¥–µ–ª–µ—Ü: {user_id_owner}, –º–æ–¥–µ–ª—å: {phone_name_for_msg}) —Å–ª–æ–º–∞–ª—Å—è! –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {chosen_component_key_to_break}")
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        user_info_for_log = await database.get_user_data_for_update(user_id_owner, phone_data.get('chat_id_acquired_in', user_id_owner))
                        owner_full_name = user_info_for_log.get('full_name') if user_info_for_log else f"–í–ª–∞–¥–µ–ª–µ—Ü ID {user_id_owner}"
                        # owner_username = user_info_for_log.get('username') if user_info_for_log else None
                        # user_mention_owner = get_user_mention_html(user_id_owner, owner_full_name, owner_username) # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ç–µ–≥–∞—Ç—å
                        
                        broken_comp_name_msg = PHONE_COMPONENTS[chosen_component_key_to_break].get('name', chosen_component_key_to_break)
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª–æ–º–∫–µ
                        breakdown_message = (
                            f"üîß –û–π! –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω \"<b>{html.escape(phone_name_for_msg)}</b>\" (ID: {phone_id}) —Å–ª–æ–º–∞–ª—Å—è! "
                            f"–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: <b>{html.escape(broken_comp_name_msg)}</b>.\n"
                        )
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–µ, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ
                        if is_contraband_phone:
                            breakdown_message += "<i>(ü•∑ –ö–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–Ω—ã–π —Ç–æ–≤–∞—Ä, –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ –ø–æ–ª–æ–º–∫–∏!)</i>\n"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–æ–±–æ–π —Ö—Ä—É–ø–∫–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–∫—Ç–æ—Ä –∏ –æ–Ω –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–æ–π (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–º—ã—Å–ª)
                        if phone_custom_data and isinstance(phone_custom_data.get("increased_break_chance_factor"), (int, float)):
                            custom_factor_val = phone_custom_data["increased_break_chance_factor"]
                            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± "–æ—Å–æ–±–µ–Ω–Ω–æ —Ö—Ä—É–ø–∫–æ–º" –¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–∫—Ç–æ—Ä > 1 –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ù–ï –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–Ω—ã–π
                            if custom_factor_val > 1.0 and not is_contraband_phone: 
                                breakdown_message += "<i>(–≠—Ç–æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –æ–∫–∞–∑–∞–ª—Å—è –æ—Å–æ–±–µ–Ω–Ω–æ —Ö—Ä—É–ø–∫–∏–º!)</i>\n"
                            # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–Ω—ã–π, –∏ –∏–º–µ–µ—Ç —ç—Ç–æ—Ç —Ñ–∞–∫—Ç–æ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–µ —É–∂–µ –µ—Å—Ç—å.
                            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä "–û—Å–æ–±–æ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∞!", –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ (pass –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –∏–¥–µ–µ)
                            # elif custom_factor_val > 1.0 and is_contraband_phone:
                            #     pass 

                        breakdown_message += "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—á–∏–Ω–∏—Ç—å –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /repairphone."

                        await bot_instance.send_message(user_id_owner, breakdown_message, parse_mode="HTML")
                    except Exception as e_notify:
                        logger.warning(f"SCHEDULER (Breakdowns): –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_owner} –æ –ø–æ–ª–æ–º–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ID {phone_id}: {e_notify}")
                else:
                    logger.error(f"SCHEDULER (Breakdowns): –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª–æ–º–∫–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ID {phone_id} –≤ –ë–î.")
            # --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –ù–ê –ü–û–õ–û–ú–ö–£ –ò –û–ë–†–ê–ë–û–¢–ö–ò ---

        logger.info(f"SCHEDULER: –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–æ–º–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ª–æ–º–∞–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {phones_broken_count}.")
        if phones_broken_count > 0:
            await send_telegram_log(bot_instance, f"‚öôÔ∏è –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è '—Ä–∞–∑–¥–∞—á–∞ –ø–æ–ª–æ–º–æ–∫': {phones_broken_count} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å–ª–æ–º–∞–ª–æ—Å—å.")

    except Exception as e:
        logger.error(f"SCHEDULER (Breakdowns): –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await send_telegram_log(bot_instance, f"üî¥ SCHEDULER: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª–æ–º–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:\n<pre>{html.escape(str(e))}</pre>")

async def scheduled_check_phone_battery_status(bot_instance: Bot):
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.
    """
    logger.info("SCHEDULER: –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤.")
    try:
        phones_to_check = await database.get_phones_for_battery_check()
        if not phones_to_check:
            logger.info("SCHEDULER (Battery): –ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤.")
            return

        batteries_broken_count = 0
        now_utc = datetime.now(dt_timezone.utc)

        for phone_data in phones_to_check:
            phone_id = phone_data['phone_inventory_id']
            user_id_owner = phone_data['user_id']
            battery_break_after_utc_val = phone_data.get('battery_break_after_utc')
            phone_model_key = phone_data.get('phone_model_key')

            if not battery_break_after_utc_val or not phone_model_key:
                logger.warning(f"SCHEDULER (Battery): –ü—Ä–æ–ø—É—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ID {phone_id} –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è battery_break_after_utc –∏–ª–∏ phone_model_key.")
                continue

            phone_static_info = PHONE_MODELS_MAIN.get(phone_model_key) # –ò—Å–ø–æ–ª—å–∑—É–µ–º PHONE_MODELS_MAIN
            phone_name_for_msg = phone_static_info.get('name', f"–¢–µ–ª–µ—Ñ–æ–Ω (–∫–ª—é—á: {phone_model_key})") if phone_static_info else f"–¢–µ–ª–µ—Ñ–æ–Ω (–∫–ª—é—á: {phone_model_key})"

            battery_break_after_utc_dt: Optional[datetime] = None
            if isinstance(battery_break_after_utc_val, str):
                try: battery_break_after_utc_dt = datetime.fromisoformat(battery_break_after_utc_val)
                except ValueError: pass
            elif isinstance(battery_break_after_utc_val, datetime):
                battery_break_after_utc_dt = battery_break_after_utc_val

            if not battery_break_after_utc_dt:
                 logger.warning(f"SCHEDULER (Battery): –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç battery_break_after_utc –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ID {phone_id}. –ü—Ä–æ–ø—É—Å–∫.")
                 continue

            if battery_break_after_utc_dt.tzinfo is None:
                battery_break_after_utc_dt = battery_break_after_utc_dt.replace(tzinfo=dt_timezone.utc)
            else:
                battery_break_after_utc_dt = battery_break_after_utc_dt.astimezone(dt_timezone.utc)

            if now_utc >= battery_break_after_utc_dt:
                phone_series = phone_static_info.get('series', 'A') if phone_static_info else 'A'
                if phone_series not in ['A', 'S', 'Z']: phone_series = 'A'

                battery_component_key_to_break = f"BATTERY_{phone_series}"

                if battery_component_key_to_break not in PHONE_COMPONENTS: # PHONE_COMPONENTS –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ item_data
                    logger.error(f"SCHEDULER (Battery): –ö–ª—é—á –±–∞—Ç–∞—Ä–µ–∏ '{battery_component_key_to_break}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PHONE_COMPONENTS –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ID {phone_id}. –ü–æ–ª–æ–º–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞.")
                    continue

                update_success = await database.update_phone_status_fields(
                    phone_id,
                    {'is_broken': True, 'broken_component_key': battery_component_key_to_break}
                )
                if update_success:
                    batteries_broken_count += 1
                    logger.info(f"SCHEDULER (Battery): –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ID {phone_id} (–≤–ª–∞–¥–µ–ª–µ—Ü: {user_id_owner}, –º–æ–¥–µ–ª—å: {phone_name_for_msg}) –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —Å–ª–æ–º–∞–ª—Å—è (–∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {battery_component_key_to_break}).")
                    try:
                        user_info_for_log_batt = await database.get_user_data_for_update(user_id_owner, phone_data.get('chat_id_acquired_in', user_id_owner))
                        owner_full_name_batt = user_info_for_log_batt.get('full_name') if user_info_for_log_batt else f"–í–ª–∞–¥–µ–ª–µ—Ü ID {user_id_owner}"
                        owner_username_batt = user_info_for_log_batt.get('username') if user_info_for_log_batt else None
                        user_mention_owner = get_user_mention_html(user_id_owner, owner_full_name_batt, owner_username_batt)
                        broken_comp_name_msg = PHONE_COMPONENTS[battery_component_key_to_break].get('name', battery_component_key_to_break)
                        await bot_instance.send_message(
                            user_id_owner,
                            f"üîã‚ÄºÔ∏è –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω \"<b>{html.escape(phone_name_for_msg)}</b>\" (ID: {phone_id}) –Ω–µ –±—ã–ª –∑–∞—Ä—è–∂–µ–Ω –≤–æ–≤—Ä–µ–º—è, "
                            f"–∏ –µ–≥–æ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä (<b>{html.escape(broken_comp_name_msg)}</b>) –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ–ª –∏–∑ —Å—Ç—Ä–æ—è!\n"
                            f"–¢–µ–ø–µ—Ä—å –µ–≥–æ –Ω—É–∂–Ω–æ —á–∏–Ω–∏—Ç—å (/repairphone).",
                            parse_mode="HTML"
                        )
                    except Exception as e_notify_battery:
                        logger.warning(f"SCHEDULER (Battery): –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_owner} –æ –ø–æ–ª–æ–º–∫–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ID {phone_id}: {e_notify_battery}")
                else:
                    logger.error(f"SCHEDULER (Battery): –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª–æ–º–∫–∏ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ID {phone_id} –≤ –ë–î.")

        logger.info(f"SCHEDULER: –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ª–æ–º–∞–Ω–æ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤: {batteries_broken_count}.")
        if batteries_broken_count > 0:
            await send_telegram_log(bot_instance, f"üîã –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞—Ç–∞—Ä–µ–π: {batteries_broken_count} –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤ —Å–ª–æ–º–∞–ª–æ—Å—å –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–∞—Ä—è–¥–∫–∏.")

    except Exception as e:
        logger.error(f"SCHEDULER (Battery): –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await send_telegram_log(bot_instance, f"üî¥ SCHEDULER: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤:\n<pre>{html.escape(str(e))}</pre>")

async def scheduled_remind_insurance_expiry(bot_instance: Bot):
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏.
    """
    logger.info("SCHEDULER: –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö —Å—Ç—Ä–∞—Ö–æ–≤–æ–∫.")
    days_to_remind_before = getattr(Config, "PHONE_INSURANCE_REMIND_DAYS_BEFORE", 3)

    try:
        expiring_phones = await database.get_phones_with_expiring_insurance(days_before_expiry=days_to_remind_before)

        if not expiring_phones:
            logger.info("SCHEDULER (Insurance): –ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å –∏—Å—Ç–µ–∫–∞—é—â–µ–π —Å—Ç—Ä–∞—Ö–æ–≤–∫–æ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            return

        reminders_sent_count = 0
        now_utc_aware = datetime.now(dt_timezone.utc)

        for phone_data in expiring_phones:
            phone_id = phone_data['phone_inventory_id']
            user_id_owner = phone_data['user_id']
            insurance_until_utc_val = phone_data.get('insurance_active_until')
            phone_model_key = phone_data.get('phone_model_key')

            if not insurance_until_utc_val or not phone_model_key:
                logger.warning(f"SCHEDULER (Insurance): –ü—Ä–æ–ø—É—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ID {phone_id} (–≤–ª–∞–¥–µ–ª–µ—Ü {user_id_owner}) –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è insurance_active_until –∏–ª–∏ phone_model_key.")
                continue

            phone_static_info = PHONE_MODELS_MAIN.get(phone_model_key) # –ò—Å–ø–æ–ª—å–∑—É–µ–º PHONE_MODELS_MAIN
            phone_name_for_msg = phone_static_info.get('name', f"–¢–µ–ª–µ—Ñ–æ–Ω (–∫–ª—é—á: {phone_model_key})") if phone_static_info else f"–¢–µ–ª–µ—Ñ–æ–Ω (–∫–ª—é—á: {phone_model_key})"

            insurance_until_utc_dt: Optional[datetime] = None
            if isinstance(insurance_until_utc_val, str):
                try: insurance_until_utc_dt = datetime.fromisoformat(insurance_until_utc_val)
                except ValueError: pass
            elif isinstance(insurance_until_utc_val, datetime):
                insurance_until_utc_dt = insurance_until_utc_val

            if not insurance_until_utc_dt:
                 logger.warning(f"SCHEDULER (Insurance): –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç insurance_active_until –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ID {phone_id}. –ü—Ä–æ–ø—É—Å–∫.")
                 continue

            if insurance_until_utc_dt.tzinfo is None:
                insurance_until_utc_dt = insurance_until_utc_dt.replace(tzinfo=dt_timezone.utc)
            else:
                insurance_until_utc_dt = insurance_until_utc_dt.astimezone(dt_timezone.utc)

            expiry_date_local_str = insurance_until_utc_dt.astimezone(pytz_timezone(Config.TIMEZONE)).strftime('%Y-%m-%d')
            reminder_message_text = ""

            if insurance_until_utc_dt < now_utc_aware:
                reminder_message_text = (
                    f"üîî –í–Ω–∏–º–∞–Ω–∏–µ! –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ \"<b>{html.escape(phone_name_for_msg)}</b>\" "
                    f"(ID: {phone_id}) –∏—Å—Ç–µ–∫–ª–∞ {expiry_date_local_str}.\n"
                    f"–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /insurephone."
                )
            else:
                time_left_to_expiry = insurance_until_utc_dt - now_utc_aware
                days_left = time_left_to_expiry.days

                days_str = "–¥–Ω–µ–π" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if days_left == 0: days_str = "—Å–µ–≥–æ–¥–Ω—è"
                elif days_left == 1: days_str = "–¥–µ–Ω—å"
                elif days_left % 10 == 1 and days_left % 100 != 11: days_str = "–¥–µ–Ω—å" # 1, 21, 31...
                elif 2 <= days_left % 10 <= 4 and (days_left % 100 < 10 or days_left % 100 >= 20): days_str = "–¥–Ω—è" # 2-4, 22-24...
                else: days_str = "–¥–Ω–µ–π" # 0, 5-20, 25-30...

                reminder_message_text = (
                    f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ \"<b>{html.escape(phone_name_for_msg)}</b>\" "
                    f"(ID: {phone_id}) –∏—Å—Ç–µ–∫–∞–µ—Ç {expiry_date_local_str} (–ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {days_left} {days_str}).\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /insurephone."
                )

            try:
                await bot_instance.send_message(user_id_owner, reminder_message_text, parse_mode="HTML")
                reminders_sent_count += 1
                logger.info(f"SCHEDULER (Insurance): –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_owner} –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ID {phone_id}.")
            except Exception as e_notify_ins:
                logger.warning(f"SCHEDULER (Insurance): –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_owner} –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ID {phone_id}: {e_notify_ins}")

        logger.info(f"SCHEDULER (Insurance): –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö —Å—Ç—Ä–∞—Ö–æ–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {reminders_sent_count}.")
        if reminders_sent_count > 0:
             await send_telegram_log(bot_instance, f"üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ö–æ–≤–æ–∫: {reminders_sent_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

    except Exception as e:
        logger.error(f"SCHEDULER (Insurance): –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await send_telegram_log(bot_instance, f"üî¥ SCHEDULER: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö —Å—Ç—Ä–∞—Ö–æ–≤–æ–∫:\n<pre>{html.escape(str(e))}</pre>")

async def scheduled_apply_inflation(bot_instance: Bot):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–ª—è—Ü–∏–∏ –∫ —Ü–µ–Ω–∞–º –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö.
    –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    logger.info("SCHEDULER: –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–ª—è—Ü–∏–∏...")
    conn = None # –û–±—ä—è–≤–ª—è–µ–º conn –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ finally
    try:
        conn = await database.get_connection() # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        current_multiplier = await database.get_setting_float(
            Config.INFLATION_SETTING_KEY,
            Config.DEFAULT_INFLATION_MULTIPLIER, # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç
            conn_ext=conn # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        )

        if current_multiplier is None: # –ï—Å–ª–∏ –¥–∞–∂–µ –¥–µ—Ñ–æ–ª—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏)
            # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ init_db –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            # –∏ get_setting_float –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç default_value –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–∞.
            # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–µ–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ get_setting_float –≤–µ—Ä–Ω—É–ª None –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ë–î.
            logger.error("SCHEDULER (Inflation): –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏–Ω—Ñ–ª—è—Ü–∏–∏ –∏–∑ –ë–î. –ò–Ω—Ñ–ª—è—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.")
            if conn and not conn.is_closed(): await conn.close()
            return

        new_multiplier = current_multiplier + Config.INFLATION_INCREASE_RATE
        # –û–∫—Ä—É–≥–ª—è–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å float –∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        new_multiplier = round(new_multiplier, 4) # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 4 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π

        await database.set_setting_float(Config.INFLATION_SETTING_KEY, new_multiplier, conn_ext=conn)

        logger.info(f"SCHEDULER (Inflation): –ò–Ω—Ñ–ª—è—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞. –°—Ç–∞—Ä—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: {current_multiplier:.4f}, –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: {new_multiplier:.4f}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞ –≤ Telegram
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º .2f –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º .0f –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –∫–∞–∫ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
        await send_telegram_log(
            bot_instance,
            f"üìà –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –ø–ª–∞–Ω–æ–≤–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö!\n"
            f"–¢–µ–∫—É—â–∏–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: <b>x{new_multiplier:.2f}</b> "
            f"(–ø—Ä–µ–¥—ã–¥—É—â–∏–π: x{current_multiplier:.2f}, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ {Config.INFLATION_INCREASE_RATE*100:.0f}%)."
        )

    except Exception as e:
        logger.error(f"SCHEDULER (Inflation): –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏: {e}", exc_info=True)
        await send_telegram_log(bot_instance, f"üî¥ SCHEDULER: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏:\n<pre>{html.escape(str(e))}</pre>")
    finally:
        if conn and not conn.is_closed(): # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç–æ
            await conn.close()

# === –ö–û–ù–ï–¶ –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô –î–õ–Ø –®–ï–î–£–õ–ï–†–ê ===

async def on_startup(dispatcher: Dispatcher):
    logger.info("Starting bot startup sequence...")
    await init_db()
    logger.info("Database initialized.")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –±–æ–Ω—É—Å–∞ (—ç—Ç–æ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º)
    bonus_reset_key = 'last_global_bonus_multiplier_reset'
    if not await database.get_setting_timestamp(bonus_reset_key):
        logger.info(f"Setting initial '{bonus_reset_key}'.")
        try:
            local_tz_startup = pytz_timezone(Config.TIMEZONE)
            initial_reset_time_local_bonus = datetime.now(local_tz_startup).replace(
                hour=Config.BONUS_MULTIPLIER_RESET_HOUR, minute=2, second=0, microsecond=0
            )
            # –û—Ç–Ω–∏–º–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –±–æ–ª—å—à–µ–µ, —á–µ–º –∫—É–ª–¥–∞—É–Ω, –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            initial_reset_time_local_bonus -= timedelta(days=Config.BONUS_MULTIPLIER_COOLDOWN_DAYS + 1)
            await database.set_setting_timestamp(bonus_reset_key, initial_reset_time_local_bonus.astimezone(dt_timezone.utc))
            logger.info(f"Initial '{bonus_reset_key}' set to: {initial_reset_time_local_bonus.isoformat()} {Config.TIMEZONE}")
        except Exception as e_init_reset_bonus: # –ò–∑–º–µ–Ω–∏–ª –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
            logger.error(f"Failed to set initial '{bonus_reset_key}': {e_init_reset_bonus}", exc_info=True)

    # >>>>> –î–û–ë–ê–í–ò–¢–¨: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–±—Ä–æ—Å–∞ –ø–µ—Ä–∏–æ–¥–∞ —Ä—É–ª–µ—Ç–∫–∏ <<<<<
    roulette_reset_key = 'last_global_roulette_period_reset'
    if not await database.get_setting_timestamp(roulette_reset_key):
        logger.info(f"Setting initial '{roulette_reset_key}' as it was not found in DB.")
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–∞–≤–Ω–æ –≤ –ø—Ä–æ—à–ª–æ–º, —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–π —Å–±—Ä–æ—Å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            # –∏ —Ä—É–ª–µ—Ç–∫–∞ –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å—Ä–∞–∑—É
            initial_roulette_reset_time_local = datetime.now(pytz_timezone(Config.TIMEZONE)).replace(
                 hour=Config.RESET_HOUR, minute=4, second=0, microsecond=0 # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ RESET_HOUR –∏ –º–∏–Ω—É—Ç—ã 4
            )
            initial_roulette_reset_time_local -= timedelta(days=(Config.ROULETTE_GLOBAL_COOLDOWN_DAYS * 2 + 1)) # –û—Ç–Ω–∏–º–∞–µ–º –±–æ–ª—å—à–µ –¥–Ω–µ–π

            await database.set_setting_timestamp(roulette_reset_key, initial_roulette_reset_time_local.astimezone(dt_timezone.utc))
            logger.info(f"Initial '{roulette_reset_key}' set to: {initial_roulette_reset_time_local.isoformat()} {Config.TIMEZONE}")
        except Exception as e_init_roulette_reset:
            logger.error(f"Failed to set initial '{roulette_reset_key}': {e_init_roulette_reset}", exc_info=True)
    # >>>>> –ö–û–ù–ï–¶ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò <<<<<

    logger.info("Registering handlers...")
    setup_families_handlers(dispatcher)
    setup_onecoin_handlers(dispatcher)
    setup_competition_handlers(dispatcher)
    setup_bonus_handlers(dispatcher)
    setup_roulette_handlers(dispatcher)
    setup_market_handlers(dispatcher) # <<< –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –†–´–ù–ö–ê
    setup_phone_handlers(dispatcher)
    setup_business_handlers(dispatcher) # –î–æ–±–∞–≤–ª–µ–Ω–æ
    setup_black_market_handlers(dispatcher) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –ß–µ—Ä–Ω–æ–≥–æ –†—ã–Ω–∫–∞
    logger.info("Registering stats_logic handlers...") # –î–æ–±–∞–≤—å —ç—Ç–æ
    setup_stats_handlers(dispatcher) # –ò —ç—Ç–æ
    setup_achievements_handlers(dispatcher)
    setup_robbank_handlers(dispatcher)
    setup_daily_onecoin_handlers(dispatcher)
    logger.info("Achievements command handlers registered.")
    logger.info("Stats command handlers registered.") # –ò —ç—Ç–æ
    logger.info("Black Market command handlers registered.")
    logger.info("All command handlers registered.")

    try:
        if Config.TIMEZONE and pytz_timezone(Config.TIMEZONE):
            
            # vvv –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê –î–õ–Ø –ß–ï–†–ù–û–ì–û –†–´–ù–ö–ê vvv
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –ß–µ—Ä–Ω–æ–≥–æ –†—ã–Ω–∫–∞
            bm_reset_hour = getattr(Config, "BLACKMARKET_RESET_HOUR", 21)
            scheduler.add_job(
                refresh_black_market_offers, # <--- –ò –≠–¢–£ –¢–û–ñ–ï –ü–†–û–í–ï–†–¨
                CronTrigger(hour=bm_reset_hour, minute=random.randint(0, 5), timezone=Config.TIMEZONE), 
                args=[bot], 
                id='refresh_black_market_job',
                replace_existing=True,
                misfire_grace_time=600
            )
            logger.info(f"Black Market refresh job scheduled for {bm_reset_hour:02d}:xx {Config.TIMEZONE}")

            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ß–† –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –±—ã–ª –ø—É—Å—Ç—ã–º
            # –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –∞ –¥–æ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ—â–µ –¥–∞–ª–µ–∫–æ.
            
            logger.info("Initial Black Market refresh task created.")
            
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ —Å –±–∏–∑–Ω–µ—Å–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
            business_income_hour = Config.BUSINESS_DAILY_INCOME_COLLECTION_HOUR # 21:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            # –ú–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –≤ 21:00:
            business_income_minute = 10 
            scheduler.add_job(
                process_daily_business_income_and_events,
                CronTrigger(hour=business_income_hour, minute=business_income_minute, timezone=Config.TIMEZONE),
                args=[bot],
                id='daily_business_income_and_events_job',
                replace_existing=True,
                misfire_grace_time=600 # –î–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 10 –º–∏–Ω—É—Ç
            )
            logger.info(f"Daily business income and events job scheduled for {business_income_hour:02d}:{business_income_minute:02d} {Config.TIMEZONE}")
            
            # --- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö) ---
            scheduler.add_job(daily_competition_score_update, CronTrigger(hour=Config.RESET_HOUR, minute=5, timezone=Config.TIMEZONE), id='daily_competition_score_update_job', replace_existing=True, misfire_grace_time=300)
            scheduler.add_job(check_and_finalize_competitions, 'interval', seconds=Config.COMPETITION_END_CHECK_INTERVAL_SECONDS, id='check_finalize_competitions_job', replace_existing=True, misfire_grace_time=600)
            scheduler.add_job(global_bonus_multiplier_reset_task, CronTrigger(hour=Config.BONUS_MULTIPLIER_RESET_HOUR, minute=2, timezone=Config.TIMEZONE), id='global_bonus_reset_job', replace_existing=True, misfire_grace_time=120)
            scheduler.add_job(daily_reset_roulette_attempts, CronTrigger(hour=Config.RESET_HOUR, minute=1, timezone=Config.TIMEZONE), id='daily_reset_roulette_extras_job', replace_existing=True, misfire_grace_time=120)
            scheduler.add_job(scheduled_check_phone_breakdowns, CronTrigger(day_of_week='sun', hour=3, minute=0, timezone=Config.TIMEZONE),
                               args=[bot], id='weekly_phone_breakdowns_job', replace_existing=True, misfire_grace_time=1800)

            battery_check_hour = Config.RESET_HOUR
            battery_check_minute = 3
            scheduler.add_job(scheduled_check_phone_battery_status, CronTrigger(hour=battery_check_hour, minute=battery_check_minute, timezone=Config.TIMEZONE),
                               args=[bot], id='daily_phone_battery_check_job', replace_existing=True, misfire_grace_time=300)

            insurance_remind_hour = getattr(Config, "PHONE_INSURANCE_REMIND_HOUR", 10)
            insurance_remind_minute = getattr(Config, "PHONE_INSURANCE_REMIND_MINUTE", 0)
            scheduler.add_job(scheduled_remind_insurance_expiry, CronTrigger(hour=insurance_remind_hour, minute=insurance_remind_minute, timezone=Config.TIMEZONE),
                              args=[bot], id='daily_insurance_expiry_reminder_job', replace_existing=True, misfire_grace_time=600)

            inflation_hour = getattr(Config, "INFLATION_HOUR", 1)
            inflation_minute = getattr(Config, "INFLATION_MINUTE", 15)
            scheduler.add_job(
                scheduled_apply_inflation,
                CronTrigger(day=1, month=f"*/{Config.INFLATION_PERIOD_MONTHS}", hour=inflation_hour, minute=inflation_minute, timezone=Config.TIMEZONE),
                args=[bot], id='quarterly_inflation_job', replace_existing=True, misfire_grace_time=3600
            )
            logger.info(f"–ó–∞–¥–∞—á–∞ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 1 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ {Config.INFLATION_PERIOD_MONTHS}-–≥–æ –º–µ—Å—è—Ü–∞ –≤ {inflation_hour:02d}:{inflation_minute:02d} {Config.TIMEZONE}")

            trigger_day_roulette = '*' if Config.ROULETTE_GLOBAL_COOLDOWN_DAYS == 1 else f"*/{Config.ROULETTE_GLOBAL_COOLDOWN_DAYS}"
            scheduler.add_job(
                global_roulette_period_reset_task,
                CronTrigger(
                    day=trigger_day_roulette,
                    hour=Config.RESET_HOUR,
                    minute=4, 
                    timezone=Config.TIMEZONE
                ),
                id='global_roulette_period_reset_job',
                replace_existing=True,
                misfire_grace_time=300 
            )
            logger.info(f"–ó–∞–¥–∞—á–∞ —Å–±—Ä–æ—Å–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ä—É–ª–µ—Ç–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –¥–µ–Ω—å '{trigger_day_roulette}' –≤ {Config.RESET_HOUR:02d}:04 {Config.TIMEZONE}")
            
            check_interval_seconds = 300 # 5 –º–∏–Ω—É—Ç
            scheduler.add_job(
                scheduled_check_expired_phone_prizes,
                'interval',
                seconds=check_interval_seconds,
                args=[bot], 
                id='check_expired_phone_prizes_job',
                replace_existing=True,
                misfire_grace_time=120 
            )
            logger.info(f"–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {check_interval_seconds} —Å–µ–∫—É–Ω–¥.")
            # === –ö–û–ù–ï–¶ –ù–û–í–û–ô –ó–ê–î–ê–ß–ò === # –≠—Ç–æ –±—ã–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ç–≤–æ–µ–º –∫–æ–¥–µ, —è –µ–≥–æ –æ—Å—Ç–∞–≤–ª—è—é

        # –î–û–ë–ê–í–õ–ï–ù–û: –ë–ª–æ–∫ except –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        else: # –≠—Ç–æ—Ç else –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ `if Config.TIMEZONE and pytz_timezone(Config.TIMEZONE):`
            logger.warning("TIMEZONE –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ó–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã.")
            
    except Exception as e: # –õ–æ–≤–∏–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤ try-–±–ª–æ–∫–µ
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}", exc_info=True)
        # –¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}") –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è on_startup –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

async def on_shutdown(dispatcher: Dispatcher):
    logger.info("Starting bot shutdown sequence...")
    if scheduler.running:
        scheduler.shutdown(wait=True)
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    logger.info("Bot shutdown sequence completed (on_shutdown).")
    await send_telegram_log(bot, "‚õîÔ∏è <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>")

dp.startup.register(on_startup)
dp.shutdown.register(on_shutdown)

# –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç, —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (0.1 –∏ -0.1)
POS_MICRO_CHANGES = [0.1, 0.2, 0.3, 0.4]
NEG_MICRO_CHANGES = [-0.1, -0.2, -0.3, -0.4]

def get_oneui_version_change() -> float:
    rand_category = random.random() # –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ–∑–∏—Ç–∏–≤, –Ω–µ–≥–∞—Ç–∏–≤, –Ω–æ–ª—å)

    # –®–∞–≥ 1: –í—ã–±–∏—Ä–∞–µ–º –æ–±—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ø–æ–∑–∏—Ç–∏–≤, –Ω–µ–≥–∞—Ç–∏–≤, –Ω–æ–ª—å)
    # –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É: 68% - –ø–æ–∑–∏—Ç–∏–≤, 30% - –Ω–µ–≥–∞—Ç–∏–≤, 2% - –Ω–æ–ª—å
    if rand_category < 0.68: # 68% —à–∞–Ω—Å –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        # –≠—Ç–∞ —á–∞—Å—Ç—å –∫–æ–¥–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ rand_category –º–µ–Ω—å—à–µ 0.68
        # –¢–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –î–õ–Ø –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô
        rand_pos_value = random.random()

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        # –û—á–µ–Ω—å —á–∞—Å—Ç–æ 0.5-1.5 (–±–æ–ª—å—à–µ 60% –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        if rand_pos_value < 0.65: # 65% –∏–∑ 68% –æ–±—â–µ–≥–æ —à–∞–Ω—Å–∞ –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤ (—Ç–æ –µ—Å—Ç—å 0.65 * 0.68 = ~44% –æ—Ç –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤)
            return round(random.uniform(0.5, 1.5), 1)
        # –ß–∞—Å—Ç–æ 0.5-3.5 (—Å–ª–µ–¥—É—é—â–∏–µ 20%)
        elif rand_pos_value < 0.85: # (20% –∏–∑ 68%)
            return round(random.uniform(0.5, 3.5), 1)
        # –†–µ–¥–∫–æ 2.5-7.5 (—Å–ª–µ–¥—É—é—â–∏–µ 10%)
        elif rand_pos_value < 0.95: # (10% –∏–∑ 68%)
            return round(random.uniform(2.5, 7.5), 1)
        # –û—á–µ–Ω—å —Ä–µ–¥–∫–æ 5.0-7.0 (—Å–ª–µ–¥—É—é—â–∏–µ 4%)
        elif rand_pos_value < 0.99: # (4% –∏–∑ 68%)
            return round(random.uniform(5.0, 7.0), 1)
        # –°—É–ø–µ—Ä —Ä–µ–¥–∫–æ 7.0-13.0 (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1%)
        else: # (1% –∏–∑ 68%)
            return round(random.uniform(7.0, 15.0), 1)

    elif rand_category < 0.98: # –°–ª–µ–¥—É—é—â–∏–µ 30% —à–∞–Ω—Å–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–æ—Ç 0.68 –¥–æ 0.98)
        # –≠—Ç–∞ —á–∞—Å—Ç—å –∫–æ–¥–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ rand_category –æ—Ç 0.68 –¥–æ 0.98
        # –¢–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –î–õ–Ø –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô
        rand_neg_value = random.random()

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        # –ß–∞—â–µ -0.5 –¥–æ -1.5 (45% –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        if rand_neg_value < 0.45: # 45% –∏–∑ 30% –æ–±—â–µ–≥–æ —à–∞–Ω—Å–∞ –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤ (—Ç–æ –µ—Å—Ç—å 0.45 * 0.30 = ~13.5% –æ—Ç –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤)
            return round(random.uniform(-1.5, -0.5), 1)
        # –†–µ–∂–µ -0.5 –¥–æ -3.5 (25% –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        elif rand_neg_value < 0.70: # (25% –∏–∑ 30%)
            return round(random.uniform(-3.5, -0.5), 1)
        # –ï—â–µ —Ä–µ–∂–µ -2.5 –¥–æ -7.5 (20% –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        elif rand_neg_value < 0.90: # (20% –∏–∑ 30%)
            return round(random.uniform(-7.5, -2.5), 1)
        # –°—É–ø–µ—Ä —Ä–µ–¥–∫–æ -5.0 –¥–æ -7.0 (8% –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        elif rand_neg_value < 0.98: # (8% –∏–∑ 30%)
            return round(random.uniform(-7.0, -5.0), 1)
        # –ú–µ–≥–∞ —Ä–µ–¥–∫–æ -7.0 –¥–æ -13.0 (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2% –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        else: # (2% –∏–∑ 30%)
            return round(random.uniform(-13.0, -7.0), 1)

    else: # –û—Å—Ç–∞–≤—à–∏–µ—Å—è 2% —à–∞–Ω—Å–∞ –Ω–∞ –Ω—É–ª–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–æ—Ç 0.98 –¥–æ 1.0)
        return 0.0

# === /oneui –ö–û–ú–ê–ù–î–ê (—Å —É—á–µ—Ç–æ–º –∫—É–ø–ª–µ–Ω–Ω—ã—Ö/–±–æ–Ω—É—Å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫) ===
@dp.message(Command(
    "oneui", "–≤–∞–Ω—é–∞–π", "—É–∞–Ω—é–∞–π", "–æ–±–Ω–æ–≤–∞", "–≤–µ—Ä—Å–∏—è", "–æ–±–Ω–æ–≤–∏—Ç—å", "–ø—Ä–æ—à–∏–≤–∫–∞",
    "one_ui", "get_version", "my_oneui", "–º–æ—è_–≤–µ—Ä—Å–∏—è_oneui", "–≤–∞–Ω—é–∏", "–æ–Ω–µ–π",
    ignore_case=True
))
async def oneui_command(message: Message):
    if not message.from_user: await message.reply("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."); return

    user_id = message.from_user.id
    user_tg_username = message.from_user.username
    full_name = message.from_user.full_name
    chat_id_current_message = message.chat.id
    user_link = get_user_mention_html(user_id, full_name, user_tg_username)
    original_message_thread_id = message.message_thread_id

    current_utc_time_for_command = datetime.now(dt_timezone.utc)
    local_tz = pytz_timezone(Config.TIMEZONE)
    current_local_date_for_streak = current_utc_time_for_command.astimezone(local_tz).date()

    chat_title_for_db: Optional[str] = None
    telegram_chat_public_link: Optional[str] = None
    if message.chat.type == "private":
        chat_title_for_db = f"–õ–∏—á–Ω—ã–π —á–∞—Ç ({user_id})"
    else:
        chat_title_for_db = message.chat.title or f"–ß–∞—Ç {chat_id_current_message}"
        if message.chat.username:
            telegram_chat_public_link = f"https://t.me/{message.chat.username}"
        # ... (—Ç–≤–æ–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è invite_link, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω)

    current_user_chat_lock = await database.get_user_chat_lock(user_id, chat_id_current_message)
    async with current_user_chat_lock:
        logger.info(f"/oneui from user {user_id} in chat {chat_id_current_message} (thread: {original_message_thread_id}) - START")
        response_message_parts: List[str] = []
        
        streak_bonus_version_change: float = 0.0
        streak_bonus_onecoin_change: int = 0
        
        # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è database.update_user_version –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ last_used
        set_last_used_time_arg: Optional[datetime] = None 
        force_update_last_used_arg: bool = False

        # --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ë–õ–û–ö–ê: –û–ë–†–ê–ë–û–¢–ö–ê –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –°–¢–†–ò–ö–ê (–í–°–ï–ì–î–ê –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø) ---
        new_calculated_streak = 0
        user_streak_data = await database.get_user_daily_streak(user_id)
        current_streak_in_db = user_streak_data.get('current_streak', 0) if user_streak_data else 0
        last_streak_check_date_in_db = user_streak_data.get('last_streak_check_date') if user_streak_data else None
        streak_updated_this_session = False

        if last_streak_check_date_in_db == current_local_date_for_streak:
            logger.info(f"Streak for user {user_id} already processed today ({current_local_date_for_streak}). Current DB streak: {current_streak_in_db}")
            new_calculated_streak = current_streak_in_db
        elif last_streak_check_date_in_db is None or last_streak_check_date_in_db < (current_local_date_for_streak - timedelta(days=1)):
            if current_streak_in_db > 0:
                comp_v, comp_c = 0.0, 0
                for tier in sorted(Config.PROGRESSIVE_STREAK_BREAK_COMPENSATION, key=lambda x: x['min_streak_days_before_break'], reverse=True):
                    if current_streak_in_db >= tier['min_streak_days_before_break']: comp_v, comp_c = tier['version_bonus'], tier['onecoin_bonus']; break
                if comp_v == 0.0 and comp_c == 0 and current_streak_in_db > 0: comp_v, comp_c = Config.DEFAULT_STREAK_BREAK_COMPENSATION_VERSION, Config.DEFAULT_STREAK_BREAK_COMPENSATION_ONECOIN
                if comp_v > 0 or comp_c > 0:
                    response_message_parts.append(f"‚ö†Ô∏è –°–µ—Ä–∏—è –∏–∑ {current_streak_in_db} –¥–Ω–µ–π –ø—Ä–µ—Ä–≤–∞–Ω–∞! –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è: <b>+{comp_v:.1f}</b>V, <b>+{comp_c}</b>C.")
                    streak_bonus_version_change += comp_v; streak_bonus_onecoin_change += comp_c
                    logger.info(f"User {user_id} streak broken ({current_streak_in_db} days). Compensation: +{comp_v:.1f}V, +{comp_c}C.")
            new_calculated_streak = 1; streak_updated_this_session = True
            logger.info(f"User {user_id} streak reset/started. New calculated streak: 1 on {current_local_date_for_streak}")
        elif last_streak_check_date_in_db == (current_local_date_for_streak - timedelta(days=1)):
            new_calculated_streak = current_streak_in_db + 1; streak_updated_this_session = True
            logger.info(f"User {user_id} continued streak. Old DB: {current_streak_in_db}, New calculated: {new_calculated_streak} on {current_local_date_for_streak}")
        
        if streak_updated_this_session:
            await database.update_user_daily_streak(user_id, new_calculated_streak, current_local_date_for_streak, current_utc_time_for_command)
            if new_calculated_streak > 0:
                for goal in Config.DAILY_STREAKS_CONFIG:
                    if new_calculated_streak == goal['target_days']:
                        vs, oc = goal.get('version_reward',0.0), goal.get('onecoin_reward',0)
                        if vs > 0 or oc > 0:
                            response_message_parts.append(f"üéâ –°—Ç—Ä–∏–∫ \"<b>{html.escape(goal['name'])}</b>\" ({new_calculated_streak} –¥.)! –ù–∞–≥—Ä–∞–¥–∞: <b>+{vs:.1f}</b>V, <b>+{oc}</b>C.")
                            streak_bonus_version_change += vs; streak_bonus_onecoin_change += oc
                            logger.info(f"User {user_id} achieved streak '{goal['name']}': +{vs:.1f}V, +{oc}C")
                        await check_and_grant_achievements(
                            user_id, chat_id_current_message, message.bot,
                            message_thread_id=original_message_thread_id,
                            current_daily_streak=new_calculated_streak # –ò—Å–ø–æ–ª—å–∑—É–µ–º current_daily_streak
                        )
                        break
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∏–∫–∞ (–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ new_calculated_streak)
        if new_calculated_streak > 0:
            response_message_parts.append(f"üî• –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: <b>{new_calculated_streak}</b> –¥.")

            next_goal_streak = next((g for g in Config.DAILY_STREAKS_CONFIG if g['target_days'] > new_calculated_streak), None)
            current_achieved_goal = next((g for g in Config.DAILY_STREAKS_CONFIG if g['target_days'] == new_calculated_streak), None)

            if (next_goal_streak and (next_goal_streak['target_days'] - new_calculated_streak) <= next_goal_streak.get('progress_show_within_days', 7)) or current_achieved_goal:
                target_for_pb = next_goal_streak
                name_for_pb = ""
                fill_char = Config.PROGRESS_BAR_FILLED_CHAR

                if current_achieved_goal:
                    target_for_pb = current_achieved_goal
                    name_for_pb = html.escape(current_achieved_goal['name']) + " (–ó–∞–≤–µ—Ä—à–µ–Ω–æ)"
                    fill_char = Config.PROGRESS_BAR_FULL_STREAK_CHAR
                elif next_goal_streak:
                    name_for_pb = html.escape(next_goal_streak['name'])

                if target_for_pb:
                    pb_streak_fill_count = round(new_calculated_streak / target_for_pb['target_days'] * 10)
                    if pb_streak_fill_count > 10:
                        pb_streak_fill_count = 10
                    if current_achieved_goal and new_calculated_streak == current_achieved_goal['target_days']:
                        pb_streak_fill_count = 10

                    pb_streak = fill_char * pb_streak_fill_count + Config.PROGRESS_BAR_EMPTY_CHAR * (10 - pb_streak_fill_count)
                    response_message_parts.append(f"<b>{name_for_pb}</b>: {new_calculated_streak}/{target_for_pb['target_days']}\n{pb_streak}")
            elif Config.DAILY_STREAKS_CONFIG and new_calculated_streak >= Config.DAILY_STREAKS_CONFIG[-1]['target_days']:
                response_message_parts.append(f"üëë –í—ã <b>{html.escape(Config.DAILY_STREAKS_CONFIG[-1]['name'])}</b>! –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å—Ç—Ä–∏–∫: {new_calculated_streak} –¥.!")
        # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê: –û–ë–†–ê–ë–û–¢–ö–ê –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –°–¢–†–ò–ö–ê ---

        try:
            # --- 1. –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ò–†–û–í–ö–ò –û–¢ –û–ì–†–ê–ë–õ–ï–ù–ò–Ø ---
            robbank_status_for_oneui = await database.get_user_robbank_status(user_id, chat_id_current_message)
            if robbank_status_for_oneui and robbank_status_for_oneui.get('robbank_oneui_blocked_until_utc'):
                blocked_until_utc = robbank_status_for_oneui['robbank_oneui_blocked_until_utc']
                if current_utc_time_for_command < blocked_until_utc:
                    blocked_until_local_str = blocked_until_utc.astimezone(local_tz).strftime('%d.%m.%Y %H:%M:%S %Z')
                    
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∏–∫–µ
                    block_msg = random.choice(ONEUI_BLOCKED_PHRASES).format(
                        block_time=blocked_until_local_str,
                        streak_info="" # –£–¥–∞–ª—è–µ–º —ç—Ç—É —á–∞—Å—Ç—å, —Ç–∞–∫ –∫–∞–∫ –∏–Ω—Ñ–æ –æ —Å—Ç—Ä–∏–∫–µ —É–∂–µ –≤ `response_message_parts`
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ, –¥–æ–±–∞–≤–ª—è—è –∫ –Ω–µ–º—É –æ–±—â–∏–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    final_blocked_response_parts = [f"{user_link}, {block_msg}"]
                    if new_calculated_streak > 0: # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∏–∫–µ
                        final_blocked_response_parts.append(f"–í–∞—à —Å—Ç—Ä–∏–∫: <b>{new_calculated_streak}</b> –¥–Ω–µ–π.")
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ, —á—Ç–æ –∞—Ä–µ—Å—Ç –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–∏–∫, –Ω–æ –Ω–∞–¥–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /oneui
                        final_blocked_response_parts.append("(–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–∏–∫, –µ—Å–ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /oneui –∫–∞–∂–¥—ã–π –¥–µ–Ω—å).")

                    await message.reply("\n".join(final_blocked_response_parts), parse_mode="HTML", disable_web_page_preview=True)
                    logger.info(f"/oneui user {user_id} in chat {chat_id_current_message} - BLOCKED BY ROBBANK until {blocked_until_utc.isoformat()}. Streak PROCESSED.")
                    return 
            
            # --- 2. –ü–†–û–í–ï–†–ö–ê –ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –ü–û–ü–´–¢–ö–ò ---
            used_extra_attempt_this_time: bool = False
            roulette_status_current = await database.get_roulette_status(user_id, chat_id_current_message)
            available_extra_oneui_attempts = roulette_status_current.get('extra_oneui_attempts', 0) if roulette_status_current else 0

            if available_extra_oneui_attempts > 0:
                new_extra_attempts_count = available_extra_oneui_attempts - 1
                await database.update_roulette_status(user_id, chat_id_current_message, {'extra_oneui_attempts': new_extra_attempts_count})
                response_message_parts.append(f"üåÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ <b>–¥–æ–ø. –ø–æ–ø—ã—Ç–∫–∞ /oneui</b>! –û—Å—Ç–∞–ª–æ—Å—å: {new_extra_attempts_count}.")
                used_extra_attempt_this_time = True
                force_update_last_used_arg = False # –î–æ–ø. –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å last_used –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫—É–ª–¥–∞—É–Ω–∞
                set_last_used_time_arg = None
                logger.info(f"User {user_id} in chat {chat_id_current_message} used extra /oneui attempt. Remaining: {new_extra_attempts_count}")

            is_free_regular_attempt_available = False
            if not used_extra_attempt_this_time:
                on_cooldown_status, next_reset_time_utc = await database.check_cooldown(user_id, chat_id_current_message)
                if on_cooldown_status and next_reset_time_utc:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –æ–±—ã—á–Ω–æ–º –∫—É–ª–¥–∞—É–Ω–µ
                    next_reset_local = next_reset_time_utc.astimezone(local_tz)
                    chosen_cooldown_template = random.choice(ONEUI_COOLDOWN_RESPONSES)
                    cooldown_message = chosen_cooldown_template.format(time=next_reset_local.strftime('%H:%M'), zone=local_tz.zone)
                    
                    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫—É–ª–¥–∞—É–Ω–µ
                    response_message_parts.append(cooldown_message) #

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ —Å–æ–µ–¥–∏–Ω—è—è —á–∞—Å—Ç–∏
                    final_cooldown_response = f"{user_link}, " + "".join(response_message_parts) #

                    await message.reply(final_cooldown_response, parse_mode="HTML", disable_web_page_preview=True) #
                    logger.info(f"/oneui user {user_id} in chat {chat_id_current_message} - ON REGULAR COOLDOWN.") #
                    return
                else:
                    # –ö—É–ª–¥–∞—É–Ω–∞ –Ω–µ—Ç, —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
                    is_free_regular_attempt_available = True
                    force_update_last_used_arg = True # –û–±–Ω–æ–≤–ª—è–µ–º last_used –¥–ª—è –∫—É–ª–¥–∞—É–Ω–∞
                    set_last_used_time_arg = current_utc_time_for_command
            

            # --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø OneUI ---
            current_db_version = await database.get_user_version(user_id, chat_id_current_message)
            base_oneui_change = get_oneui_version_change()
            actual_base_change_for_next_steps = base_oneui_change
            version_change_from_bonus_multiplier_applied = 0.0
            phone_case_bonus_applied_value = 0.0

            if base_oneui_change < 0 and roulette_status_current and roulette_status_current.get('negative_change_protection_charges', 0) > 0:
                new_charges = roulette_status_current['negative_change_protection_charges'] - 1
                await database.update_roulette_status(user_id, chat_id_current_message, {'negative_change_protection_charges': new_charges})
                original_negative_change = base_oneui_change
                actual_base_change_for_next_steps = abs(base_oneui_change) 
                response_message_parts.append(f"üõ°Ô∏è –°—Ä–∞–±–æ—Ç–∞–ª <b>–∑–∞—Ä—è–¥ –∑–∞—â–∏—Ç—ã</b>! –ò–∑–º–µ–Ω–µ–Ω–∏–µ <code>{original_negative_change:.1f}</code> —Å—Ç–∞–ª–æ <code>+{actual_base_change_for_next_steps:.1f}</code>! –ó–∞—Ä—è–¥–æ–≤: {new_charges}.")
            
            effective_oneui_change_from_roll_and_protection = actual_base_change_for_next_steps
            
            user_bonus_mult_status = await database.get_user_bonus_multiplier_status(user_id, chat_id_current_message)
            if user_bonus_mult_status and user_bonus_mult_status.get('current_bonus_multiplier') is not None and not user_bonus_mult_status.get('is_bonus_consumed', True):
                bonus_multiplier_value = float(user_bonus_mult_status['current_bonus_multiplier'])
                pending_boost_from_roulette = roulette_status_current.get('pending_bonus_multiplier_boost') if roulette_status_current else None
                if pending_boost_from_roulette is not None:
                    bonus_multiplier_value *= float(pending_boost_from_roulette)
                    await database.update_roulette_status(user_id, chat_id_current_message, {'pending_bonus_multiplier_boost': None})
                    response_message_parts.append(f"üé≤ –ü—Ä–∏–º–µ–Ω–µ–Ω <b>–±—É—Å—Ç x{float(pending_boost_from_roulette):.1f}</b> –æ—Ç —Ä—É–ª–µ—Ç–∫–∏ –∫ –±–æ–Ω—É—Å—É!")
                
                change_if_multiplier_applied = effective_oneui_change_from_roll_and_protection * bonus_multiplier_value
                version_change_from_bonus_multiplier_applied = change_if_multiplier_applied - effective_oneui_change_from_roll_and_protection
                effective_oneui_change_from_roll_and_protection = change_if_multiplier_applied
                response_message_parts.append(f"‚ú® –ü—Ä–∏–º–µ–Ω–µ–Ω –±–æ–Ω—É—Å-–º–Ω–æ–∂–∏—Ç–µ–ª—å <b>x{bonus_multiplier_value:.2f}</b>! (<code>{actual_base_change_for_next_steps:.1f}</code> -> <code>{effective_oneui_change_from_roll_and_protection:.1f}</code>)")
                await database.update_user_bonus_multiplier_status(user_id, chat_id_current_message, user_bonus_mult_status['current_bonus_multiplier'], True, user_bonus_mult_status.get('last_claimed_timestamp'))

            total_version_change_before_phone_bonus = effective_oneui_change_from_roll_and_protection + streak_bonus_version_change
            
            try:
                phone_bonuses = await get_active_user_phone_bonuses(user_id)
                oneui_bonus_percent_from_case = phone_bonuses.get("oneui_version_bonus_percent", 0.0)
                if oneui_bonus_percent_from_case != 0:
                    bonus_value_from_case = total_version_change_before_phone_bonus * (oneui_bonus_percent_from_case / 100.0)
                    phone_case_bonus_applied_value = bonus_value_from_case
                    final_oneui_change_to_apply = total_version_change_before_phone_bonus + bonus_value_from_case
                    response_message_parts.append(f"üì± –ë–æ–Ω—É—Å –æ—Ç —á–µ—Ö–ª–∞ <b>{'+' if oneui_bonus_percent_from_case > 0 else ''}{oneui_bonus_percent_from_case:.0f}%</b> –ø—Ä–∏–º–µ–Ω–µ–Ω!")
                else:
                    final_oneui_change_to_apply = total_version_change_before_phone_bonus
            except Exception as e_phone_bonus_main:
                logger.error(f"OneUI: Error applying phone case bonus for user {user_id}: {e_phone_bonus_main}", exc_info=True)
                final_oneui_change_to_apply = total_version_change_before_phone_bonus
            
            new_version_final_raw = current_db_version + final_oneui_change_to_apply
            new_version_final_rounded = round(new_version_final_raw, 1)
            
            main_roll_response_part = f"üìâ –û–±–Ω–æ–≤–∞ –Ω–µ –≤—ã—à–ª–∞." if base_oneui_change == 0.0 else \
                                     random.choice(POSITIVE_RESPONSES).replace("%.1f", f"<b>{base_oneui_change:.1f}</b>") if base_oneui_change > 0.0 else \
                                     random.choice(NEGATIVE_RESPONSES).replace("%.1f", f"<b>{abs(base_oneui_change):.1f}</b>")
            response_message_parts.insert(0, main_roll_response_part)
            response_message_parts.append(f"\n<b>–ò—Ç–æ–≥–æ–≤–∞—è –≤–µ—Ä—Å–∏—è OneUI: <code>{new_version_final_rounded:.1f}</code>.</b>")

            await database.update_user_version(
                user_id, chat_id_current_message, new_version_final_rounded,
                user_tg_username, full_name, chat_title_for_db, telegram_chat_public_link,
                set_last_used_time_utc=set_last_used_time_arg, # None –¥–ª—è –¥–æ–ø. –ø–æ–ø—ã—Ç–∫–∏, current_utc_time_for_command –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π
                force_update_last_used=force_update_last_used_arg # False –¥–ª—è –¥–æ–ø. –ø–æ–ø—ã—Ç–∫–∏, True –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π
            )

            if streak_bonus_onecoin_change != 0:
                await database.update_user_onecoins(
                    user_id, chat_id_current_message, streak_bonus_onecoin_change,
                    user_tg_username, full_name, chat_title_for_db
                )
            
            await check_and_grant_achievements(
                user_id, chat_id_current_message, message.bot,
                message_thread_id=original_message_thread_id,
                current_oneui_version=new_version_final_rounded
            )

            logger.info(f"Version for {user_id} in {chat_id_current_message} updated: {current_db_version:.1f} -> {new_version_final_rounded:.1f}. "
                        f"Details: BaseRoll={base_oneui_change:.1f}, ProtEffect={actual_base_change_for_next_steps-base_oneui_change:.1f}, "
                        f"BonusMultEffect={version_change_from_bonus_multiplier_applied:.2f}, "
                        f"StreakVersion={streak_bonus_version_change:.1f}, StreakCoin={streak_bonus_onecoin_change}, "
                        f"PhoneCaseBonus={phone_case_bonus_applied_value:.2f}, "
                        f"TotalAppliedChange={final_oneui_change_to_apply:.2f}")
            
            await message.reply("\n".join(response_message_parts), parse_mode="HTML", disable_web_page_preview=True)
            logger.info(f"/oneui user {user_id} in chat {chat_id_current_message} (thread: {original_message_thread_id}) - SUCCESS")

        except Exception as e:
            logger.error(f"Error in /oneui for user {user_id} in chat {chat_id_current_message} (thread: {original_message_thread_id}): {e}", exc_info=True)
            await message.reply("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /oneui. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", disable_web_page_preview=True)
            await send_telegram_log(message.bot, f"üî¥ <b>–û—à–∏–±–∫–∞ /oneui</b>\nUser: {user_link} ({user_id})\nChat: {html.escape(chat_title_for_db or str(chat_id_current_message))} ({chat_id_current_message}, thread: {original_message_thread_id})\nErr: <pre>{html.escape(str(e))}</pre>")
        finally:
            logger.info(f"/oneui user {user_id} in chat {chat_id_current_message} (thread: {original_message_thread_id}) - END")

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ (–∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞) ===
# fetch_user_display_data –∏ resolve_target_user
async def fetch_user_display_data(bot_instance: Bot, user_id_to_fetch: int) -> Tuple[str, Optional[str]]:
    full_name, username = None, None; conn = None
    try:
        conn = await database.get_connection()
        udb = await conn.fetchrow("SELECT full_name, username FROM user_oneui WHERE user_id = $1 ORDER BY last_used DESC NULLS LAST LIMIT 1", user_id_to_fetch)
        if udb: full_name, username = udb.get('full_name'), udb.get('username')
    except Exception as e: logger.warning(f"DB fetch error for user {user_id_to_fetch}: {e}")
    finally:
        if conn and not conn.is_closed(): await conn.close()
    if not full_name:
        try:
            ci = await bot_instance.get_chat(user_id_to_fetch)
            fn_api = getattr(ci, 'full_name', None) or getattr(ci, 'first_name', None)
            if fn_api: full_name = fn_api
            if not username: username = getattr(ci, 'username', None)
        except Exception as e: logger.warning(f"API get_chat error for user {user_id_to_fetch}: {e}")
    return full_name or f"User ID {user_id_to_fetch}", username

async def resolve_target_user(msg: Message, cmd: CommandObject, bot_inst: Bot) -> Optional[Tuple[int, str, Optional[str]]]:
    uid, fn, un = None, None, None
    if msg.reply_to_message and msg.reply_to_message.from_user and not msg.reply_to_message.from_user.is_bot:
        repl_user = msg.reply_to_message.from_user
        uid, fn, un = repl_user.id, repl_user.full_name, repl_user.username
    elif cmd.args:
        arg = cmd.args.strip()
        if arg.startswith('@'):
            uname_find = arg[1:].lower(); conn = None
            try:
                conn = await database.get_connection()
                urow = await conn.fetchrow("SELECT user_id, full_name, username FROM user_oneui WHERE lower(username) = $1 ORDER BY last_used DESC NULLS LAST LIMIT 1", uname_find)
                if urow: uid, fn, un = urow['user_id'], urow.get('full_name'), urow.get('username')
                else: await msg.reply(f"–ù–µ –Ω–∞–π–¥–µ–Ω —é–∑–µ—Ä @{html.escape(arg[1:])}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ ID/–æ—Ç–≤–µ—Ç."); return None
            except Exception as e: logger.error(f"DB error searching @{html.escape(arg[1:])}: {e}", exc_info=True); await msg.reply(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ @{html.escape(arg[1:])}."); return None
            finally:
                if conn and not conn.is_closed(): await conn.close()
        else:
            try: uid = int(arg)
            except ValueError: await msg.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. ID, @username –∏–ª–∏ –æ—Ç–≤–µ—Ç."); return None
    else: return None # –ù–∏ –æ—Ç–≤–µ—Ç–∞, –Ω–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if uid:
        f_fn, f_un = await fetch_user_display_data(bot_inst, uid)
        final_fn = f_fn if f_fn and f_fn != f"User ID {uid}" else fn
        if not final_fn: final_fn = f_fn
        return uid, final_fn, f_un if f_un else un
    return None
# === –ö–æ–Ω–µ—Ü –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ===

# === –ö–û–ú–ê–ù–î–´ (—Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∞–ª–∏–∞—Å–∞–º–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º /help) ===
@dp.message(Command("start", "—Å—Ç–∞—Ä—Ç", "–Ω–∞—á–∞–ª–æ", ignore_case=True))
async def cmd_start(message: Message, bot: Bot):
    user_id = message.from_user.id if message.from_user else 0
    user_full_name = message.from_user.full_name if message.from_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    user_username = message.from_user.username if message.from_user else ""
    user_link = html.escape(user_full_name) # –î–ª—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏

    response_text = f"""
üåü <b>–ü—Ä–∏–≤–µ—Ç, {user_link}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> üåü

üöÄ –ó–∞–±—É–¥—å –æ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. –ó–¥–µ—Å—å —Ç—ã ‚Äî –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Å–≤–æ–µ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å—É–¥—å–±—ã! –¢–≤–æ–π –ø—É—Ç—å –∫ –≤–µ—Ä—à–∏–Ω–∞–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –°–ï–ô–ß–ê–°.

üåç –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å:

üì± <b>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å OneUI:</b> –ü–æ–≤—ã—à–∞–π –≤–µ—Ä—Å–∏—é —Å–≤–æ–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –æ–±–æ–ª–æ—á–∫–∏ OneUI –∏ –æ–±–≥–æ–Ω—è–π –¥—Ä—É–≥–∏—Ö!
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üíé <b>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å OneCoin:</b> –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è.
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üè¢ <b>–†–∞–∑–≤–∏–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å:</b> –û—Ç–∫—Ä–æ–π —Å–≤–æ—é —Å–µ—Ç—å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –∏ –ø–æ–ª—É—á–∞–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥.
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
ü§ù <b>–°–æ–∑–¥–∞–≤–∞—Ç—å —Å–µ–º—å–∏:</b> –û–±—ä–µ–¥–∏–Ω—è–π—Å—è —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –¥–æ–º–∏–Ω–∏—Ä—É–π –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö!
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üì± <b>–ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω:</b> –ü–æ–∫—É–ø–∞–π –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏, —É–ª—É—á—à–∞–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π OneUI.
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üé≤ <b>–†–∏—Å–∫–æ–≤–∞—Ç—å –∏ –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å:</b> –ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É –≤ —Ä—É–ª–µ—Ç–∫–µ –∏ –Ω–∞ –∑–∞–≥–∞–¥–æ—á–Ω–æ–º –ß–µ—Ä–Ω–æ–º —Ä—ã–Ω–∫–µ.
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üèÜ <b>–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è:</b> –ü–æ–∫–∞–∂–∏ –≤—Å–µ–º, –∫—Ç–æ –∑–¥–µ—Å—å –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞–≥–Ω–∞—Ç OneCoin/OneUi! 


üí° <b>–¢–í–û–ò –ü–ï–†–í–´–ï –®–ê–ì–ò –ö –í–ï–õ–ò–ß–ò–Æ (–¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞!):</b> üí°
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ –ø–ª–∞–Ω—É:
1Ô∏è‚É£–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /roll, —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –≤ —Ä—É–ª–µ—Ç–∫–µ. –¢—ã –º–æ–∂–µ—à—å –≤—ã–∏–≥—Ä–∞—Ç—å –º–æ—â–Ω—ã–µ –±–æ–Ω—É—Å—ã!
2Ô∏è‚É£–ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω–∏ –∫–æ–º–∞–Ω–¥—É /bonus, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é OneUI (–ù–æ, —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ).
3Ô∏è‚É£–ò —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –∞–∫—Ç–∏–≤–∏—Ä—É–π —Å–≤–æ–π OneUI —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /oneui


üößüößüöß <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é</b> –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ <b>–±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>.
–≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å—Ç–æ–ª–∫–Ω—É—Ç—å—Å—è —Å –æ—à–∏–±–∫–∞–º–∏, –∏–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –¥–æ—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω—É –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –±—ã—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∞–Ω—ã–µ :). –ù–æ, —è –±—É–¥—É –ø—ã—Ç–∞—Ç—å—Å—è —Ñ–∏–∫—Å–∏—Ç—å!

üì©–í—Å–µ –∑–∞–º–µ—á–∞–Ω–∏—è, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é, –≥–¥–µ-—Ç–æ —Ç–µ–∫—Å—Ç –∫—Ä–∏–≤–æ–π, –ø–∏—à–∏:üëâ @lyuto_bor

üìå(–°–æ–≤–µ—Ç—É—é –±–æ—Ç—É –≤—ã–¥–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å, –±–µ–∑ –ø—Ä–∞–≤ –º–æ–∂–Ω–æ)

‚ÑπÔ∏è–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–±–æ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥–∞—Ö, –Ω–∞–±–µ—Ä–∏ /help.‚ÑπÔ∏è
"""
    try:
        await message.reply(response_text, parse_mode="HTML", disable_web_page_preview=True)
        logger.info(f"User {user_id} ({user_link}) received enhanced start message.")
    except Exception as e:
        logger.error(f"Error sending enhanced start message to user {user_id}: {e}", exc_info=True)
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ /start —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_link} ({user_id}): <pre>{html.escape(str(e))}</pre>")

@dp.message(Command(
    "help", "–ø–æ–º–æ—â—å", "—Ö–µ–ª–ø", "—Å–ø—Ä–∞–≤–∫–∞", "–∫–æ–º–∞–Ω–¥—ã", "commands", "cmds", "manual", "–≥–∞–π–¥", "–∏–Ω—Ñ–æ", "info",
    ignore_case=True
))
async def cmd_help(message: Message, command: CommandObject):
    # command: CommandObject - —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç Aiogram,
    # –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ, –≤–∫–ª—é—á–∞—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "/help —Å–µ–º—å—è", —Ç–æ "—Å–µ–º—å—è" –±—É–¥–µ—Ç –≤ command.args

    # –ü–æ–ª—É—á–∞–µ–º user_id –∏ user_link –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è
    user_id = message.from_user.id if message.from_user else 0
    user_link = html.escape(message.from_user.full_name) if message.from_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    if command.args: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ /help (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/help —Å–µ–º—å—è")
        category_key = command.args.lower() # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

        if category_key in COMMAND_CATEGORIES:
            category_data = COMMAND_CATEGORIES[category_key]
            response_parts = [
                f"<b>üìö {html.escape(category_data['title'])}</b>",
                f"{html.escape(category_data['description'])}",
                "" # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
            ]
            for cmd, desc in category_data['commands'].items():
                response_parts.append(f"<code>{html.escape(cmd)}</code> - {html.escape(desc)}")
            
            await message.reply("\n".join(response_parts), parse_mode="HTML", disable_web_page_preview=True)
            logger.info(f"User {user_link} ({user_id}) requested help for category: '{category_key}'") # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        else:
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            available_categories = ", ".join([f"<code>{k}</code>" for k in COMMAND_CATEGORIES.keys() if k != "–æ—Å–Ω–æ–≤–Ω—ã–µ"]) # –ò—Å–∫–ª—é—á–∞–µ–º "–æ—Å–Ω–æ–≤–Ω—ã–µ" –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è help-—Å–æ–æ–±—â–µ–Ω–∏—è
            await message.reply(
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ '<code>{html.escape(category_key)}</code>' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. "
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {available_categories}.\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/help</code> –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            logger.warning(f"User {user_link} ({user_id}) requested unknown help category: '{category_key}'") # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    else:
        # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç (–ø—Ä–æ—Å—Ç–æ /help)
        response_parts = [
            "<b>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥:</b>",
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:",
            "/help &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏&gt;",
            "" # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∫—Ä–æ–º–µ "–æ—Å–Ω–æ–≤–Ω—ã—Ö", —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ)
        for key, data in COMMAND_CATEGORIES.items():
            if key == "–æ—Å–Ω–æ–≤–Ω—ã–µ":
                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "–æ—Å–Ω–æ–≤–Ω—ã–µ", —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Å–ø–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            
            response_parts.append(f"‚Ä¢ <b>{html.escape(data['title'])}</b> (<code>/help {html.escape(key)}</code>) - {html.escape(data['description'])}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∏ –≤–∏–¥–Ω—ã –≤ –æ–±—â–µ–º /help
        response_parts.append("\n<b>‚ú® –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>")
        for cmd, desc in COMMAND_CATEGORIES["–æ—Å–Ω–æ–≤–Ω—ã–µ"]["commands"].items():
            response_parts.append(f"{html.escape(cmd)} - {html.escape(desc)}")

        await message.reply("\n".join(response_parts), parse_mode="HTML", disable_web_page_preview=True)
        logger.info(f"User {user_link} ({user_id}) requested general help.") # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å —Ö–µ–ª–ø–∞



@dp.message(Command(
    "my_history", "–º–æ—è_–∏—Å—Ç–æ—Ä–∏—è", "history", "–∏—Å—Ç–æ—Ä–∏—è", "–º–æ–∏_–∏–∑–º–µ–Ω–µ–Ω–∏—è", "myhistory",
    "logupdates", "log_updates", "myupdates", "–º–æ–∏–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "–º–æ–π–ª–æ–≥–≤–µ—Ä—Å–∏–π", "–ª–æ–≥–º–æ–∏—Ö–≤–µ—Ä—Å–∏–π",
    ignore_case=True
))
async def my_history_command(message: Message, bot: Bot):
    if not message.from_user: await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."); return
    user_id, chat_id = message.from_user.id, message.chat.id
    full_name, username = await fetch_user_display_data(bot, user_id)
    user_link = get_user_mention_html(user_id, full_name, username)
    try:
        history_records = await database.get_user_version_history(user_id, chat_id=chat_id, limit=15)
        if not history_records: return await message.reply(f"{user_link}, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Ä—Å–∏–π OneUI –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/oneui</code>!", disable_web_page_preview=True)

        response_lines = [f"<b>üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –≤–µ—Ä—Å–∏–π OneUI –≤ —ç—Ç–æ–º —á–∞—Ç–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(history_records)}):</b>"]
        local_tz = pytz_timezone(Config.TIMEZONE)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É.
        # history_records —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã DESCENDING (–æ—Ç –Ω–æ–≤–æ–π –∫ —Å—Ç–∞—Ä–æ–π)
        # –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç 'version_diff' —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        # –∏–ª–∏ 0.0 –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏.

        for i, record in enumerate(history_records):
            version_text = f"V. <b>{record['version']:.1f}</b>"
            diff_text = ""
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –≤ —Å–ø–∏—Å–∫–µ (—Å–∞–º–∞—è –Ω–æ–≤–∞—è), –∏–ª–∏ diff 0.0, –∏–ª–∏ diff –µ—â–µ –Ω–µ –ø–æ—Å—á–∏—Ç–∞–Ω
            # –ò–õ–ò –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –õ–ò–ú–ò–¢–ê
            # (—Ç–æ –µ—Å—Ç—å, –º—ã –Ω–µ –∑–Ω–∞–µ–º –µ–µ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–µ–¥—ã–¥—É—â—É—é)
            if i == len(history_records) - 1: # –≠—Ç–æ —Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å –≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º —Å–ø–∏—Å–∫–µ
                diff_text = "" # –î–ª—è —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏ –≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É
            elif record.get('version_diff') is not None:
                diff_value = float(record['version_diff'])
                if diff_value > 0:
                    diff_text = f" (<span class='tg-spoiler'>+{diff_value:.1f}</span>)"
                elif diff_value < 0:
                    diff_text = f" (<span class='tg-spoiler'>{diff_value:.1f}</span>)"
                else:
                    diff_text = " (<span class='tg-spoiler'>–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π</span>)"

            response_lines.append(
                f"  <code>{len(history_records) - i:2}.</code> {version_text}{diff_text} {record['changed_at'].astimezone(local_tz).strftime('%d.%m  %H:%M')}"
            )
        await message.reply("\n".join(response_lines), parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Error in /my_history for {user_link} in chat {chat_id}: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Ä—Å–∏–π.", disable_web_page_preview=True)
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /my_history –¥–ª—è {user_link}: <pre>{html.escape(str(e))}</pre>")


@dp.message(Command(
    "user_history", "–∏—Å—Ç–æ—Ä–∏—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–∏—Å—Ç–æ—Ä–∏—è—é–∑–µ—Ä–∞", "—é–∑–µ—Ä–∏—Å—Ç–æ—Ä–∏—è",
    "log_user", "userlog", "checkuserhistory", "—á—É–∂–∞—è–∏—Å—Ç–æ—Ä–∏—è", "–µ–≥–æ–∏—Å—Ç–æ—Ä–∏—è",
    ignore_case=True
))
async def user_history_command(message: Message, command: CommandObject, bot: Bot):
    calling_user = message.from_user
    if not calling_user: return await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É.", disable_web_page_preview=True)
    target_user_data = await resolve_target_user(message, command, bot)
    if not target_user_data:
        if not command.args and not message.reply_to_message:
            await message.reply("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å (ID/@user/–æ—Ç–≤–µ—Ç) –¥–ª—è <code>/user_history</code> –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/my_history</code> –¥–ª—è —Å–≤–æ–µ–π.", disable_web_page_preview=True)
        return
    target_user_id, target_full_name, target_username = target_user_data
    target_user_link = get_user_mention_html(target_user_id, target_full_name, target_username)
    current_chat_id = message.chat.id
    try:
        history_records = await database.get_user_version_history(target_user_id, chat_id=current_chat_id, limit=15)
        if not history_records: return await message.reply(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_link} –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Ä—Å–∏–π OneUI –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", disable_web_page_preview=True)

        response_lines = [f"<b>üìú –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Ä—Å–∏–π OneUI {target_user_link} –≤ —ç—Ç–æ–º —á–∞—Ç–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(history_records)}):</b>"]
        local_tz = pytz_timezone(Config.TIMEZONE)

        for i, record in enumerate(history_records):
            version_text = f"V. <b>{record['version']:.1f}</b>"
            diff_text = ""
            if i == len(history_records) - 1:
                diff_text = ""
            elif record.get('version_diff') is not None:
                diff_value = float(record['version_diff'])
                if diff_value > 0:
                    diff_text = f" (<span class='tg-spoiler'>+{diff_value:.1f}</span>)"
                elif diff_value < 0:
                    diff_text = f" (<span class='tg-spoiler'>{diff_value:.1f}</span>)"
                else:
                    diff_text = " (<span class='tg-spoiler'>–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π</span>)"

            response_lines.append(
                f"  <code>{len(history_records) - i:2}.</code> {version_text}{diff_text} {record['changed_at'].astimezone(local_tz).strftime('%d.%m  %H:%M')}"
            )
        await message.reply("\n".join(response_lines), parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Error in /user_history for target {target_user_id} by {calling_user.id}: {e}", exc_info=True)
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {target_user_link}.", disable_web_page_preview=True)
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /user_history –¥–ª—è {target_user_link} (–∑–∞–ø—Ä–æ—Å–∏–ª {get_user_mention_html(calling_user.id, calling_user.full_name, calling_user.username)}): <pre>{html.escape(str(e))}</pre>")


@dp.message(Command(
    "top_chat", "—Ç–æ–ø_—á–∞—Ç–∞", "—Ç–æ–ø—á–∞—Ç–∞", "—Ç–æ–ø–≤—ç—Ç–æ–º—á–∞—Ç–µ", "—Ç–æ–ø",
    "chat_top", "chattop", "leaderschat", "–ª–∏–¥–µ—Ä—ã—á–∞—Ç–∞", "—Ä–µ–π—Ç–∏–Ω–≥—á–∞—Ç–∞",
    ignore_case=True
))
async def top_chat_command(message: Message, bot: Bot):
    chat_id = message.chat.id
    chat_title_display = html.escape(message.chat.title or f"—ç—Ç–æ–º —á–∞—Ç–µ (ID: {chat_id})")
    try:
        top_users = await database.get_top_users_in_chat(chat_id, limit=10)
        if not top_users: return await message.reply(f"–í {chat_title_display} –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞ OneUI.")
        response_lines = [f"<b>üèÜ –¢–æ–ø-10 OneUI –≤ {chat_title_display}:</b>"]
        for i, user_data in enumerate(top_users):
            full_name_top, username_top = await fetch_user_display_data(bot, user_data['user_id'])
            user_link_text = get_user_mention_html(user_data['user_id'], full_name_top, username_top)
            response_lines.append(f"{i + 1}. {user_link_text} - <code>{user_data['version']:.1f}</code>")
        await message.reply("\n".join(response_lines), parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Error in /top_chat for chat {chat_id}: {e}", exc_info=True)
        await message.reply("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø–∞ —á–∞—Ç–∞.")
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /top_chat (—á–∞—Ç ID <code>{chat_id}</code>): <pre>{html.escape(str(e))}</pre>")


@dp.message(Command(
    "top_global", "–≥–ª–æ–±–∞–ª—å–Ω—ã–π_—Ç–æ–ø", "—Ç–æ–ø–≤—Å–µ—Ö", "–º–∏—Ä–æ–≤–æ–π—Ç–æ–ø", "—Ç–æ–ø–≥–ª–æ–±–∞–ª",
    "globaltop", "worldtop", "leadersglobal", "–≤—Å–µ–æ–±—â–∏–π—Ç–æ–ø",
    ignore_case=True
))
async def top_global_command(message: Message, bot: Bot):
    try:
        top_users = await database.get_global_top_users(limit=10)
        if not top_users: return await message.reply("–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø OneUI –ø–æ–∫–∞ –ø—É—Å—Ç.")
        response_lines = ["<b>üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø-10 OneUI:</b>"]
        for i, user_data in enumerate(top_users):
            full_name_top, username_top = await fetch_user_display_data(bot, user_data['user_id'])
            user_link_text = get_user_mention_html(user_data['user_id'], full_name_top, username_top)
            chat_display_info = ""
            if user_data.get('chat_title'):
                 chat_title_esc = html.escape(user_data['chat_title'])
                 if user_data.get('chat_id') == user_data['user_id'] or user_data['chat_title'] == f"–õ–∏—á–Ω—ã–π —á–∞—Ç ({user_data['user_id']})": chat_display_info = " (–õ–°)"
                 elif user_data.get('telegram_chat_link'): chat_display_info = f" (–∏–∑ <a href=\"{user_data['telegram_chat_link']}\">{chat_title_esc}</a>)"
                 else: chat_display_info = f" (–≤ '{chat_title_esc}')"
            response_lines.append(f"{i + 1}. {user_link_text} - <code>{user_data['version']:.1f}</code>{chat_display_info}")
        await message.reply("\n".join(response_lines), parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Error in /top_global: {e}", exc_info=True)
        await message.reply("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç–æ–ø–∞.")
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /top_global: <pre>{html.escape(str(e))}</pre>")


@dp.message(Command(
    "my_top_versions", "–º–æ–∏_–ª—É—á—à–∏–µ_–≤–µ—Ä—Å–∏–∏", "–º–æ–π—Ç–æ–ø–≤–µ—Ä—Å–∏–π", "—Ç–æ–ø–º–æ–∏—Ö–≤–µ—Ä—Å–∏–π",
    "mytopversions", "mybestversions", "–ª—É—á—à–∏–µ–≤–µ—Ä—Å–∏–∏–º–µ–Ω—è", "–º–æ–π—Ç–æ–ø",
    ignore_case=True
))
async def my_top_versions_command(message: Message, bot: Bot):
    if not message.from_user: await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."); return
    user_id = message.from_user.id
    full_name, username = await fetch_user_display_data(bot, user_id)
    user_link = get_user_mention_html(user_id, full_name, username)
    try:
        top_versions = await database.get_user_top_versions(user_id, limit=10)
        if not top_versions: return await message.reply(f"{user_link}, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤–µ—Ä—Å–∏–π OneUI.")
        response_lines = [f"<b>üåü –í–∞—à–∏ –ª—É—á—à–∏–µ –≤–µ—Ä—Å–∏–∏ OneUI –ø–æ —á–∞—Ç–∞–º (–º–∞–∫—Å. {len(top_versions)}):</b>"]
        for i, record in enumerate(top_versions):
            chat_display_info = ""
            if record.get('chat_title'):
                 chat_title_esc = html.escape(record['chat_title'])
                 if record.get('chat_id') == user_id or record['chat_title'] == f"–õ–∏—á–Ω—ã–π —á–∞—Ç ({user_id})": chat_display_info = " (–õ–°)"
                 elif record.get('telegram_chat_link'): chat_display_info = f" (–∏–∑ <a href=\"{record['telegram_chat_link']}\">{chat_title_esc}</a>)"
                 else: chat_display_info = f" (–≤ '{chat_title_esc}')"
            response_lines.append(f"  <code>{i+1:2}.</code> –í–µ—Ä—Å–∏—è <b>{record['version']:.1f}</b>{chat_display_info}")
        await message.reply("\n".join(response_lines), parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Error in /my_top_versions for {user_link}: {e}", exc_info=True)
        await message.reply("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ç–æ–ø –≤–µ—Ä—Å–∏–π.")
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /my_top_versions –¥–ª—è {user_link}: <pre>{html.escape(str(e))}</pre>")


@dp.message(Command(
    "user_top_versions", "—Ç–æ–ø_–≤–µ—Ä—Å–∏–π_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–µ–≥–æ—Ç–æ–ø–≤–µ—Ä—Å–∏–π", "—Ç–æ–ø–≤–µ—Ä—Å–∏–π—é–∑–µ—Ä–∞", "utv",
    "usertopversions", "checkusertopversions", "—á—É–∂–æ–π—Ç–æ–ø", "–µ–≥–æ—Ç–æ–ø",
    ignore_case=True
))
async def user_top_versions_command(message: Message, command: CommandObject, bot: Bot):
    calling_user = message.from_user
    if not calling_user: return await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É.")
    target_user_data = await resolve_target_user(message, command, bot)
    if not target_user_data:
        if not command.args and not message.reply_to_message:
            await message.reply("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å (ID/@user/–æ—Ç–≤–µ—Ç) –¥–ª—è <code>/user_top_versions</code> –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/my_top_versions</code>.")
        return
    target_user_id, target_full_name, target_username = target_user_data
    target_user_link = get_user_mention_html(target_user_id, target_full_name, target_username)
    try:
        top_versions = await database.get_user_top_versions(target_user_id, limit=10)
        if not top_versions: return await message.reply(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_link} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤–µ—Ä—Å–∏–π OneUI.")
        response_lines = [f"<b>üåü –õ—É—á—à–∏–µ –≤–µ—Ä—Å–∏–∏ OneUI {target_user_link} –ø–æ —á–∞—Ç–∞–º (–º–∞–∫—Å. {len(top_versions)}):</b>"]
        for i, record in enumerate(top_versions):
            chat_display_info = ""
            if record.get('chat_title'):
                 chat_title_esc = html.escape(record['chat_title'])
                 if record.get('chat_id') == target_user_id or record['chat_title'] == f"–õ–∏—á–Ω—ã–π —á–∞—Ç ({target_user_id})": chat_display_info = " (–õ–°)"
                 elif record.get('telegram_chat_link'): chat_display_info = f" (–∏–∑ <a href=\"{record['telegram_chat_link']}\">{chat_title_esc}</a>)"
                 else: chat_display_info = f" (–≤ '{chat_title_esc}')"
            response_lines.append(f"  <code>{i+1:2}.</code> –í–µ—Ä—Å–∏—è <b>{record['version']:.1f}</b>{chat_display_info}")
        await message.reply("\n".join(response_lines), parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Error in /user_top_versions for target {target_user_id} by {calling_user.id}: {e}", exc_info=True)
        await message.reply(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø –≤–µ—Ä—Å–∏–π –¥–ª—è {target_user_link}.")
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /user_top_versions –¥–ª—è {target_user_link} (–∑–∞–ø—Ä–æ—Å–∏–ª {get_user_mention_html(calling_user.id, calling_user.full_name, calling_user.username)}): <pre>{html.escape(str(e))}</pre>")

# === –ö–æ–Ω–µ—Ü –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ ===

if __name__ == '__main__':
    async def main_runner():
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            await dp.start_polling(bot)
        except (KeyboardInterrupt, SystemExit):
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é (KeyboardInterrupt/SystemExit).")
        except Exception as e_run:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ/—Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e_run}", exc_info=True)
        finally:
            logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            if scheduler.running:
                scheduler.shutdown(wait=False)
                logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            if bot: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                try:
                    logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ (–∏–∑ main_runner.finally)...")
                    await bot.close()
                    # –ú–µ—Ç–æ–¥ close() –æ–±—ã—á–Ω–æ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–µ–Ω, —Ç.–µ. –µ–≥–æ –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.
                    logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ (–∏–∑ main_runner.finally).")
                except Exception as e_bot_close:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ bot.close() –≤ main_runner.finally: {e_bot_close}", exc_info=True)
            logger.info("–ë–æ—Ç –∏ —Ä–µ—Å—É—Ä—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–∏–∑ main_runner).")

    asyncio.run(main_runner())
