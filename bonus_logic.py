# bonus_logic.py
import asyncio
import html
import random
from datetime import datetime, timedelta, timezone as dt_timezone
from typing import Optional, List, Dict, Any

from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import Message
from pytz import timezone as pytz_timezone
import logging
from achievements_logic import check_and_grant_achievements

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
from config import Config
import database
from utils import get_user_mention_html, send_telegram_log

bonus_router = Router()
logger = logging.getLogger(__name__)

# === –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π ===

@bonus_router.message(Command("bonus", ignore_case=True)) # –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∞–ª–∏–∞—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ Config
async def cmd_get_bonus_multiplier(message: Message, bot: Bot):
    if not message.from_user:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = message.from_user.id
    chat_id = message.chat.id
    user_link = get_user_mention_html(user_id, message.from_user.full_name, message.from_user.username)
    current_time_utc = datetime.now(dt_timezone.utc)
    local_tz = pytz_timezone(Config.TIMEZONE)

    reply_text_parts: List[str] = []
    used_extra_attempt_this_time = False
    can_claim_bonus_due_to_extra_attempt = False

    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (–∏–∑ —Ä—É–ª–µ—Ç–∫–∏ –∏–ª–∏ –ö–£–ü–õ–ï–ù–ù–´–•)
        # –ü–æ–ª–µ 'extra_bonus_attempts' –≤ roulette_status —Ç–µ–ø–µ—Ä—å –æ–±—â–µ–µ
        user_roulette_status = await database.get_roulette_status(user_id, chat_id)
        
        available_extra_bonus_attempts = 0
        if user_roulette_status and user_roulette_status.get('extra_bonus_attempts', 0) > 0:
            available_extra_bonus_attempts = user_roulette_status['extra_bonus_attempts']

        if available_extra_bonus_attempts > 0:
            new_extra_attempts_count = available_extra_bonus_attempts - 1
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ extra_bonus_attempts –≤ roulette_status
            await database.update_roulette_status(user_id, chat_id, {'extra_bonus_attempts': new_extra_attempts_count})
            reply_text_parts.append(
                f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ <b>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /bonus</b> (–∫—É–ø–ª–µ–Ω–Ω–∞—è/–æ—Ç —Ä—É–ª–µ—Ç–∫–∏)! "
                f"–û—Å—Ç–∞–ª–æ—Å—å —Ç–∞–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫: {new_extra_attempts_count}."
            )
            used_extra_attempt_this_time = True
            can_claim_bonus_due_to_extra_attempt = True # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞, —Ç.–∫. —ç—Ç–æ –¥–æ–ø. –ø–æ–ø—ã—Ç–∫–∞
            logger.info(f"User {user_id} in chat {chat_id} used an extra /bonus attempt. Remaining: {new_extra_attempts_count}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∫—É–ª–¥–∞—É–Ω–∞, –ï–°–õ–ò –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ù–ï –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞
        can_claim_new_bonus_standard = True # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–æ–∂–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ—ã –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª—É—á–µ–Ω–∏–∏
        if not used_extra_attempt_this_time:
            last_global_reset_ts_utc = await database.get_setting_timestamp('last_global_bonus_multiplier_reset')
            if not last_global_reset_ts_utc: # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î
                logger.warning("'last_global_bonus_multiplier_reset' is not set in DB. User can claim bonus by default.")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ
                last_global_reset_ts_utc = current_time_utc - timedelta(days=(Config.BONUS_MULTIPLIER_COOLDOWN_DAYS * 2))
            
            user_bonus_status = await database.get_user_bonus_multiplier_status(user_id, chat_id)
            if user_bonus_status and user_bonus_status.get('last_claimed_timestamp'):
                # last_claimed_timestamp –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å aware datetime (UTC) –∏–∑ –ë–î
                last_claimed_ts_aware = user_bonus_status['last_claimed_timestamp']
                if last_claimed_ts_aware >= last_global_reset_ts_utc:
                    can_claim_new_bonus_standard = False # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∞–ª –±–æ–Ω—É—Å –≤ —Ç–µ–∫—É—â–µ–º –ø–µ—Ä–∏–æ–¥–µ

        # 3. –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –ò –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–æ–ø. –ø–æ–ø—ã—Ç–∫–∞ -> –æ—Ç–∫–∞–∑
        if not can_claim_new_bonus_standard and not can_claim_bonus_due_to_extra_attempt:
            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±—Ä–æ—Å–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∫–æ–¥ –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞)
            last_global_reset_ts_utc_for_msg = await database.get_setting_timestamp('last_global_bonus_multiplier_reset')
            if not last_global_reset_ts_utc_for_msg: # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—Å–µ –µ—â–µ –Ω–µ—Ç
                last_global_reset_ts_utc_for_msg = current_time_utc - timedelta(days=Config.BONUS_MULTIPLIER_COOLDOWN_DAYS * 2)

            effective_next_reset_utc = last_global_reset_ts_utc_for_msg
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞
            while effective_next_reset_utc <= current_time_utc:
                 effective_next_reset_utc += timedelta(days=Config.BONUS_MULTIPLIER_COOLDOWN_DAYS)
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —á–∞—Å—É —Å–±—Ä–æ—Å–∞ –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
            effective_next_reset_local = effective_next_reset_utc.astimezone(local_tz)
            reset_today_local_at_hour = effective_next_reset_local.replace(hour=Config.BONUS_MULTIPLIER_RESET_HOUR, minute=2, second=0, microsecond=0)

            next_reset_display_local: datetime
            if effective_next_reset_local.time() > reset_today_local_at_hour.time() and \
               effective_next_reset_local.date() == reset_today_local_at_hour.date(): # –ï—Å–ª–∏ —Å–±—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è, –Ω–æ —á–∞—Å —É–∂–µ –ø—Ä–æ—à–µ–ª
                 next_reset_display_local = reset_today_local_at_hour + timedelta(days=Config.BONUS_MULTIPLIER_COOLDOWN_DAYS)
            elif effective_next_reset_local.date() > reset_today_local_at_hour.date(): # –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å–±—Ä–æ—Å–∞ —É–∂–µ –≤ –±—É–¥—É—â–µ–º
                 next_reset_display_local = reset_today_local_at_hour.replace(day=effective_next_reset_local.day, month=effective_next_reset_local.month, year=effective_next_reset_local.year)
            else: # –°–±—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è, –∏ —á–∞—Å –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª, –∏–ª–∏ –¥–∞—Ç–∞ —Å–±—Ä–æ—Å–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                 next_reset_display_local = reset_today_local_at_hour
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ next_reset_display_local –≤—Å–µ–≥–¥–∞ –≤ –±—É–¥—É—â–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ current_time_utc
            while next_reset_display_local.astimezone(dt_timezone.utc) <= current_time_utc:
                 next_reset_display_local += timedelta(days=Config.BONUS_MULTIPLIER_COOLDOWN_DAYS)


            await message.reply(
                f"{user_link}, –≤—ã —É–∂–µ –∏—Å–ø—ã—Ç–∞–ª–∏ —É–¥–∞—á—É –Ω–∞ –±–æ–Ω—É—Å-–º–Ω–æ–∂–∏—Ç–µ–ª—å –≤ —Ç–µ–∫—É—â–µ–º {Config.BONUS_MULTIPLIER_COOLDOWN_DAYS}-–¥–Ω–µ–≤–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ. "
                f"–°–ª–µ–¥—É—é—â–∞—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ—Å–ª–µ {next_reset_display_local.strftime('%Y-%m-%d %H:%M %Z')}.",
                disable_web_page_preview=True
            )
            return
            
        # 4. –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å-–º–Ω–æ–∂–∏—Ç–µ–ª—è (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º –ò–õ–ò –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–æ–ø. –ø–æ–ø—ã—Ç–∫–∞)
        multipliers = [item[0] for item in Config.BONUS_MULTIPLIER_CHANCES]
        weights = [item[1] for item in Config.BONUS_MULTIPLIER_CHANCES]
        chosen_multiplier = random.choices(multipliers, weights=weights, k=1)[0]

        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞:
        # –ï—Å–ª–∏ —ç—Ç–æ –ù–ï –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º last_claimed_timestamp –Ω–∞ current_time_utc.
        # –ï—Å–ª–∏ —ç—Ç–æ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ø–æ–ø—ã—Ç–∫–∞, —Ç–æ last_claimed_timestamp –ù–ï —Ç—Ä–æ–≥–∞–µ–º (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ None),
        # —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –∫—É–ª–¥–∞—É–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π *–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π* –±–æ–Ω—É—Å.
        # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∏ —Ñ–ª–∞–≥ is_bonus_consumed (–Ω–∞ False) –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ.
        
        timestamp_to_set_for_this_bonus_claim: Optional[datetime] = None
        if not used_extra_attempt_this_time: # –≠—Ç–æ –±—ã–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π) –±–æ–Ω—É—Å
            timestamp_to_set_for_this_bonus_claim = current_time_utc
        else: # –≠—Ç–æ –±—ã–ª–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
            # –ù—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π last_claimed_timestamp, –µ—Å–ª–∏ –æ–Ω –±—ã–ª, —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–∏–æ–¥.
            # –ï—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ, —Ç–æ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º None.
            existing_bonus_status = await database.get_user_bonus_multiplier_status(user_id, chat_id)
            if existing_bonus_status and existing_bonus_status.get('last_claimed_timestamp'):
                timestamp_to_set_for_this_bonus_claim = existing_bonus_status['last_claimed_timestamp']
            # –ï—Å–ª–∏ existing_bonus_status is None –∏–ª–∏ —Ç–∞–º –Ω–µ—Ç last_claimed_timestamp, —Ç–æ timestamp_to_set_for_this_bonus_claim –æ—Å—Ç–∞–Ω–µ—Ç—Å—è None
            # —á—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ update_user_bonus_multiplier_status.
        
        await database.update_user_bonus_multiplier_status(
            user_id, chat_id, chosen_multiplier, 
            False, # is_bonus_consumed = False (–±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω, –Ω–æ –µ—â–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ /oneui)
            timestamp_to_set_for_this_bonus_claim 
        )

        reply_text_parts.append(f"üéâ {user_link}, –≤–∞–º –≤—ã–ø–∞–ª –±–æ–Ω—É—Å-–º–Ω–æ–∂–∏—Ç–µ–ª—å: <b>x{chosen_multiplier:.1f}</b>!")
        reply_text_parts.append("–û–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ –≤–∞—à–µ–º—É —Å–ª–µ–¥—É—é—â–µ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã /oneui –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

        if chosen_multiplier < 0: reply_text_parts.append("üò± –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π!")
        elif chosen_multiplier == 1.0: reply_text_parts.append("üòê –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å, —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç /oneui –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è.")
        elif chosen_multiplier == 0: reply_text_parts.append("ü§∑ –ú–Ω–æ–∂–∏—Ç–µ–ª—å x0.0... –≠—Ñ—Ñ–µ–∫—Ç –æ—Ç /oneui –±—É–¥–µ—Ç —Ä–∞–≤–µ–Ω –Ω—É–ª—é.")

        await message.reply("\n".join(reply_text_parts), parse_mode="HTML", disable_web_page_preview=True)

        chat_title_for_log = html.escape(message.chat.title or f"ChatID {chat_id}")
        log_action_type = "–ø–æ–ª—É—á–∏–ª (—Å –¥–æ–ø. –ø–æ–ø—ã—Ç–∫–∏)" if used_extra_attempt_this_time else "–ø–æ–ª—É—á–∏–ª"
        await send_telegram_log(bot, f"üéÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} {log_action_type} –±–æ–Ω—É—Å-–º–Ω–æ–∂–∏—Ç–µ–ª—å x{chosen_multiplier:.1f} –≤ —á–∞—Ç–µ \"{chat_title_for_log}\"")

        # --- –í–´–ó–û–í –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---
        await check_and_grant_achievements(
            user_id,
            chat_id,
            bot,
            bonus_multiplier_value=chosen_multiplier, # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è
            bonus_extra_attempts_total_count=(new_extra_attempts_count if used_extra_attempt_this_time else None), # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –¥–æ–ø. –ø–æ–ø—ã—Ç–∫–∞, –ø–µ—Ä–µ–¥–∞—Ç—å –∏—Ö —Ç–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ
            bonus_multiplier_zero_applied=(True if chosen_multiplier == 0 else False), # –î–ª—è "–≠—Ö–æ –ü—É—Å—Ç–æ—Ç—ã"
            bonus_multiplier_very_negative=(True if chosen_multiplier <= -1.0 else False) # –î–ª—è "–ü—Ä–æ–∫–ª—è—Ç–∏–µ –§–æ—Ä—Ç—É–Ω—ã"
        )
        # --- –ö–û–ù–ï–¶ –í–´–ó–û–í–ê –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---


    except Exception as e:
        logger.error(f"Error in /bonus command for {user_link} in chat {chat_id}: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        chat_title_display_exc = html.escape(message.chat.title or f"ID: {chat_id}")
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /bonus\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link} (ID: <code>{user_id}</code>)\n–ß–∞—Ç: {chat_title_display_exc} (ID: <code>{chat_id}</code>)\n–û—à–∏–±–∫–∞: <pre>{html.escape(str(e))}</pre>")


@bonus_router.message(Command("my_streak", "mystreak", "streak", ignore_case=True))
async def cmd_my_streak(message: Message, bot: Bot):
    if not message.from_user:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = message.from_user.id
    chat_id = message.chat.id # <--- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
    user_link = get_user_mention_html(user_id, message.from_user.full_name, message.from_user.username)

    try:
        # –¢–µ–ø–µ—Ä—å chat_id –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∑–¥–µ—Å—å
        streak_data = await database.get_user_daily_streak(user_id, chat_id) 
        current_streak = 0
        if streak_data and streak_data.get('last_streak_check_date'):
            today_local_date = datetime.now(pytz_timezone(Config.TIMEZONE)).date()
            last_check_date = streak_data['last_streak_check_date']

            if last_check_date == today_local_date or last_check_date == (today_local_date - timedelta(days=1)):
                 current_streak = streak_data.get('current_streak', 0)
            # –ï—Å–ª–∏ last_check_date < (today_local_date - timedelta(days=1)), —Å—Ç—Ä–∏–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–µ—Ä–≤–∞–Ω–Ω—ã–º (current_streak = 0)
            
        response_parts = [f"üî• {user_link}, –≤–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: <b>{current_streak}</b> –¥–Ω–µ–π."]

        if current_streak > 0:
            next_goal_info = None
            for goal in Config.DAILY_STREAKS_CONFIG:
                if goal['target_days'] > current_streak:
                    next_goal_info = goal
                    break
            if next_goal_info:
                target_days_for_goal = next_goal_info['target_days']
                goal_name = next_goal_info['name']
                progress_show_within = next_goal_info.get('progress_show_within_days', 3) # –í–∞—à –¥–µ—Ñ–æ–ª—Ç
                if (target_days_for_goal - current_streak) <= progress_show_within:
                    max_bar_length_chars = 10 
                    filled_chars_visual = int(round((current_streak / target_days_for_goal) * max_bar_length_chars)) if target_days_for_goal > 0 else 0
                    empty_chars_visual = max_bar_length_chars - filled_chars_visual
                    progress_bar_str = Config.PROGRESS_BAR_FILLED_CHAR * filled_chars_visual + \
                                       Config.PROGRESS_BAR_EMPTY_CHAR * empty_chars_visual
                    response_parts.append(f"{goal_name}: {current_streak}/{target_days_for_goal} –¥–Ω–µ–π [{progress_bar_str}]")
                else: 
                    response_parts.append(f"üéØ –°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å: {goal_name} ({target_days_for_goal} –¥–Ω–µ–π).")
            elif Config.DAILY_STREAKS_CONFIG and current_streak >= Config.DAILY_STREAKS_CONFIG[-1]['target_days']:
                 response_parts.append(f"üëë –í—ã {Config.DAILY_STREAKS_CONFIG[-1]['name']}! –í–∞—à –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å—Ç—Ä–∏–∫: {current_streak} –¥–Ω–µ–π. –ù–æ–≤—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –µ—â–µ –Ω–µ –æ–±—ä—è–≤–ª–µ–Ω—ã!")
        else: 
            response_parts.append("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–∏–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–µ–≥–æ–¥–Ω—è —Å –∫–æ–º–∞–Ω–¥—ã /oneui!")

        await message.reply("\n".join(response_parts), parse_mode="HTML", disable_web_page_preview=True)

        # --- –í–´–ó–û–í –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---
        # chat_id —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å –∏ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        await check_and_grant_achievements(
            user_id,
            chat_id, 
            bot,
            current_daily_streak=current_streak 
        )
        # --- –ö–û–ù–ï–¶ –í–´–ó–û–í–ê –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô --
        
    except Exception as e:
        logger.error(f"Error in /my_streak for {user_link}: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∏–∫–µ.")
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /my_streak –¥–ª—è {user_link}: <pre>{html.escape(str(e))}</pre>")


def setup_bonus_handlers(dp: Router): # dp –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º –∏–ª–∏ —Ä–æ—É—Ç–µ—Ä–æ–º, –∫—É–¥–∞ –≤–∫–ª—é—á–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–µ
    dp.include_router(bonus_router)
    logger.info("–ë–æ–Ω—É—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
