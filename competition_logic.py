# competition_logic.py
import asyncio
import html
from datetime import datetime, date as DDate
from typing import Optional

from aiogram import Router, Bot, F
from aiogram.filters import Command, CommandObject, Filter
from aiogram.types import Message
from pytz import timezone as pytz_timezone

import database
from config import Config
from utils import get_user_mention_html, send_telegram_log

competition_router = Router()

class AdminFilter(Filter):
    async def __call__(self, message: Message) -> bool:
        if not message.from_user:
            return False
        return message.from_user.id == Config.ADMIN_ID


@competition_router.message(Command("start_family_competition", ignore_case=True), AdminFilter())
async def cmd_start_family_competition(message: Message, bot: Bot):
    if not message.from_user:
        return await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    admin_link = get_user_mention_html(message.from_user.id, message.from_user.full_name, message.from_user.username)

    try:
        active_comp = await database.get_active_family_competition()
        if active_comp:
            end_ts_value = active_comp.get('end_ts')
            comp_end_local_str = "–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
            if end_ts_value:
                comp_end_local_str = end_ts_value.astimezone(pytz_timezone(Config.TIMEZONE)).strftime('%Y-%m-%d %H:%M:%S %Z')
            return await message.reply(
                f"–ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —É–∂–µ –∏–¥–µ—Ç! ID: {active_comp['competition_id']}.\n"
                f"–ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {comp_end_local_str}"
            )

        competition_id = await database.create_family_competition(message.from_user.id, Config.COMPETITION_DURATION_DAYS)
        if competition_id:
            comp_details = None
            conn = None
            try:
                conn = await database.get_connection()
                comp_details_row = await conn.fetchrow("SELECT start_ts, end_ts FROM family_competitions WHERE competition_id = $1", competition_id)
                if comp_details_row: comp_details = dict(comp_details_row)
            except Exception as e_db:
                print(f"Error fetching new competition details by ID {competition_id}: {e_db}")
                await send_telegram_log(bot, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è {competition_id} –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: <pre>{html.escape(str(e_db))}</pre>")
            finally:
                if conn and not conn.is_closed(): await conn.close()

            if comp_details and comp_details.get('start_ts') and comp_details.get('end_ts'):
                start_local = comp_details['start_ts'].astimezone(pytz_timezone(Config.TIMEZONE))
                end_local = comp_details['end_ts'].astimezone(pytz_timezone(Config.TIMEZONE))
                reply_text = (
                    f"üèÜ –ù–æ–≤–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —Å–µ–º–µ–π –∑–∞–ø—É—â–µ–Ω–Ω–æ!\n"
                    f"ID –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è: <code>{competition_id}</code>\n"
                    f"–ù–∞—á–∞–ª–æ: {start_local.strftime('%Y-%m-%d %H:%M:%S %Z')}\n"
                    f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_local.strftime('%Y-%m-%d %H:%M:%S %Z')}\n"
                    f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {Config.COMPETITION_DURATION_DAYS} –¥–Ω—è(–¥–Ω–µ–π).\n"
                    f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ –ø–æ—Å–ª–µ {Config.RESET_HOUR}:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ {Config.TIMEZONE}."
                )
                await message.reply(reply_text)
                await send_telegram_log(bot, f"üöÄ –ê–¥–º–∏–Ω {admin_link} –∑–∞–ø—É—Å—Ç–∏–ª —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —Å–µ–º–µ–π ID: {competition_id}.")
            else:
                await message.reply(f"–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ (ID: {competition_id}), –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –ø–æ–ª–Ω—ã–µ –¥–µ—Ç–∞–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∂–µ.")
                await send_telegram_log(bot, f"‚ö†Ô∏è –ê–¥–º–∏–Ω {admin_link} –∑–∞–ø—É—Å—Ç–∏–ª —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ ID: {competition_id}, –Ω–æ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∞–Ω–æ–Ω—Å–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.")
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–¥–Ω–æ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ, –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ë–î.")
            await send_telegram_log(bot, f"üî¥ –ê–¥–º–∏–Ω {admin_link} –Ω–µ —Å–º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∞ –ë–î.")
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.")
        await send_telegram_log(bot, f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /start_family_competition (–∞–¥–º–∏–Ω {admin_link}): <pre>{html.escape(str(e))}</pre>")


@competition_router.message(Command("family_competition_status", "fc_status", ignore_case=True))
async def cmd_family_competition_status(message: Message, bot: Bot):
    user_mention = ""
    if message.from_user:
        user_mention = get_user_mention_html(message.from_user.id, message.from_user.full_name, message.from_user.username)

    try:
        active_comp = await database.get_active_family_competition()
        status_message = ""
        comp_to_display_id = None
        header_leaderboard = ""

        if not active_comp:
            last_completed_unrewarded = await database.get_latest_completed_unrewarded_competition()
            if last_completed_unrewarded:
                comp_to_display = last_completed_unrewarded
                comp_to_display_id = comp_to_display.get('competition_id')
                end_ts_value = comp_to_display.get('end_ts')
                end_local_str = "–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
                if end_ts_value:
                     end_local_str = end_ts_value.astimezone(pytz_timezone(Config.TIMEZONE)).strftime('%Y-%m-%d %H:%M')
                status_message = (
                    f"üèÅ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ ID <code>{comp_to_display_id}</code> –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å "
                    f"{end_local_str}, "
                    f"–æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –∏ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ.\n"
                )
                header_leaderboard = "\n<b>–õ–∏–¥–µ—Ä—ã –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</b>\n"
            else:
                return await message.reply("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π —Å–µ–º–µ–π –Ω–µ—Ç.")
        else:
            comp_to_display = active_comp
            comp_to_display_id = comp_to_display.get('competition_id')
            start_ts_value = comp_to_display.get('start_ts')
            end_ts_value = comp_to_display.get('end_ts')

            start_local_str = "–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
            end_local_str = "–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
            time_left_str = "–í—Ä–µ–º—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ."

            if start_ts_value:
                start_local_str = start_ts_value.astimezone(pytz_timezone(Config.TIMEZONE)).strftime('%Y-%m-%d %H:%M:%S %Z')
            if end_ts_value:
                end_local_obj = end_ts_value.astimezone(pytz_timezone(Config.TIMEZONE))
                end_local_str = end_local_obj.strftime('%Y-%m-%d %H:%M:%S %Z')
                now_local = datetime.now(pytz_timezone(Config.TIMEZONE))
                time_left = end_local_obj - now_local
                if time_left.total_seconds() > 0:
                    days = time_left.days
                    hours, remainder = divmod(time_left.seconds, 3600)
                    minutes, _ = divmod(remainder, 60)
                    time_left_str = f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {days} –¥. {hours} —á. {minutes} –º–∏–Ω.\n"
                else:
                    time_left_str = "–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n"
            status_message = (
                f"üèÜ –ò–¥–µ—Ç —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —Å–µ–º–µ–π! ID: <code>{comp_to_display_id}</code>\n"
                f"–ù–∞—á–∞–ª–æ—Å—å: {start_local_str}\n"
                f"–ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {end_local_str}\n"
                f"{time_left_str}"
            )
            header_leaderboard = "\n<b>–¢–µ–∫—É—â–∏–µ –ª–∏–¥–µ—Ä—ã (—Ç–æ–ø-10):</b>\n" # –£—Ç–æ—á–Ω–∏–ª–∏, —á—Ç–æ —ç—Ç–æ —Ç–æ–ø-10 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        if comp_to_display_id:
            leaderboard = await database.get_competition_leaderboard(comp_to_display_id, limit=10)
            if leaderboard:
                status_message += header_leaderboard
                for i, entry in enumerate(leaderboard):
                    status_message += f"{i+1}. <b>{html.escape(entry['family_name'])}</b> - {entry['total_score']:.1f} –æ—á–∫–æ–≤\n"
            else:
                status_message += "–î–∞–Ω–Ω—ã—Ö –æ —Å—á–µ—Ç–µ —Å–µ–º–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç."
        elif not active_comp and not last_completed_unrewarded:
            pass
        else:
            status_message += "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏–¥–µ—Ä–æ–≤."

        await message.reply(status_message, parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.")
        requested_by = f" (–∑–∞–ø—Ä–æ—Å–∏–ª {user_mention})" if user_mention else ""
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /fc_status{requested_by}: <pre>{html.escape(str(e))}</pre>")


@competition_router.message(Command("top_competition", "—Ç–æ–ø_—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è", ignore_case=True))
async def cmd_top_competition_families(message: Message, bot: Bot):
    user_mention = ""
    if message.from_user:
        user_mention = get_user_mention_html(message.from_user.id, message.from_user.full_name, message.from_user.username)

    try:
        active_comp = await database.get_active_family_competition()
        if not active_comp:
            return await message.reply("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è —Å–µ–º–µ–π, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø.")

        competition_id = active_comp['competition_id']
        comp_name_str = f"—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è ID <code>{competition_id}</code>" # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è

        leaderboard = await database.get_competition_leaderboard(competition_id, limit=5)

        if not leaderboard:
            return await message.reply(f"–í —Ç–µ–∫—É—â–µ–º {comp_name_str} –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—á–µ—Ç–µ —Å–µ–º–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø–∞.")

        response_lines = [f"<b>üèÜ –¢–æ–ø-5 —Å–µ–º–µ–π –≤ —Ç–µ–∫—É—â–µ–º {comp_name_str}:</b>"]
        for i, entry in enumerate(leaderboard):
            response_lines.append(f"{i+1}. <b>{html.escape(entry['family_name'])}</b> - {entry['total_score']:.1f} –æ—á–∫–æ–≤")

        await message.reply("\n".join(response_lines), parse_mode="HTML", disable_web_page_preview=True)

    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ —Å–µ–º–µ–π —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.")
        requested_by = f" (–∑–∞–ø—Ä–æ—Å–∏–ª {user_mention})" if user_mention else ""
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /top_competition{requested_by}: <pre>{html.escape(str(e))}</pre>")


def setup_competition_handlers(dp):
    dp.include_router(competition_router)
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")