# roulette_logic.py
import asyncio
import html
import random
from datetime import datetime, timedelta, timezone as dt_timezone, date as DDate
from typing import Optional, Tuple, Dict, Any, List
from pytz import timezone as pytz_timezone # –£–±–µ–¥–∏—Å—å, —á—Ç–æ pytz —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import Message, Chat # Chat –¥–æ–±–∞–≤–ª–µ–Ω
import asyncpg 
import logging

try:
    from config import Config
except ImportError:
    raise ImportError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Config –≤ roulette_logic.py")

try:
    import database
    # utils —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å get_current_price
    from utils import get_user_mention_html, send_telegram_log, get_current_price 
except ImportError:
    raise ImportError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å database –∏–ª–∏ utils (—Å get_current_price) –≤ roulette_logic.py")

try:
    from phone_logic import get_active_user_phone_bonuses
except ImportError:
    logging.warning("–ó–ê–ì–õ–£–®–ö–ê: phone_logic.py –∏–ª–∏ get_active_user_phone_bonuses –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                    "–ë–æ–Ω—É—Å –æ—Ç —á–µ—Ö–ª–∞ –Ω–∞ OneCoin –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
    async def get_active_user_phone_bonuses(user_id: int) -> dict:
        return {}

# >>>>> –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç –∏ —Å–æ–∑–¥–∞–Ω–∏–µ PHONE_MODELS –∏ PHONE_COLORS <<<<<
try:
    from phone_data import PHONE_MODELS as PHONE_MODELS_LIST, PHONE_COLORS
    PHONE_MODELS: Dict[str, Dict[str, Any]] = {
        phone_info["key"]: phone_info for phone_info in PHONE_MODELS_LIST
    }
    if not PHONE_COLORS: # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ PHONE_COLORS –ø—É—Å—Ç
        PHONE_COLORS = ["–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π"] # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
except ImportError:
    logging.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PHONE_MODELS_LIST –∏–ª–∏ PHONE_COLORS –∏–∑ phone_data.py!")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —É–ø–∞–ª, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –±—É–¥–µ—Ç —Å–ª–æ–º–∞–Ω
    PHONE_MODELS = {}
    PHONE_COLORS = ["–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π"]


roulette_router = Router()
logger = logging.getLogger(__name__)

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥
user_roulette_locks: Dict[Tuple[int, int], asyncio.Lock] = {} 
roulette_locks_lock = asyncio.Lock()

async def get_roulette_lock(user_id: int, chat_id: int) -> asyncio.Lock:
    key = (user_id, chat_id)
    async with roulette_locks_lock:
        if key not in user_roulette_locks:
            user_roulette_locks[key] = asyncio.Lock()
        return user_roulette_locks[key]

# >>>>> –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è parse_memory_string_to_gb <<<<<
# –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ utils.py, –µ—Å–ª–∏ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–¥–µ-—Ç–æ –µ—â–µ.
# –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è—é –∑–¥–µ—Å—å.
def parse_memory_string_to_gb(memory_str: str) -> int:
    if not isinstance(memory_str, str):
        logger.warning(f"parse_memory_string_to_gb: –ø–æ–ª—É—á–µ–Ω–∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞: {memory_str}")
        return 128 # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    memory_str_upper = memory_str.upper().strip()
    num_val = 0
    num_part = ""
    try:
        for char_mem in memory_str_upper:
            if char_mem.isdigit() or char_mem == '.':
                num_part += char_mem
            else:
                if num_part: break
        
        if not num_part:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø–∞–º—è—Ç–∏: '{memory_str}'. –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ 128GB.")
            return 128

        value = float(num_part)
        if 'TB' in memory_str_upper:
            num_val = int(value * 1024)
        elif 'GB' in memory_str_upper:
            num_val = int(value)
        else: 
            num_val = int(value) # –ï—Å–ª–∏ –Ω–µ—Ç –µ–¥–∏–Ω–∏—Ü, —Å—á–∏—Ç–∞–µ–º GB
            
    except ValueError:
        logger.warning(f"ValueError –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–∞–º—è—Ç–∏ '{memory_str}'. –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ 128GB.")
        return 128 
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–∞–º—è—Ç–∏ '{memory_str}': {e}. –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ 128GB.")
        return 128
    
    return num_val if num_val > 0 else 128


async def ensure_user_oneui_record_for_roulette(
    user_id: int, chat_id: int, user_tg_username: Optional[str],
    full_name_from_msg: Optional[str], message_chat_obj: Chat, # –ò–∑–º–µ–Ω–µ–Ω —Ç–∏–ø –Ω–∞ Chat
    bot_instance: Bot
):
    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ message_chat_obj —Ç–µ–ø–µ—Ä—å Chat)
    chat_title_for_db: Optional[str] = None
    telegram_chat_public_link: Optional[str] = None

    if message_chat_obj.type == "private": # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_chat_obj.type
        chat_title_for_db = f"–õ–∏—á–Ω—ã–π —á–∞—Ç ({user_id})"
    else:
        chat_title_for_db = message_chat_obj.title or f"–ß–∞—Ç {chat_id}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_chat_obj.title
        if message_chat_obj.username: # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_chat_obj.username
            telegram_chat_public_link = f"https://t.me/{message_chat_obj.username}"
        else:
            try:
                # get_chat —É–∂–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ message_chat_obj —ç—Ç–æ —É–∂–µ Chat
                if message_chat_obj.title: chat_title_for_db = message_chat_obj.title
                if hasattr(message_chat_obj, 'invite_link') and message_chat_obj.invite_link: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ invite_link
                     telegram_chat_public_link = message_chat_obj.invite_link
            except Exception as e_chat_info: # –•–æ—Ç—è –∑–¥–µ—Å—å –æ—à–∏–±–æ–∫ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ —É–∂–µ
                logger.warning(f"Roulette (ensure_user_oneui): Could not get chat_info for {chat_id} from Chat object: {e_chat_info}")
    try:
        current_version = await database.get_user_version(user_id, chat_id)
        await database.update_user_version(
            user_id, chat_id, new_version=current_version,
            username=user_tg_username, full_name=full_name_from_msg,
            chat_title=chat_title_for_db, telegram_chat_link=telegram_chat_public_link,
            set_last_used_time_utc=None, force_update_last_used=False
        )
        logger.info(f"Roulette: Ensured/updated user_oneui record for user {user_id} in chat {chat_id}.")
    except Exception as e:
        logger.error(f"Roulette: Failed to ensure/update user_oneui record for user {user_id} in chat {chat_id}: {e}", exc_info=True)
        raise

@roulette_router.message(Command(*Config.ROULETTE_COMMAND_ALIASES, ignore_case=True))
async def cmd_spin_roulette(message: Message, bot: Bot):
    if not message.from_user:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = message.from_user.id
    chat_id = message.chat.id
    user_tg_username = message.from_user.username
    full_name_from_msg = message.from_user.full_name
    user_link = get_user_mention_html(user_id, full_name_from_msg, user_tg_username)
    current_time_utc = datetime.now(dt_timezone.utc)
    local_tz = pytz_timezone(Config.TIMEZONE) 

    try:
        await ensure_user_oneui_record_for_roulette(
            user_id, chat_id, user_tg_username, full_name_from_msg, message.chat, bot
        )
    except Exception as e_ensure:
        logger.error(f"Roulette: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ ensure_user_oneui_record –¥–ª—è {user_id}@{chat_id}: {e_ensure}", exc_info=True)
        await message.reply("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ä—É–ª–µ—Ç–∫–µ (R00).")
        await send_telegram_log(bot, f"üî¥ R00 (ensure_user_oneui) –¥–ª—è {user_link} (<code>{user_id}@{chat_id}</code>): <pre>{html.escape(str(e_ensure))}</pre>")
        return

    roulette_lock = await get_roulette_lock(user_id, chat_id)
    async with roulette_lock:
        try:
            roulette_status_current = await database.get_roulette_status(user_id, chat_id)
            can_spin_now = False
            used_purchased_spin_this_time = False
            
            available_purchased_spins = roulette_status_current.get('extra_roulette_spins', 0) if roulette_status_current else 0

            if available_purchased_spins > 0:
                # –õ–æ–≥–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏–Ω–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ)
                new_purchased_spins_count = available_purchased_spins - 1
                await database.update_roulette_status(user_id, chat_id, {'extra_roulette_spins': new_purchased_spins_count})
                await message.reply(f"üåÄ {user_link}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è <b>–∫—É–ø–ª–µ–Ω–Ω—ã–π —Å–ø–∏–Ω —Ä—É–ª–µ—Ç–∫–∏</b>! –û—Å—Ç–∞–ª–æ—Å—å: {new_purchased_spins_count}.")
                can_spin_now = True
                used_purchased_spin_this_time = True
                logger.info(f"User {user_id}@{chat_id} used purchased roulette spin. Remaining: {new_purchased_spins_count}")
            
            if not can_spin_now: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
                # >>>>> –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –ü–†–û–í–ï–†–ö–ò –ö–£–õ–î–ê–£–ù–ê –†–£–õ–ï–¢–ö–ò (–∫–∞–∫ –≤ /bonus) <<<<<
                roulette_global_reset_key = 'last_global_roulette_period_reset'
                last_global_reset_ts_utc = await database.get_setting_timestamp(roulette_global_reset_key)

                if not last_global_reset_ts_utc: 
                    logger.warning(f"'{roulette_global_reset_key}' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ë–î. –†—É–ª–µ—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è {user_id}@{chat_id}.")
                    last_global_reset_ts_utc = current_time_utc - timedelta(days=(Config.ROULETTE_GLOBAL_COOLDOWN_DAYS * 2))
                
                last_spin_in_chat_ts_utc: Optional[datetime] = None
                if roulette_status_current and roulette_status_current.get('last_roulette_spin_timestamp'):
                    last_spin_in_chat_ts_utc = roulette_status_current['last_roulette_spin_timestamp']
                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Ä–µ–º—è aware UTC
                    if last_spin_in_chat_ts_utc.tzinfo is None:
                        last_spin_in_chat_ts_utc = last_spin_in_chat_ts_utc.replace(tzinfo=dt_timezone.utc)
                    else:
                        last_spin_in_chat_ts_utc = last_spin_in_chat_ts_utc.astimezone(dt_timezone.utc)
                
                if last_spin_in_chat_ts_utc and last_spin_in_chat_ts_utc >= last_global_reset_ts_utc:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∫—Ä—É—Ç–∏–ª –≤ —ç—Ç–æ–º —á–∞—Ç–µ –≤ —Ç–µ–∫—É—â–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
                    can_spin_now = False
                    
                    # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    effective_next_reset_utc = last_global_reset_ts_utc
                    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞, –¥–æ–±–∞–≤–ª—è—è –ø–µ—Ä–∏–æ–¥—ã –∫—É–ª–¥–∞—É–Ω–∞
                    while effective_next_reset_utc <= current_time_utc: # <= —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —É–∂–µ –Ω–∞—á–∞–ª—Å—è
                         effective_next_reset_utc += timedelta(days=Config.ROULETTE_GLOBAL_COOLDOWN_DAYS)
                    
                    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —á–∞—Å—É —Å–±—Ä–æ—Å–∞ –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
                    # –ú–∏–Ω—É—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –º–∏–Ω—É—Ç –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, —ç—Ç–æ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ
                    next_reset_display_local = effective_next_reset_utc.astimezone(local_tz).replace(
                        hour=Config.RESET_HOUR, minute=3, second=0, microsecond=0 
                    )
                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –±—É–¥—É—â–µ–º
                    while next_reset_display_local.astimezone(dt_timezone.utc) <= current_time_utc:
                        next_reset_display_local += timedelta(days=Config.ROULETTE_GLOBAL_COOLDOWN_DAYS) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–∑–º–æ–∂–Ω–æ–º—É —Å–±—Ä–æ—Å—É

                    await message.reply(
                        f"{user_link}, –≤—ã —É–∂–µ –∏—Å–ø—ã—Ç–∞–ª–∏ —É–¥–∞—á—É –≤ —ç—Ç–æ–º —á–∞—Ç–µ –≤ —Ç–µ–∫—É—â–µ–º "
                        f"{Config.ROULETTE_GLOBAL_COOLDOWN_DAYS}-–¥–Ω–µ–≤–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ. "
                        f"–°–ª–µ–¥—É—é—â–∞—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ—Å–ª–µ "
                        f"{next_reset_display_local.strftime('%Y-%m-%d %H:%M %Z')}.",
                        disable_web_page_preview=True
                    )
                    return # –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –∫—Ä—É—Ç–∏—Ç—å –Ω–µ–ª—å–∑—è
                else: # –ú–æ–∂–Ω–æ –∫—Ä—É—Ç–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ
                    can_spin_now = True
                # >>>>> –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –ü–†–û–í–ï–†–ö–ò –ö–£–õ–î–ê–£–ù–ê –†–£–õ–ï–¢–ö–ò <<<<<
            
            if not can_spin_now: 
                 logger.warning(f"Roulette: Logic error (R08), user {user_id}@{chat_id} cannot spin but should.")
                 await message.reply("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–ø–∏–Ω–∞ (R08).")
                 return

            # --- –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ cmd_spin_roulette (–≤—ã–±–æ—Ä –ø—Ä–∏–∑–∞, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è) ---
            # –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ –≤ –º–æ–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –¥–ª—è roulette_logic.py
            # (–Ω–∞—á–∏–Ω–∞—è —Å processing_message = await message.reply(...))
            # –í–∞–∂–Ω–æ, —á—Ç–æ –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω, –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è 
            # 'last_roulette_spin_timestamp' –≤ roulette_status.

            processing_message = await message.reply(f"üé≤ {user_link} –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä—É–ª–µ—Ç–∫—É —É–¥–∞—á–∏... –ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≤—ã–ø–∞–¥–µ—Ç!",
             disable_web_page_preview=True 
            )
            await asyncio.sleep(random.uniform(0.8, 2.0))

            prize_category, prize_value, prize_log_desc_from_determine = await _determine_prize()
            
            response_text_prize = await _apply_prize_and_get_message(
                user_id, chat_id, prize_category, prize_value, 
                user_link, bot,
                current_time_utc,      
                user_tg_username,      
                full_name_from_msg,    
                message.chat           
            )

            final_response_text = f"üéâ –í—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n{response_text_prize}"
            try:
                await processing_message.edit_text(final_response_text, parse_mode="HTML", disable_web_page_preview=True)
            except Exception:
                await message.reply(final_response_text, parse_mode="HTML", disable_web_page_preview=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ *–±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ* —Å–ø–∏–Ω–∞, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ–Ω –∏ –æ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º
            if not used_purchased_spin_this_time and \
               "–∫–æ–¥ R05" not in response_text_prize and \
               "–∫–æ–¥ R00" not in response_text_prize: 
                 await database.update_roulette_status(user_id, chat_id, {'last_roulette_spin_timestamp': current_time_utc})
                 logger.info(f"Roulette: FREE spin time updated for user {user_id}@{chat_id}.")
            
            chat_title_for_log_final = html.escape(message.chat.title or f"ChatID {chat_id}")
            spin_type_log = "–∫—É–ø–ª–µ–Ω–Ω—ã–π" if used_purchased_spin_this_time else "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π"
            log_prize_description = prize_log_desc_from_determine if prize_log_desc_from_determine else prize_category
            await send_telegram_log(bot, f"üé∞ –†—É–ª–µ—Ç–∫–∞ ({spin_type_log} —Å–ø–∏–Ω) –¥–ª—è {user_link} –≤ —á–∞—Ç–µ \"{chat_title_for_log_final}\": –≤—ã–ø–∞–ª –ø—Ä–∏–∑ \"{log_prize_description}\".")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ —Ä—É–ª–µ—Ç–∫–∏ –¥–ª—è {user_link} –≤ —á–∞—Ç–µ {chat_id}: {e}", exc_info=True)
            await message.reply("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Ä—É–ª–µ—Ç–∫–æ–π! (R07).")
            await send_telegram_log(bot, f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ R07 –≤ —Ä—É–ª–µ—Ç–∫–µ –¥–ª—è {user_link} (—á–∞—Ç <code>{chat_id}</code>): <pre>{html.escape(str(e))}</pre>")

# setup_roulette_handlers –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def setup_roulette_handlers(dp_main: Router):
    dp_main.include_router(roulette_router)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ä—É–ª–µ—Ç–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")


# >>>>> –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è _determine_prize <<<<<
async def _determine_prize() -> Tuple[str, Any, Optional[str]]:
    categories = [item[0] for item in Config.ROULETTE_PRIZE_CATEGORIES_CHANCES]
    weights = [item[1] for item in Config.ROULETTE_PRIZE_CATEGORIES_CHANCES]
    
    if not categories or not weights or sum(weights) <= 0:
        logger.error("ROULETTE (_determine_prize): –û—à–∏–±–∫–∞ –≤ ROULETTE_PRIZE_CATEGORIES_CHANCES.")
        return "onecoin_reward", 10, "10 OneCoin(–æ–≤) (fallback –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞)"

    chosen_category = random.choices(categories, weights=weights, k=1)[0]

    prize_value: Any = None
    prize_description: Optional[str] = None 

    if chosen_category == "onecoin_reward":
        # ... (—Ç–≤–æ—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ OneCoin –Ω–∞–≥—Ä–∞–¥—ã, –æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞)
        chosen_range_config = random.choices(Config.ROULETTE_ONECOIN_PRIZES, weights=[item[1] for item in Config.ROULETTE_ONECOIN_PRIZES], k=1)[0]
        (min_coins, max_coins), _ = chosen_range_config
        prize_value = random.randint(min_coins, max_coins)
        prize_description = f"{prize_value} OneCoin(–æ–≤)"
    elif chosen_category == "extra_bonus_attempt":
        prize_value = 1
        prize_description = "1 –¥–æ–ø. –ø–æ–ø—ã—Ç–∫–∞ /bonus"
    elif chosen_category == "extra_oneui_attempt":
        prize_value = 1
        prize_description = "1 –¥–æ–ø. –ø–æ–ø—ã—Ç–∫–∞ /oneui"
    elif chosen_category == "bonus_multiplier_boost":
        # ... (—Ç–≤–æ—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –±—É—Å—Ç–∞, –æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞)
        chosen_boost_config = random.choices(Config.ROULETTE_BONUS_MULTIPLIER_BOOSTS, weights=[item[1] for item in Config.ROULETTE_BONUS_MULTIPLIER_BOOSTS], k=1)[0]
        boost_factor, _ = chosen_boost_config
        prize_value = boost_factor
        prize_description = f"–£—Å–∏–ª–µ–Ω–∏–µ x{prize_value:.1f} –¥–ª—è /bonus"
    elif chosen_category == "negative_protection_charge":
        prize_value = 1
        prize_description = "1 –∑–∞—Ä—è–¥ –∑–∞—â–∏—Ç—ã /oneui"
    
    # +++ –í–ê–ñ–ù–û: –î–û–ë–ê–í–õ–ï–ù elif –î–õ–Ø phone_reward +++
    elif chosen_category == "phone_reward":
        prize_value = "PHONE_PLACEHOLDER" # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤—ã–±–µ—Ä–µ—Ç—Å—è –ø–æ–∑–∂–µ
        prize_description = "–¢–µ–ª–µ—Ñ–æ–Ω!" # –≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–π–¥–µ—Ç –≤ –æ–±—â–∏–π –ª–æ–≥ —Ä—É–ª–µ—Ç–∫–∏
    
    else: 
        # –≠—Ç–æ—Ç else —Ç–µ–ø–µ—Ä—å –¥–ª—è –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –ø–æ—è–≤—è—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        logger.error(f"_determine_prize: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∏–∑–∞ —Ä—É–ª–µ—Ç–∫–∏: {chosen_category}. –í—ã–¥–∞—é fallback OneCoin.")
        chosen_category = "onecoin_reward" 
        prize_value = 10 
        prize_description = f"{prize_value} OneCoin(–æ–≤) (fallback –∏–∑-–∑–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"

    return chosen_category, prize_value, prize_description


# >>>>> –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ _apply_prize_and_get_message <<<<<
# >>>>> –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ _apply_prize_and_get_message <<<<<
async def _apply_prize_and_get_message(
    user_id: int,
    chat_id: int,
    prize_category: str,
    prize_value: Any,
    user_mention: str,
    bot_instance: Bot,
    current_time_utc_param: datetime,
    user_tg_username_param: Optional[str],
    user_full_name_param: Optional[str],
    message_chat_obj_param: Chat
) -> str:
    message_to_user = ""
    updated_fields_for_roulette_status: Dict[str, Any] = {}
    bonus_amount_from_phone = 0

    # ... (–ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è chat_title_for_fallback_logic) ...
    chat_title_for_fallback_logic: Optional[str]
    if message_chat_obj_param.type == "private":
        chat_title_for_fallback_logic = f"–õ–∏—á–Ω—ã–π —á–∞—Ç ({user_id})"
    else:
        chat_title_for_fallback_logic = message_chat_obj_param.title or f"–ß–∞—Ç {chat_id}"
    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ elif prize_category == "phone_reward") ...

    try:
        user_db_data_for_onecoins_update: Optional[Dict[str, Any]] = None
        user_db_data_for_onecoins_update = await database.get_user_data_for_update(user_id, chat_id)
        if user_db_data_for_onecoins_update is None:
            user_db_data_for_onecoins_update = {}

        current_roulette_status_before_prize = await database.get_roulette_status(user_id, chat_id)
        if current_roulette_status_before_prize is None:
            logger.info(f"Roulette (_apply_prize): No prior roulette_status for user {user_id} chat {chat_id}.")
            current_roulette_status_before_prize = {}

        if prize_category == "onecoin_reward":
            # ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è onecoin_reward) ...
            onecoins_to_add = int(prize_value)
            try:
                phone_bonuses = await get_active_user_phone_bonuses(user_id)
                onecoin_bonus_p = phone_bonuses.get("onecoin_bonus_percent", 0.0)
                if onecoin_bonus_p > 0:
                    bonus_value_calculated = round(int(prize_value) * (onecoin_bonus_p / 100.0))
                    if bonus_value_calculated > 0:
                         onecoins_to_add += bonus_value_calculated
                         bonus_amount_from_phone = bonus_value_calculated
            except Exception as e_onecoin_bonus:
                logger.error(f"OneCoin Reward (Roulette Apply): Error applying phone bonus for user {user_id}: {e_onecoin_bonus}")

            await database.update_user_onecoins(
                user_id, chat_id, onecoins_to_add,
                username=user_db_data_for_onecoins_update.get('username', user_tg_username_param),
                full_name=user_db_data_for_onecoins_update.get('full_name', user_full_name_param),
                chat_title=user_db_data_for_onecoins_update.get('chat_title', chat_title_for_fallback_logic)
            )
            message_to_user = f"üí∞ {user_mention}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <b>{prize_value} OneCoin(–æ–≤)</b>!"
            if bonus_amount_from_phone > 0:
                message_to_user += f" (+{bonus_amount_from_phone} –æ—Ç –±–æ–Ω—É—Å–∞ —á–µ—Ö–ª–∞ ‚ú®)"
            message_to_user += " –û–Ω–∏ —É–∂–µ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ."

        elif prize_category == "extra_bonus_attempt":
            # ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞) ...
             new_attempts = current_roulette_status_before_prize.get('extra_bonus_attempts', 0) + int(prize_value)
             updated_fields_for_roulette_status['extra_bonus_attempts'] = new_attempts
             message_to_user = (f"üîÑ {user_mention}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <b>{prize_value} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–ø—ã—Ç–∫—É</b> –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /bonus –≤ —ç—Ç–æ–º —á–∞—Ç–µ! "
                                f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {new_attempts} —Ç–∞–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–≥–æ—Ä—è—Ç –≤ {Config.RESET_HOUR}:00.")
        elif prize_category == "extra_oneui_attempt":
            # ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞) ...
             new_attempts = current_roulette_status_before_prize.get('extra_oneui_attempts', 0) + int(prize_value)
             updated_fields_for_roulette_status['extra_oneui_attempts'] = new_attempts
             message_to_user = (f"üîÑ {user_mention}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <b>{prize_value} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–ø—ã—Ç–∫—É</b> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /oneui —Å–µ–≥–æ–¥–Ω—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ! "
                                f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {new_attempts} —Ç–∞–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–≥–æ—Ä—è—Ç –≤ {Config.RESET_HOUR}:00.")
        elif prize_category == "bonus_multiplier_boost":
            # ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞) ...
             boost_factor = float(prize_value)
             updated_fields_for_roulette_status['pending_bonus_multiplier_boost'] = boost_factor
             message_to_user = (f"‚ú® {user_mention}, –≤–∞—à —Å–ª–µ–¥—É—é—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç <code>/bonus</code> (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ) –±—É–¥–µ—Ç <b>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–º–Ω–æ–∂–µ–Ω –Ω–∞ x{boost_factor:.1f}</b>! "
                                "–≠—Ç–æ—Ç –±–æ–Ω—É—Å –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∑–∞—Ç–µ–º —Ä–∞—Å—Ö–æ–¥—É–µ—Ç—Å—è.")
        elif prize_category == "negative_protection_charge":
            # ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞) ...
             new_charges = current_roulette_status_before_prize.get('negative_change_protection_charges', 0) + int(prize_value)
             updated_fields_for_roulette_status['negative_change_protection_charges'] = new_charges
             message_to_user = (f"üõ°Ô∏è {user_mention}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{prize_value} –∑–∞—Ä—è–¥ –∑–∞—â–∏—Ç—ã</b> –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è /oneui –≤ —ç—Ç–æ–º —á–∞—Ç–µ! "
                                f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {new_charges} –∑–∞—Ä—è–¥–æ–≤. –°—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º —Ä–æ–ª–ª–µ.")

        # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # +++ –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –í–´–î–ê–ß–ò –¢–ï–õ–ï–§–û–ù–ê +++
        # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        elif prize_category == "phone_reward":
            logger.info(f"Roulette (_apply_prize): User {user_id} in chat {chat_id} processing 'phone_reward' category.")

            # 1. –í—ã–±–æ—Ä —Å–µ—Ä–∏–∏ –∏ –º–æ–¥–µ–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–∞–∫ –µ—Å—Ç—å)
            # ... (–∫–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ selected_phone_info, chosen_color, initial_memory_gb) ...
            series_options = Config.ROULETTE_PHONE_SERIES_CHANCES
            series_keys = [s[0] for s in series_options]
            series_weights = [s[1] for s in series_options]

            selected_series = None
            if series_keys and sum(series_weights) > 0:
                selected_series_list = random.choices(series_keys, weights=series_weights, k=1)
                if selected_series_list:
                     selected_series = selected_series_list[0]

            if not selected_series:
                logger.error(f"ROULETTE (Phone Apply): –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ä–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í—ã–¥–∞–µ–º fallback OneCoin.")
                coins_won_fallback = random.randint(40, 60)
                new_balance_fallback = await database.update_user_onecoins(user_id, chat_id, coins_won_fallback, username=user_db_data_for_onecoins_update.get('username', user_tg_username_param), full_name=user_db_data_for_onecoins_update.get('full_name', user_full_name_param), chat_title=user_db_data_for_onecoins_update.get('chat_title', chat_title_for_fallback_logic))
                message_to_user = f"üéÅ –û–≥–æ! –ß—Ç–æ-—Ç–æ –Ω–µ–æ–±—ã—á–Ω–æ–µ... –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <b>{coins_won_fallback} OneCoin(s)</b> –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–æ–±–æ–≥–æ –ø—Ä–∏–∑–∞! –ë–∞–ª–∞–Ω—Å: {new_balance_fallback} OC."
            else:
                phones_in_selected_series = [
                    model_info for model_key, model_info in PHONE_MODELS.items()
                    if model_info.get("series") == selected_series
                ]

                if not phones_in_selected_series:
                    logger.warning(f"ROULETTE (Phone Apply): –ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è —Å–µ—Ä–∏–∏ {selected_series} –≤ PHONE_MODELS. –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è.")
                    coins_compensation_no_phones = random.randint(30, 50)
                    new_balance_comp = await database.update_user_onecoins(user_id, chat_id, coins_compensation_no_phones, username=user_db_data_for_onecoins_update.get('username', user_tg_username_param), full_name=user_db_data_for_onecoins_update.get('full_name', user_full_name_param), chat_title=user_db_data_for_onecoins_update.get('chat_title', chat_title_for_fallback_logic))
                    message_to_user = f"ü§î –†–µ–¥–∫–∞—è —É–¥–∞—á–∞! –í—ã –ø–æ—á—Ç–∏ –≤—ã–∏–≥—Ä–∞–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ –≤ —ç—Ç–æ–π —Å–µ—Ä–∏–∏ —Å–µ–π—á–∞—Å –ø—É—Å—Ç–æ. –î–µ—Ä–∂–∏—Ç–µ —É—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–µ <b>{coins_compensation_no_phones} OneCoin(s)</b>. –ë–∞–ª–∞–Ω—Å: {new_balance_comp} OC."
                else:
                    # –õ–æ–≥–∏–∫–∞ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É/—Ü–µ–Ω–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
                    weighted_phone_model_list = []
                    current_year = current_time_utc_param.year

                    for phone_info_iter in phones_in_selected_series:
                        price = phone_info_iter.get("price", 1)
                        if price <= 0: price = 1
                        release_year = phone_info_iter.get("release_year")
                        age = 1
                        if release_year and isinstance(release_year, int):
                            age_calc = current_year - release_year + 1
                            age = max(1, age_calc)
                        calculated_weight = (age / price) * 10000
                        calculated_weight = max(1.0, calculated_weight)
                        weighted_phone_model_list.append((phone_info_iter, calculated_weight))

                    phone_objects = [item[0] for item in weighted_phone_model_list]
                    phone_model_weights = [item[1] for item in weighted_phone_model_list]

                    selected_phone_info = None
                    if phone_objects:
                         if not phone_model_weights or sum(phone_model_weights) == 0:
                              logger.warning(f"ROULETTE (Phone Apply): –ù—É–ª–µ–≤—ã–µ –≤–µ—Å–∞ –¥–ª—è {selected_series}. –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä.")
                              selected_phone_info = random.choice(phone_objects)
                         else:
                              try:
                                  sel_list = random.choices(phone_objects, weights=phone_model_weights, k=1)
                                  if sel_list: selected_phone_info = sel_list[0]
                              except ValueError as e_choices:
                                  logger.error(f"ROULETTE (Phone Apply): –û—à–∏–±–∫–∞ random.choices –¥–ª—è {selected_series}: {e_choices}. –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä.")
                                  selected_phone_info = random.choice(phone_objects)
                    # –ö–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ –≤—ã–±–æ—Ä–∞ selected_phone_info

                    if not selected_phone_info:
                        logger.error(f"ROULETTE (Phone Apply): –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è {selected_series}. –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è.")
                        coins_comp_no_model = random.randint(35, 55)
                        new_bal_comp_nm = await database.update_user_onecoins(user_id, chat_id, coins_comp_no_model, username=user_db_data_for_onecoins_update.get('username', user_tg_username_param), full_name=user_db_data_for_onecoins_update.get('full_name', user_full_name_param), chat_title=user_db_data_for_onecoins_update.get('chat_title', chat_title_for_fallback_logic))
                        message_to_user = f"üçÄ –ü–æ—á—Ç–∏! –í–∞–º —á—É—Ç—å-—á—É—Ç—å –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –¥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–∑–∞ - <b>{coins_comp_no_model} OneCoin(s)</b>. –ë–∞–ª–∞–Ω—Å: {new_bal_comp_nm} OC."
                    else:
                        # –¢–µ–ª–µ—Ñ–æ–Ω –≤—ã–±—Ä–∞–Ω! –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ pending
                        won_phone_key = selected_phone_info['key']
                        won_phone_name = selected_phone_info['name']
                        won_phone_base_price = selected_phone_info['price']
                        chosen_color = random.choice(PHONE_COLORS) if PHONE_COLORS else "–ß–µ—Ä–Ω—ã–π"
                        memory_str = selected_phone_info.get("memory", "128GB")
                        initial_memory_gb = parse_memory_string_to_gb(memory_str)

                        active_phones_count = await database.count_user_active_phones(user_id)
                        max_phones_allowed = getattr(Config, "MAX_PHONES_PER_USER", 2)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ pending –ø—Ä–∏–∑–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        existing_pending_prize = await database.get_pending_phone_prize(user_id)

                        if existing_pending_prize:
                             # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è UNIQUE(user_id) –≤ user_pending_phone_prizes,
                             # –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π:
                             logger.warning(f"Roulette (_apply_prize): User {user_id} won a phone but already has a pending prize (ID: {existing_pending_prize.get('prize_id')}). Providing small compensation.")
                             coins_comp_existing = random.randint(10, 30)
                             new_bal_comp_ex = await database.update_user_onecoins(user_id, chat_id, coins_comp_existing, username=user_db_data_for_onecoins_update.get('username', user_tg_username_param), full_name=user_db_data_for_onecoins_update.get('full_name', user_full_name_param), chat_title=user_db_data_for_onecoins_update.get('chat_title', chat_title_for_fallback_logic))
                             message_to_user = f"üéÅ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–∑, –æ–∂–∏–¥–∞—é—â–∏–π —Ä–µ—à–µ–Ω–∏—è! –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>{coins_comp_existing} OneCoin(s)</b>."

                        elif active_phones_count >= max_phones_allowed:
                            # >>> –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ pending prize –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä <<<
                            pending_prize_id = await database.add_pending_phone_prize(
                                user_id=user_id,
                                phone_model_key=won_phone_key,
                                color=chosen_color,
                                initial_memory_gb=initial_memory_gb,
                                prize_won_at_utc=current_time_utc_param,
                                original_roulette_chat_id=chat_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª –≤—ã–∏–≥—Ä—ã—à
                            )

                            if pending_prize_id:
                                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSM –∏–∑ phone_logic
                                from phone_logic import PurchaseStates # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞

                                fsm_context = message_chat_obj_param # –í aiogram 3 context –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ message
                                # –ï—Å–ª–∏ message_chat_obj_param –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ .get_state() –∏ .set_state(),
                                # –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–¥–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å state –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥.
                                # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å state —á–µ—Ä–µ–∑ message: await state.set_state(...)

                                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç StateContext
                                # –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –≤ apply_prize.
                                # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º message –∫–∞–∫ FSMContext, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫–∏.
                                # –ù–ê–ò–ë–û–õ–ï–ï –í–ï–†–û–Ø–¢–ù–´–ô –°–ü–û–°–û–ë: FSMState –ø—Ä–∏–≤—è–∑–∞–Ω –∫ user_id –ò chat_id.
                                # –ß—Ç–æ–±—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–æ—Å—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —á–∞—Ç–∞ –¥–ª—è pending prize,
                                # –º–æ–∂–Ω–æ –ª–∏–±–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –µ–≥–æ –∫ (user_id, user_id) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π storage,
                                # –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ pending prize –≤ –ë–î –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /keepwonphone /sellwonphone.
                                # –î–∞–≤–∞–π—Ç–µ –ø–æ–π–¥–µ–º –ø–æ –ø—É—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ pending prize –≤ –ë–î, —ç—Ç–æ –ø—Ä–æ—â–µ, —á–µ–º FSM cross-chat.
                                # FSM state –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ–∫—É–ø–æ–∫/–ø—Ä–æ–¥–∞–∂.

                                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–∫—É–ø–∫–∏)
                                try:
                                     user_fsm_state = fsm_context.from_user(user_id) # –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è state
                                     if await user_fsm_state.get_state() is not None:
                                          await user_fsm_state.clear()
                                except Exception as e_clear_state:
                                     logger.warning(f"Roulette (_apply_prize): –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è user {user_id}: {e_clear_state}")


                                message_to_user = (
                                    f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω <b>{html.escape(won_phone_name)}</b> ({chosen_color}, {initial_memory_gb}GB)!\n"
                                    f"–û–¥–Ω–∞–∫–æ, —É –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ ({active_phones_count}/{max_phones_allowed}).\n"
                                    f"–£ –≤–∞—Å –µ—Å—Ç—å <b>1 —á–∞—Å</b> –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è:"
                                    f"\n  1. –í–∑—è—Ç—å —ç—Ç–æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω: –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥–∞–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–≤–æ–∏—Ö —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–∞–Ω–¥–æ–π <code>/keepwonphone ID_—Å—Ç–∞—Ä–æ–≥–æ_—Ç–µ–ª–µ—Ñ–æ–Ω–∞</code> (ID –≤–∞—à–∏—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ /myphones)."
                                    f"\n  2. –ü—Ä–æ–¥–∞—Ç—å –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –±–æ—Ç—É: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/sellwonphone</code> (–≤—ã –ø–æ–ª—É—á–∏—Ç–µ 80% –µ–≥–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏)."
                                    f"\n–ï—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–∏–º–µ—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞, —Ç–µ–ª–µ—Ñ–æ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–∞–Ω –±–æ—Ç—É –∑–∞ 80% —Å—Ç–æ–∏–º–æ—Å—Ç–∏."
                                )
                                logger.info(f"Roulette (_apply_prize): User {user_id} won {won_phone_key} but maxed. Pending decision (Prize ID: {pending_prize_id}).")
                                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–∑, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è
                                log_chat_title = chat_title_for_fallback_logic
                                await send_telegram_log(bot_instance,
                                    f"üé∞‚è≥ <b>–ü–†–ò–ó –û–ñ–ò–î–ê–ï–¢ –†–ï–®–ï–ù–ò–Ø!</b>\n"
                                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_mention} ({user_id})\n"
                                    f"–ß–∞—Ç: {html.escape(log_chat_title)} ({chat_id})\n"
                                    f"–í—ã–∏–≥—Ä–∞–ª —Ç–µ–ª–µ—Ñ–æ–Ω: <b>{html.escape(won_phone_name)} ({won_phone_key})</b>, {chosen_color}, {initial_memory_gb}GB.\n"
                                    f"–û–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è ({Config.MARKET_PHONE_CONFIRMATION_TIMEOUT_SECONDS // 60} –º–∏–Ω)." # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–∞–π–º–∞—É—Ç, —á—Ç–æ –∏ –¥–ª—è –ø–æ–∫—É–ø–æ–∫/–ø—Ä–æ–¥–∞–∂
                                )
                            else:
                                # ... (fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ pending) ...
                                logger.error(f"ROULETTE (Phone Apply): –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å pending prize –¥–ª—è user {user_id}. Fallback.")
                                coins_fall_db = random.randint(70, 150)
                                new_bal_fall_db = await database.update_user_onecoins(user_id, chat_id, coins_fall_db, username=user_db_data_for_onecoins_update.get('username', user_tg_username_param), full_name=user_db_data_for_onecoins_update.get('full_name', user_full_name_param), chat_title=user_db_data_for_onecoins_update.get('chat_title', chat_title_for_fallback_logic))
                                message_to_user = f"‚ú® –í—ã –ø–æ—á—Ç–∏ –≤—ã–∏–≥—Ä–∞–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è! –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>{coins_fall_db} OneCoin(s)</b>. –ë–∞–ª–∞–Ω—Å: {new_bal_fall_db} OC."

                        else: # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –ø–æ–ª–Ω—ã–π
                             # ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–∂–µ–∫–ø–æ—Ç–µ) ...
                             new_phone_inventory_id = await database.add_phone_to_user_inventory(
                                user_id=user_id,
                                chat_id_acquired_in=chat_id,
                                phone_model_key=won_phone_key,
                                color=chosen_color,
                                purchase_price_onecoins=0,
                                purchase_date_utc=current_time_utc_param,
                                initial_memory_gb=initial_memory_gb,
                                is_contraband=False
                            )
                             if new_phone_inventory_id:
                                message_to_user = (
                                    f"üéâüéâüéâ <b>–î–ñ–ï–ö–ü–û–¢!!!</b> üéâüéâüéâ\n"
                                    f"{user_mention}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: \n"
                                    f"<b>üì± {html.escape(won_phone_name)}</b> ({chosen_color}, {initial_memory_gb}GB)!\n"
                                    f"–û–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (/myphones) —Å ID: <code>{new_phone_inventory_id}</code>."
                                )
                                logger.info(f"Roulette (_apply_prize): User {user_id} received phone {won_phone_key} (ID: {new_phone_inventory_id}).")
                                log_chat_title = chat_title_for_fallback_logic
                                await send_telegram_log(bot_instance,
                                    f"üé∞üì± <b>–î–ñ–ï–ö–ü–û–¢ –†–£–õ–ï–¢–ö–ò!</b>\n"
                                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_mention} ({user_id})\n"
                                    f"–ß–∞—Ç: {html.escape(log_chat_title)} ({chat_id})\n"
                                    f"–í—ã–∏–≥—Ä–∞–ª —Ç–µ–ª–µ—Ñ–æ–Ω: <b>{html.escape(won_phone_name)} ({won_phone_key})</b>, {chosen_color}, {initial_memory_gb}GB.\n"
                                    f"ID –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {new_phone_inventory_id}"
                                )
                             else:
                                # ... (fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î) ...
                                logger.error(f"ROULETTE (Phone Apply): –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {won_phone_key} user {user_id}. Fallback.")
                                coins_fall_db = random.randint(70, 150)
                                new_bal_fall_db = await database.update_user_onecoins(user_id, chat_id, coins_fall_db, username=user_db_data_for_onecoins_update.get('username', user_tg_username_param), full_name=user_db_data_for_onecoins_update.get('full_name', user_full_name_param), chat_title=user_db_data_for_onecoins_update.get('chat_title', chat_title_for_fallback_logic))
                                message_to_user = f"‚ú® –í—ã –ø–æ—á—Ç–∏ –≤—ã–∏–≥—Ä–∞–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏! –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>{coins_fall_db} OneCoin(s)</b>. –ë–∞–ª–∞–Ω—Å: {new_bal_fall_db} OC."

        # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ _apply_prize_and_get_message) ...
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Ä—É–ª–µ—Ç–∫–∏ (–∫—Ä–æ–º–µ last_roulette_spin_timestamp, –æ–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ cmd_spin_roulette)
        if updated_fields_for_roulette_status:
            await database.update_roulette_status(user_id, chat_id, updated_fields_for_roulette_status)
            logger.info(f"Roulette status updated for user {user_id} chat {chat_id} with: {updated_fields_for_roulette_status}")

        return message_to_user

    except asyncpg.exceptions.ForeignKeyViolationError:
        # ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞) ...
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∑ —Ä—É–ª–µ—Ç–∫–∏ –¥–ª—è {user_mention} (user {user_id} chat {chat_id}) –∏–∑-–∑–∞ ForeignKeyViolationError. "
                     f"–í–µ—Ä–æ—è—Ç–Ω–æ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ user_oneui. –ü—Ä–∏–∑ –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω.", exc_info=False)
        await send_telegram_log(bot_instance,
                                f"üî¥ –û—à–∏–±–∫–∞ FK –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞ —Ä—É–ª–µ—Ç–∫–∏ –¥–ª—è {user_mention} (<code>{user_id}@{chat_id}</code>). "
                                f"–ü—Ä–∏–∑: {prize_category} ({prize_value}). –ó–∞–ø–∏—Å—å user_oneui –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç?")
        return (f"{user_mention}, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—á–∏—Å–ª–∏—Ç—å –≤–∞—à –ø—Ä–∏–∑ –∏–∑-–∑–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–∏ (–∫–æ–¥ R05 - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è). "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/oneui</code> –æ–¥–∏–Ω —Ä–∞–∑ –≤ —ç—Ç–æ–º —á–∞—Ç–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å, "
                "–∞ –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä—É–ª–µ—Ç–∫—É —Å–Ω–æ–≤–∞. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e_apply:
        # ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞) ...
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞ —Ä—É–ª–µ—Ç–∫–∏ ({prize_category}, {prize_value}) –¥–ª—è {user_mention} (user {user_id} chat {chat_id}): {e_apply}", exc_info=True)
        await send_telegram_log(bot_instance,
                                f"üî¥ –û—à–∏–±–∫–∞ General –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞ —Ä—É–ª–µ—Ç–∫–∏ –¥–ª—è {user_mention} (<code>{user_id}@{chat_id}</code>). "
                                f"–ü—Ä–∏–∑: {prize_category} ({prize_value}). –û—à–∏–±–∫–∞: <pre>{html.escape(str(e_apply))}</pre>")
        return f"{user_mention}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–∏–∑–∞ (–∫–æ–¥ R06). –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."


@roulette_router.message(Command(*Config.ROULETTE_COMMAND_ALIASES, ignore_case=True))
async def cmd_spin_roulette(message: Message, bot: Bot):
    if not message.from_user:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = message.from_user.id
    chat_id = message.chat.id
    user_tg_username = message.from_user.username
    full_name_from_msg = message.from_user.full_name # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ –∏–º—è
    user_link = get_user_mention_html(user_id, full_name_from_msg, user_tg_username)
    current_time_utc = datetime.now(dt_timezone.utc)

    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º message.chat –≤–º–µ—Å—Ç–æ message, —Ç–∞–∫ –∫–∞–∫ message_chat_obj —Ç–µ–ø–µ—Ä—å Chat
        await ensure_user_oneui_record_for_roulette(
            user_id, chat_id, user_tg_username, full_name_from_msg, message.chat, bot 
        )
    except Exception as e_ensure:
        # ... (—Ç–≤–æ—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞) ...
        logger.error(f"Roulette: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è ensure_user_oneui_record_for_roulette –¥–ª—è user {user_id} chat {chat_id}: {e_ensure}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ä—É–ª–µ—Ç–∫–µ (–∫–æ–¥ R00). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await send_telegram_log(bot, f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ R00 (ensure_user_oneui) –¥–ª—è {user_link} (<code>{user_id}@{chat_id}</code>): <pre>{html.escape(str(e_ensure))}</pre>")
        return

    roulette_lock = await get_roulette_lock(user_id, chat_id) # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞
    async with roulette_lock: # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫
        try:
            roulette_status_current = await database.get_roulette_status(user_id, chat_id)

            can_spin_now = False
            used_purchased_spin_this_time = False
            time_to_set_for_last_free_spin: Optional[datetime] = current_time_utc

            available_purchased_spins = 0
            if roulette_status_current and roulette_status_current.get('extra_roulette_spins', 0) > 0:
                 available_purchased_spins = roulette_status_current['extra_roulette_spins']

            if available_purchased_spins > 0:
                # ... (—Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏–Ω–∞, –æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞) ...
                new_purchased_spins_count = available_purchased_spins - 1
                await database.update_roulette_status(user_id, chat_id, {'extra_roulette_spins': new_purchased_spins_count})
                await message.reply(
                    f"üåÄ {user_link}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è <b>–∫—É–ø–ª–µ–Ω–Ω—ã–π —Å–ø–∏–Ω —Ä—É–ª–µ—Ç–∫–∏</b>! "
                    f"–û—Å—Ç–∞–ª–æ—Å—å –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤: {new_purchased_spins_count}."
                )
                can_spin_now = True
                used_purchased_spin_this_time = True
                time_to_set_for_last_free_spin = None # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Å–ø–∏–Ω–∞
                logger.info(f"User {user_id} in chat {chat_id} used a purchased roulette spin. Remaining: {new_purchased_spins_count}")


            if not can_spin_now: # –ï—Å–ª–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–π —Å–ø–∏–Ω –Ω–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–π –∫—É–ª–¥–∞—É–Ω
                on_cooldown, next_available_utc = await _check_roulette_cooldown(user_id, chat_id, current_time_utc)
                if on_cooldown and next_available_utc:
                    # ... (—Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫—É–ª–¥–∞—É–Ω–µ, –æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞) ...
                    next_available_local = next_available_utc.astimezone(pytz_timezone(Config.TIMEZONE))
                    await message.reply(
                        f"{user_link}, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –≤ —Ä—É–ª–µ—Ç–∫–µ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ) –≤ —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ—Å–ª–µ "
                        f"<b>{next_available_local.strftime('%Y-%m-%d %H:%M')} {Config.TIMEZONE.split('/')[-1]}</b>."
                    )
                    return
                else: # –ö—É–ª–¥–∞—É–Ω–∞ –Ω–µ—Ç
                    can_spin_now = True
            
            if not can_spin_now: # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –ª–æ–≥–∏–∫–∞ –≤—ã—à–µ –≤–µ—Ä–Ω–∞
                 logger.warning(f"Roulette: Logic error, user {user_id} chat {chat_id} cannot spin but passed checks.")
                 await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏ (–∫–æ–¥ R08).")
                 return

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "–∫—Ä—É—Ç–∏—Ç—Å—è –±–∞—Ä–∞–±–∞–Ω"
            processing_message = await message.reply(f"üé≤ {user_link} –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä—É–ª–µ—Ç–∫—É —É–¥–∞—á–∏... –ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≤—ã–ø–∞–¥–µ—Ç!")
            await asyncio.sleep(random.uniform(0.8, 2.0)) # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞
            prize_category, prize_value, prize_log_desc = await _determine_prize()
            
            # >>>>> –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞—á–∞ –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ _apply_prize_and_get_message <<<<<
            response_text_prize = await _apply_prize_and_get_message(
                user_id, chat_id, prize_category, prize_value, 
                user_link, bot, # bot —ç—Ç–æ bot_instance
                current_time_utc,      # –ü–µ—Ä–µ–¥–∞–µ–º current_time_utc
                user_tg_username,      # –ü–µ—Ä–µ–¥–∞–µ–º username
                full_name_from_msg,    # –ü–µ—Ä–µ–¥–∞–µ–º full_name
                message.chat           # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Chat
            )

            final_response_text = f"üéâ –í—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n{response_text_prize}"

            try:
                await processing_message.edit_text(final_response_text, parse_mode="HTML", disable_web_page_preview=True)
            except Exception: # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await message.reply(final_response_text, parse_mode="HTML", disable_web_page_preview=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ *–±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ* —Å–ø–∏–Ω–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not used_purchased_spin_this_time and \
               "–∫–æ–¥ R05" not in response_text_prize and \
               "–∫–æ–¥ R00" not in response_text_prize and \
               time_to_set_for_last_free_spin is not None: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Ä–µ–º—è –µ—Å—Ç—å
                 await database.update_roulette_status(user_id, chat_id, {'last_roulette_spin_timestamp': time_to_set_for_last_free_spin})
                 logger.info(f"Roulette: FREE spin time updated for user {user_id} chat {chat_id}.")
            elif used_purchased_spin_this_time:
                 logger.info(f"Roulette: Purchased spin used by {user_id} chat {chat_id}. Free spin cooldown NOT affected.")
            else: # –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ R05/R00 –∏–ª–∏ time_to_set_for_last_free_spin –±—ã–ª None (—Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º)
                 logger.warning(f"Roulette: Spin time NOT updated for user {user_id} chat {chat_id} due to prior error or it was a purchased spin and time_to_set was None.")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            chat_title_for_log = html.escape(message.chat.title or f"ChatID {chat_id}")
            spin_type_log = "–∫—É–ø–ª–µ–Ω–Ω—ã–π" if used_purchased_spin_this_time else "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π"
            await send_telegram_log(bot, f"üé∞ –†—É–ª–µ—Ç–∫–∞ ({spin_type_log} —Å–ø–∏–Ω) –¥–ª—è {user_link} –≤ —á–∞—Ç–µ \"{chat_title_for_log}\": –≤—ã–ø–∞–ª –ø—Ä–∏–∑ \"{prize_log_desc}\".")

        except Exception as e:
            # ... (—Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞) ...
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ —Ä—É–ª–µ—Ç–∫–∏ –¥–ª—è {user_link} –≤ —á–∞—Ç–µ {chat_id}: {e}", exc_info=True)
            await message.reply("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Ä—É–ª–µ—Ç–∫–æ–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è (–∫–æ–¥ R07).")
            await send_telegram_log(bot, f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ R07 –≤ —Ä—É–ª–µ—Ç–∫–µ –¥–ª—è {user_link} (—á–∞—Ç <code>{chat_id}</code>): <pre>{html.escape(str(e))}</pre>")

def setup_roulette_handlers(dp_main: Router): # dp_main –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ dp, –∫–∞–∫ —É —Ç–µ–±—è –≤ main.py
    dp_main.include_router(roulette_router)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ä—É–ª–µ—Ç–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
