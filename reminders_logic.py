# reminders_logic.py

from datetime import datetime
from .database import get_user_data, get_user_last_activity_in_chat, update_user_last_activity_in_chat
from . import utils
from . import config
from . import onecoin_logic
from . import bonus_logic
from . import roulette_logic
from . import phone_logic # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∏–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∫—É–ª–¥–∞—É–Ω–æ–≤)

async def get_reminders_for_chat(user_id, chat_id, user_data=None):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞.
    """
    if user_data is None:
        user_data = get_user_data(user_id)

    now = utils.get_moscow_time()
    now_ts = now.timestamp()
    
    reminder_lines = []

    # 1. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è /oneui
    oneui_status_line = None
    oneui_phantom_lock_until_ts = user_data.get('oneui_phantom_lock_until_ts')

    if oneui_phantom_lock_until_ts and now_ts < oneui_phantom_lock_until_ts:
        phantom_lock_end_dt = datetime.fromtimestamp(oneui_phantom_lock_until_ts, tz=config.MOSCOW_TZ)
        time_left_str = utils.format_time_left_till_datetime(phantom_lock_end_dt, now)
        oneui_status_line = (f"‚ùå /oneui (—Ñ–∞–Ω—Ç–æ–º–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞) –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ "
                             f"{utils.format_datetime_msk(phantom_lock_end_dt)} ({time_left_str}).")
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É phone_logic –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ /oneui
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ phone_logic.get_oneui_command_status –∏–ª–∏ –ø–æ–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        # –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–ª–∏ None/0 –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ.
        # –í user_data –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è 'last_oneui_change_time'
        
        last_oneui_change_time = user_data.get('last_oneui_change_time', 0)
        
        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è /oneui.
        # –û–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ–π –∏ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Å—Ç—Ä–µ–π–∫–∞, –∫–∞–∫ –≤ phone_logic.py
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –≤–æ–∑—å–º–µ–º –±–∞–∑–æ–≤—ã–π –∫—É–ª–¥–∞—É–Ω, –Ω–æ –≤ –∏–¥–µ–∞–ª–µ —ç—Ç—É –ª–æ–≥–∏–∫—É –Ω—É–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        # –∏–ª–∏ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ phone_logic.
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å next_oneui_eligible_ts, –µ—Å–ª–∏ phone_logic –µ–≥–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç.
        # –≠—Ç–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
        next_oneui_eligible_ts = user_data.get('next_oneui_eligible_ts') 

        if next_oneui_eligible_ts is None:
            # –ï—Å–ª–∏ phone_logic –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 'next_oneui_eligible_ts',
            # –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ 'last_oneui_change_time' –∏ –±–∞–∑–æ–≤–æ–≥–æ –∫—É–ª–¥–∞—É–Ω–∞.
            # –í–ê–ñ–ù–û: –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–∏–µ. –†–µ–∞–ª—å–Ω—ã–π –∫—É–ª–¥–∞—É–Ω /oneui –≤ phone_logic.py —Å–ª–æ–∂–Ω–µ–µ
            # –∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä–µ–π–∫–∞ (ONEUI_COOLDOWN_BASE, ONEUI_COOLDOWN_STREAK_BONUS).
            # –ß—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ —Ç–æ—á–Ω—ã–º, —ç—Ç–∞ –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å phone_logic.py
            # –∏–ª–∏ phone_logic.py –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.
            
            # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º –±–µ–∑ –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∏–∑ phone_logic.py):
            current_streak = user_data.get('streak_days_oneui', 0)
            cooldown_hours = config.ONEUI_COOLDOWN_BASE
            if current_streak >= 7: # –ü—Ä–∏–º–µ—Ä —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –æ—Ç —Å—Ç—Ä–µ–π–∫–∞
                cooldown_hours -= config.ONEUI_COOLDOWN_STREAK_BONUS.get(7, 0) # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ –±–æ–Ω—É—Å –∑–∞ 7 –¥–Ω–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å
            
            actual_cooldown_seconds = cooldown_hours * 3600
            next_oneui_eligible_ts = last_oneui_change_time + actual_cooldown_seconds

        if now_ts >= next_oneui_eligible_ts:
            oneui_status_line = "‚úÖ /oneui –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏."
        else:
            next_oneui_avail_dt = datetime.fromtimestamp(next_oneui_eligible_ts, tz=config.MOSCOW_TZ)
            time_left_str = utils.format_time_left_till_datetime(next_oneui_avail_dt, now)
            oneui_status_line = (f"‚ùå /oneui –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ "
                                 f"{utils.format_datetime_msk(next_oneui_avail_dt)} ({time_left_str}).")
    
    if oneui_status_line:
        reminder_lines.append(oneui_status_line)

    # 2. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è /onecoin
    next_onecoin_time = onecoin_logic.get_next_onecoin_time(user_data)
    if now_ts >= next_onecoin_time:
        reminder_lines.append("‚úÖ /onecoin –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è.")
    else:
        dt_next_onecoin = datetime.fromtimestamp(next_onecoin_time, tz=config.MOSCOW_TZ)
        time_left_str = utils.format_time_left_till_datetime(dt_next_onecoin, now)
        reminder_lines.append(f"‚ùå /onecoin –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ {utils.format_datetime_msk(dt_next_onecoin)} ({time_left_str}).")

    # 3. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è /bonus
    next_bonus_time = bonus_logic.get_next_bonus_time(user_data)
    if now_ts >= next_bonus_time:
        reminder_lines.append("‚úÖ /bonus –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è.")
    else:
        dt_next_bonus = datetime.fromtimestamp(next_bonus_time, tz=config.MOSCOW_TZ)
        time_left_str = utils.format_time_left_till_datetime(dt_next_bonus, now)
        reminder_lines.append(f"‚ùå /bonus –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ {utils.format_datetime_msk(dt_next_bonus)} ({time_left_str}).")

    # 4. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è /roulette
    next_roulette_time = roulette_logic.get_next_roulette_time(user_data, chat_id) # roulette –∑–∞–≤–∏—Å–∏—Ç –æ—Ç chat_id
    if now_ts >= next_roulette_time:
        reminder_lines.append("‚úÖ /roulette –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∏–≥—Ä—ã.")
    else:
        dt_next_roulette = datetime.fromtimestamp(next_roulette_time, tz=config.MOSCOW_TZ)
        time_left_str = utils.format_time_left_till_datetime(dt_next_roulette, now)
        reminder_lines.append(f"‚ùå /roulette –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ {utils.format_datetime_msk(dt_next_roulette)} ({time_left_str}).")
    
    return reminder_lines


async def get_all_reminders_for_user(user_id, user_name):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –≤ –õ–°.
    """
    user_data = get_user_data(user_id)
    now = utils.get_moscow_time()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    # –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Ç—ã, –≥–¥–µ –µ—Å—Ç—å last_roulette_time_{chat_id}
    
    # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∞—Ç—ã, –≥–¥–µ –µ—Å—Ç—å –∫–∞–∫–∞—è-–ª–∏–±–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä—É–ª–µ—Ç–∫–∏
    # –í –∏–¥–µ–∞–ª–µ, –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –≥–¥–µ –±–æ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç.
    known_chat_ids = set()
    for key in user_data.keys():
        if key.startswith('last_roulette_time_'):
            try:
                chat_id_str = key.split('_')[-1]
                known_chat_ids.add(int(chat_id_str))
            except ValueError:
                continue
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π "–ª–∏—á–Ω—ã–π —á–∞—Ç" (–µ—Å–ª–∏ —Ç–∞–∫–æ–π –∫–æ–Ω—Ü–µ–ø—Ç –µ—Å—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è /onecoin, /bonus)
    # –ï—Å–ª–∏ /onecoin –∏ /bonus –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —á–∞—Ç—É, –∏—Ö –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –∏–ª–∏ —Å chat_id=None
    
    all_reminders_text = f"üìå {user_name}, –≤–æ—Ç —Ç–≤–æ–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    found_any_reminders = False

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —á–∞—Ç—É (–∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –∫–∞–∫ "–≥–ª–æ–±–∞–ª—å–Ω—ã–µ" –¥–ª—è –õ–°)
    # –ö–æ–º–∞–Ω–¥—ã /onecoin –∏ /bonus –æ–±—ã—á–Ω–æ –Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —á–∞—Ç–∞, –Ω–æ /oneui –∏ /roulette –º–æ–≥—É—Ç.
    # –í –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ /oneui, /onecoin, /bonus, /roulette –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è "–≠—Ç–æ–≥–æ —á–∞—Ç–∞".
    # –ó–Ω–∞—á–∏—Ç, get_reminders_for_chat –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã /–Ω–∞–ø–æ–º–Ω–∏.

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /–Ω–∞–ø–æ–º–Ω–∏ –¥–∞–Ω–∞ –≤ –õ–°, –∞ –Ω–∞–º –Ω—É–∂–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è "–≤ —ç—Ç–æ–º —á–∞—Ç–µ" (–õ–°),
    # —Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∞—Ç —Å —Å–∞–º–∏–º –±–æ—Ç–æ–º.
    # –î–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏, get_reminders_for_chat –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å chat_id=user_id –¥–ª—è –õ–°.
    
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –µ—Å–ª–∏ /–Ω–∞–ø–æ–º–Ω–∏ –≤ –õ–° –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ "–≥–ª–æ–±–∞–ª—å–Ω—ã–µ" –∏–ª–∏ "–õ–°-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ" —Ç–∞–π–º–µ—Ä—ã:
    
    # --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ/–õ–° –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å) ---
    # –ù–∞–ø—Ä–∏–º–µ—Ä, /onecoin –∏ /bonus, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —á–∞—Ç–∞ –≤ get_next_..._time
    ls_reminder_lines = []
    
    # /onecoin
    next_onecoin_time = onecoin_logic.get_next_onecoin_time(user_data)
    if now.timestamp() >= next_onecoin_time:
        ls_reminder_lines.append("‚úÖ /onecoin –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è.")
    else:
        dt_next_onecoin = datetime.fromtimestamp(next_onecoin_time, tz=config.MOSCOW_TZ)
        time_left_str = utils.format_time_left_till_datetime(dt_next_onecoin, now)
        ls_reminder_lines.append(f"‚ùå /onecoin –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ {utils.format_datetime_msk(dt_next_onecoin)} ({time_left_str}).")

    # /bonus
    next_bonus_time = bonus_logic.get_next_bonus_time(user_data)
    if now.timestamp() >= next_bonus_time:
        ls_reminder_lines.append("‚úÖ /bonus –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è.")
    else:
        dt_next_bonus = datetime.fromtimestamp(next_bonus_time, tz=config.MOSCOW_TZ)
        time_left_str = utils.format_time_left_till_datetime(dt_next_bonus, now)
        ls_reminder_lines.append(f"‚ùå /bonus –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ {utils.format_datetime_msk(dt_next_bonus)} ({time_left_str}).")
    
    # /oneui (–µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞—Å–ø–µ–∫—Ç –∏–ª–∏ –æ–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –¥–ª—è –õ–° –æ—Ç–¥–µ–ª—å–Ω–æ)
    # –í –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ /oneui –±—ã–ª –≤ "—ç—Ç–æ–º —á–∞—Ç–µ". –ï—Å–ª–∏ /–Ω–∞–ø–æ–º–Ω–∏ –≤ –õ–°, —Ç–æ "—ç—Ç–æ—Ç —á–∞—Ç" - —ç—Ç–æ –õ–°.
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ oneui_phantom_lock_until_ts –∏ next_oneui_eligible_ts - –≥–ª–æ–±–∞–ª—å–Ω—ã–µ.
    oneui_status_line_ls = None
    oneui_phantom_lock_until_ts = user_data.get('oneui_phantom_lock_until_ts')
    if oneui_phantom_lock_until_ts and now.timestamp() < oneui_phantom_lock_until_ts:
        phantom_lock_end_dt = datetime.fromtimestamp(oneui_phantom_lock_until_ts, tz=config.MOSCOW_TZ)
        time_left_str = utils.format_time_left_till_datetime(phantom_lock_end_dt, now)
        oneui_status_line_ls = (f"‚ùå /oneui (—Ñ–∞–Ω—Ç–æ–º–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞) –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ "
                                f"{utils.format_datetime_msk(phantom_lock_end_dt)} ({time_left_str}).")
    else:
        next_oneui_eligible_ts_ls = user_data.get('next_oneui_eligible_ts') # –∏–ª–∏ —Ä–∞—Å—á–µ—Ç –∫–∞–∫ –≤—ã—à–µ
        if next_oneui_eligible_ts_ls is None: # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            last_oneui_change_time = user_data.get('last_oneui_change_time', 0)
            current_streak = user_data.get('streak_days_oneui', 0)
            cooldown_hours = config.ONEUI_COOLDOWN_BASE
            if current_streak >= 7:
                 cooldown_hours -= config.ONEUI_COOLDOWN_STREAK_BONUS.get(7, 0)
            actual_cooldown_seconds = cooldown_hours * 3600
            next_oneui_eligible_ts_ls = last_oneui_change_time + actual_cooldown_seconds
            
        if now.timestamp() >= next_oneui_eligible_ts_ls:
            oneui_status_line_ls = "‚úÖ /oneui –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏."
        else:
            next_oneui_avail_dt_ls = datetime.fromtimestamp(next_oneui_eligible_ts_ls, tz=config.MOSCOW_TZ)
            time_left_str = utils.format_time_left_till_datetime(next_oneui_avail_dt_ls, now)
            oneui_status_line_ls = (f"‚ùå /oneui –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ "
                                   f"{utils.format_datetime_msk(next_oneui_avail_dt_ls)} ({time_left_str}).")
    if oneui_status_line_ls:
        ls_reminder_lines.append(oneui_status_line_ls)


    if ls_reminder_lines:
        all_reminders_text += "üîî –ì–ª–æ–±–∞–ª—å–Ω—ã–µ/–õ–°:\n" # –ò–ª–∏ "–í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
        for line in ls_reminder_lines:
            all_reminders_text += f"  ‚Ä¢ {line}\n"
        all_reminders_text += "\n"
        found_any_reminders = True
        
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —á–∞—Ç–∞–º (–æ—Å–æ–±–µ–Ω–Ω–æ /roulette, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç chat_id)
    for chat_id_val in known_chat_ids:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (–µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ/–Ω—É–∂–Ω–æ)
        # chat_title = await bot.get_chat(chat_id_val).title # –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–±—ä–µ–∫—Ç—É bot
        chat_title_str = f"–≤ —á–∞—Ç–µ ID {chat_id_val}" # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        
        chat_specific_reminders = []
        
        # –¢–æ–ª—å–∫–æ /roulette –∏–ª–∏ –¥—Ä—É–≥–∏–µ —á–∞—Ç-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        next_r_time = roulette_logic.get_next_roulette_time(user_data, chat_id_val)
        if now.timestamp() >= next_r_time:
            chat_specific_reminders.append("‚úÖ /roulette –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∏–≥—Ä—ã.")
        else:
            dt_next_r = datetime.fromtimestamp(next_r_time, tz=config.MOSCOW_TZ)
            time_left_str = utils.format_time_left_till_datetime(dt_next_r, now)
            chat_specific_reminders.append(f"‚ùå /roulette –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ {utils.format_datetime_msk(dt_next_r)} ({time_left_str}).")
            
        if chat_specific_reminders:
            all_reminders_text += f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {chat_title_str}:\n"
            for line in chat_specific_reminders:
                all_reminders_text += f"  ‚Ä¢ {line}\n"
            all_reminders_text += "\n"
            found_any_reminders = True

    if not found_any_reminders:
        return f"{user_name}, —É —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —á–∞—Ç–∞–º."
        
    return all_reminders_text.strip()

# –í main.py –∏–ª–∏ –≥–¥–µ —É –≤–∞—Å —Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /–Ω–∞–ø–æ–º–Ω–∏

# async def remind_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user = update.effective_user
#     chat = update.effective_chat
#     user_data = get_user_data(user.id) # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ user_data –∞–∫—Ç—É–∞–ª—å–Ω–∞
    
#     # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
#     update_user_last_activity_in_chat(user.id, chat.id, utils.get_moscow_time().timestamp())

#     if chat.type == 'private':
#         # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –õ–° - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º
#         # (–∏–ª–∏ —Ç–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ/–õ–°, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π –ª–æ–≥–∏–∫–∏ get_all_reminders_for_user)
#         reminder_message_text = await reminders_logic.get_all_reminders_for_user(user.id, user.first_name)
#     else:
#         # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
#         user_name_in_chat = user.first_name # –∏–ª–∏ user.full_name
#         # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         header = f"üìå {user_name_in_chat}, –≤–æ—Ç —Ç–≤–æ–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
#         # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
#         reminder_lines = await reminders_logic.get_reminders_for_chat(user.id, chat.id, user_data)
        
#         if not reminder_lines:
#             reminder_message_text = header + "üîî –í —ç—Ç–æ–º —á–∞—Ç–µ:\n  ‚Ä¢ –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
#         else:
#             reminder_message_text = header + "üîî –í —ç—Ç–æ–º —á–∞—Ç–µ:\n"
#             for line in reminder_lines:
#                 reminder_message_text += f"  ‚Ä¢ {line}\n"
        
#         # –û–±—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
#         reminder_message_text += "\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π /–Ω–∞–ø–æ–º–Ω–∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å–æ –º–Ω–æ–π, —É–≤–∏–¥–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º"

#     await update.message.reply_text(reminder_message_text, parse_mode='HTML', disable_web_page_preview=True)
