import asyncio
import html
from datetime import datetime, timedelta, timezone as dt_timezone
from typing import Optional

from aiogram import Router, Bot, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from achievements_logic import check_and_grant_achievements



# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Config –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
try:
    from config import Config
except ImportError:
    # –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç.
    # –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è from .config import Config –∏–ª–∏ –¥—Ä—É–≥–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Config –¥–æ—Å—Ç—É–ø–µ–Ω.
    # –ï—Å–ª–∏ –±—É–¥—É—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–æ–º, —Å–æ–æ–±—â–∏—Ç–µ.
    raise ImportError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Config –≤ market_logic.py")


# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ database –∏ utils –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
try:
    import database
    from utils import get_user_mention_html, send_telegram_log, get_current_price
    # >>> –í–ê–ñ–ù–û: –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç <<<
    from phone_logic import get_active_user_phone_bonuses
except ImportError:
    raise ImportError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å database, utils –∏–ª–∏ phone_logic –≤ market_logic.py")

import logging
# –ò–º–ø–æ—Ä—Ç asyncpg –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è ForeignKeyViolationError
try:
    import asyncpg # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
except ImportError:
    asyncpg = None # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ None, –µ—Å–ª–∏ asyncpg –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    logger.warning("asyncpg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. ForeignKeyViolationError –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ.")


logger = logging.getLogger(__name__)
market_router = Router()

class MarketPurchaseStates(StatesGroup):
    awaiting_confirmation = State()

CONFIRMATION_TEXT_YES = "–¥–∞" # –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ Config, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å
CONFIRMATION_TEXT_NO = "–Ω–µ—Ç" # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ

@market_router.message(Command(*Config.MARKET_COMMAND_ALIASES, ignore_case=True))
async def cmd_market_show(message: Message, bot: Bot):
    if not message.from_user:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", disable_web_page_preview=True)
        return

    user_id = message.from_user.id
    chat_id = message.chat.id
    user_link = get_user_mention_html(user_id, message.from_user.full_name, message.from_user.username)

    conn_market_prices = None
    try:
        conn_market_prices = await database.get_connection()
        balance = await database.get_user_onecoins(user_id, chat_id, conn_ext=conn_market_prices)

        response_lines = [
            f"üè™ <b>–†—ã–Ω–æ–∫ –ü–æ–ø—ã—Ç–æ–∫</b>",
            f"{user_link}, –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ —ç—Ç–æ–º —á–∞—Ç–µ: <code>{balance}</code> OneCoin(s).",
            "--------------------",
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>"
        ]

        if not Config.MARKET_ITEMS:
            response_lines.append("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ –Ω–µ—Ç.")
        else:
            for item_key, item_details in Config.MARKET_ITEMS.items():
                item_price_display = 0
                if item_key == "oneui_attempt":
                    # –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ò—Å–ø–æ–ª—å–∑—É–µ–º Config.MIN_MARKET_DYNAMIC_PRICE
                    item_price_display = int(max(Config.MIN_MARKET_DYNAMIC_PRICE, balance * Config.MARKET_ONEUI_ATTEMPT_PERCENT_OF_BALANCE))
                elif item_key == "roulette_spin":
                    # –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ò—Å–ø–æ–ª—å–∑—É–µ–º Config.MIN_MARKET_DYNAMIC_PRICE
                    item_price_display = int(max(Config.MIN_MARKET_DYNAMIC_PRICE, balance * Config.MARKET_ROULETTE_SPIN_PERCENT_OF_BALANCE))
                elif item_key == "bonus_attempt":
                    # –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ò—Å–ø–æ–ª—å–∑—É–µ–º Config.MIN_MARKET_DYNAMIC_PRICE
                    item_price_display = int(max(Config.MIN_MARKET_DYNAMIC_PRICE, balance * Config.MARKET_BONUS_ATTEMPT_PERCENT_OF_BALANCE))
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–µ—Å–ª–∏ –±—É–¥—É—Ç), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —Å –∏–Ω—Ñ–ª—è—Ü–∏–µ–π
                    base_price = item_details['price']
                    item_price_display = await get_current_price(base_price, conn_ext=conn_market_prices)
                
                item_display_string = (
                    f"üîπ <b>{html.escape(item_details['name'])}</b>\n"
                    f"   –¶–µ–Ω–∞: <code>{item_price_display}</code> OneCoin(s)\n" # disable_web_page_preview=True –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω
                    f"   –û–ø–∏—Å–∞–Ω–∏–µ: <i>{html.escape(item_details['description'])}</i>\n"
                    f"   –î–ª—è –ø–æ–∫—É–ø–∫–∏: <code>/{Config.MARKET_BUY_COMMAND_ALIASES[0]} {item_key}</code>"
                )
                response_lines.append(item_display_string)
                response_lines.append("---")

        await message.reply("\n".join(response_lines), parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Market: –û—à–∏–±–∫–∞ –≤ cmd_market_show –¥–ª—è user {user_id} chat {chat_id}: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Ä—ã–Ω–∫–∞.", disable_web_page_preview=True)
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /market –¥–ª—è {user_link} (<code>{user_id}@{chat_id}</code>): <pre>{html.escape(str(e))}</pre>")
    finally:
        if conn_market_prices and not conn_market_prices.is_closed():
            await conn_market_prices.close()


@market_router.message(Command(*Config.MARKET_BUY_COMMAND_ALIASES, ignore_case=True))
async def cmd_market_buy_item(message: Message, command: CommandObject, state: FSMContext, bot: Bot):
    if not message.from_user:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", disable_web_page_preview=True)
        return

    user_id = message.from_user.id
    chat_id = message.chat.id # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä—ã–Ω–∫–∞
    user_full_name = message.from_user.full_name
    user_tg_username = message.from_user.username
    user_link = get_user_mention_html(user_id, user_full_name, user_tg_username)

    if command.args is None:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å.\n"
            f"–ü—Ä–∏–º–µ—Ä: `/{Config.MARKET_BUY_COMMAND_ALIASES[0]} oneui_attempt`\n"
            f"–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π `/{Config.MARKET_COMMAND_ALIASES[0]}`.",
            disable_web_page_preview=True
        )
        return

    item_key_to_buy = command.args.strip().lower()

    if item_key_to_buy not in Config.MARKET_ITEMS:
        await message.reply(
            f"–¢–æ–≤–∞—Ä —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º '<code>{html.escape(item_key_to_buy)}</code>' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Ä—ã–Ω–∫–µ.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/{Config.MARKET_COMMAND_ALIASES[0]}` , —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã.",
            disable_web_page_preview=True
        )
        return

    item_details = Config.MARKET_ITEMS[item_key_to_buy]
    
    conn_market_buy = None
    try:
        conn_market_buy = await database.get_connection()
        current_balance = await database.get_user_onecoins(user_id, chat_id, conn_ext=conn_market_buy)

        final_total_price_to_charge = 0
        original_price_display_if_discounted = 0 
        
        if item_key_to_buy == "oneui_attempt":
            final_total_price_to_charge = int(max(Config.MIN_MARKET_DYNAMIC_PRICE, current_balance * Config.MARKET_ONEUI_ATTEMPT_PERCENT_OF_BALANCE))
            original_price_display_if_discounted = final_total_price_to_charge 
        elif item_key_to_buy == "roulette_spin":
            final_total_price_to_charge = int(max(Config.MIN_MARKET_DYNAMIC_PRICE, current_balance * Config.MARKET_ROULETTE_SPIN_PERCENT_OF_BALANCE))
            original_price_display_if_discounted = final_total_price_to_charge
        elif item_key_to_buy == "bonus_attempt":
            final_total_price_to_charge = int(max(Config.MIN_MARKET_DYNAMIC_PRICE, current_balance * Config.MARKET_BONUS_ATTEMPT_PERCENT_OF_BALANCE))
            original_price_display_if_discounted = final_total_price_to_charge
        else:
            base_item_price_per_unit = item_details['price']
            actual_item_price_per_unit = await get_current_price(base_item_price_per_unit, conn_ext=conn_market_buy)
            final_total_price_to_charge = actual_item_price_per_unit
            original_price_display_if_discounted = final_total_price_to_charge
        
        # quantity_to_buy –≤—Å–µ–≥–¥–∞ 1 –¥–ª—è —ç—Ç–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
        
        applied_discount_percent = 0.0
        
        if user_id:
            try:
                phone_bonuses = await get_active_user_phone_bonuses(user_id) #
                market_discount_p = phone_bonuses.get("market_discount_percent", 0.0)
                
                if market_discount_p > 0:
                    logger.info(f"MarketBuy: User {user_id} has phone discount {market_discount_p}%. Price before discount (dynamic/inflation): {final_total_price_to_charge}")
                    discount_amount = int(round(final_total_price_to_charge * (market_discount_p / 100.0)))
                    final_total_price_to_charge -= discount_amount
                    if final_total_price_to_charge < 0: final_total_price_to_charge = 0
                    applied_discount_percent = market_discount_p
                    logger.info(f"MarketBuy: User {user_id} after phone discount, final price to charge: {final_total_price_to_charge}")
            except Exception as e_market_discount:
                logger.error(f"MarketBuy: Error applying phone discount for user {user_id}: {e_market_discount}", exc_info=True)
        
        if current_balance < final_total_price_to_charge:
            price_message = f"<code>{final_total_price_to_charge}</code>"
            if applied_discount_percent > 0:
                price_message += f" (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ {applied_discount_percent:.0f}%; –æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞: {original_price_display_if_discounted})"
            
            await message.reply(
                f"{user_link}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ "
                f"\"<b>{html.escape(item_details['name'])}</b>\" (–Ω—É–∂–Ω–æ {price_message}, —É –≤–∞—Å <code>{current_balance}</code> OneCoin(s)).",
                disable_web_page_preview=True
            )
            if conn_market_buy and not conn_market_buy.is_closed(): await conn_market_buy.close()
            return

        await state.set_state(MarketPurchaseStates.awaiting_confirmation)
        state_data_for_fsm = {
            "item_key": item_key_to_buy,
            "item_name": item_details['name'],
            "item_price_final": final_total_price_to_charge,
            "item_db_field": item_details['db_field'],
            "confirmation_initiated_at": datetime.now(dt_timezone.utc).isoformat(),
            "original_chat_id": chat_id,
            "original_user_id": user_id
        }
        if applied_discount_percent > 0:
            state_data_for_fsm["original_market_price_before_discount"] = original_price_display_if_discounted
            state_data_for_fsm["applied_discount_percent"] = applied_discount_percent

        await state.update_data(**state_data_for_fsm)

        confirmation_message_str = f"{user_link}, –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å \"<b>{html.escape(item_details['name'])}</b>\" "
        if applied_discount_percent > 0:
            confirmation_message_str += (f"–∑–∞ <code>{final_total_price_to_charge}</code> OneCoin(s) "
                                         f"(–æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞ —Å –∏–Ω—Ñ–ª—è—Ü–∏–µ–π: <code>{original_price_display_if_discounted}</code>, –≤–∞—à–∞ —Å–∫–∏–¥–∫–∞ {applied_discount_percent:.0f}%)?\n")
        else:
            confirmation_message_str += f"–∑–∞ <code>{final_total_price_to_charge}</code> OneCoin(s)?\n"

        confirmation_message_str += (f"–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: <code>{current_balance}</code> OneCoin(s).\n"
                                     f"–û—Ç–≤–µ—Ç—å—Ç–µ '<b>{CONFIRMATION_TEXT_YES}</b>' –∏–ª–∏ '<b>{CONFIRMATION_TEXT_NO}</b>' "
                                     f"–≤ —Ç–µ—á–µ–Ω–∏–µ {Config.MARKET_PURCHASE_CONFIRMATION_TIMEOUT_SECONDS} —Å–µ–∫—É–Ω–¥.")

        await message.reply(confirmation_message_str, parse_mode="HTML", disable_web_page_preview=True)

    except Exception as e_market_buy:
        logger.error(f"MarketBuy: –û—à–∏–±–∫–∞ –≤ cmd_market_buy_item (–¥–æ FSM) –¥–ª—è user {user_id} chat {chat_id}, item {item_key_to_buy}: {e_market_buy}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ø–æ–∫—É–ø–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", disable_web_page_preview=True)
        await send_telegram_log(bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /{Config.MARKET_BUY_COMMAND_ALIASES[0]} (–¥–æ FSM) –¥–ª—è {user_link}, —Ç–æ–≤–∞—Ä {item_key_to_buy}: <pre>{html.escape(str(e_market_buy))}</pre>")
    finally:
        if conn_market_buy and not conn_market_buy.is_closed():
            await conn_market_buy.close()


@market_router.message(MarketPurchaseStates.awaiting_confirmation, F.text.lower() == CONFIRMATION_TEXT_YES)
async def market_purchase_confirm_yes(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id

    user_data_from_state = await state.get_data()
    state_user_id = user_data_from_state.get('original_user_id')
    item_key = user_data_from_state.get('item_key')
    item_name = user_data_from_state.get('item_name')
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º final_total_price, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–∞–∫ item_price_final
    item_price_final = user_data_from_state.get('item_price_final')
    item_db_field = user_data_from_state.get('item_db_field')
    confirmation_initiated_at_iso = user_data_from_state.get('confirmation_initiated_at')
    original_chat_id = user_data_from_state.get('original_chat_id')
    original_market_price = user_data_from_state.get('original_market_price') # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
    applied_discount_percent = user_data_from_state.get('applied_discount_percent') # –ú–æ–∂–µ—Ç –±—ã—Ç—å None


    if state_user_id != user_id:
        await message.reply("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–æ–∫—É–ø–∫—É –¥–æ–ª–∂–µ–Ω —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –µ–µ –Ω–∞—á–∞–ª.")
        return

    user_full_name = message.from_user.full_name
    user_tg_username = message.from_user.username
    user_link = get_user_mention_html(user_id, user_full_name, user_tg_username)

    if not all([item_key, item_name, isinstance(item_price_final, int), item_db_field, confirmation_initiated_at_iso, original_chat_id is not None]):
        await state.clear()
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        logger.warning(f"Market: Missing or invalid data in state for user {user_id} during purchase confirmation. State: {user_data_from_state}")
        return

    try:
        confirmation_initiated_at = datetime.fromisoformat(confirmation_initiated_at_iso)
        if (datetime.now(dt_timezone.utc) - confirmation_initiated_at) > timedelta(seconds=Config.MARKET_PURCHASE_CONFIRMATION_TIMEOUT_SECONDS):
            await state.clear()
            await message.reply(f"–í—Ä–µ–º—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ \"<b>{html.escape(item_name)}</b>\" –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
    except ValueError:
        await state.clear()
        await message.reply("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∑–∞–Ω–æ–≤–æ.")
        logger.error(f"Market: ValueError parsing confirmation_initiated_at_iso for user {user_id}. ISO: {confirmation_initiated_at_iso}")
        return

    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å final_total_price (item_price_final)
    current_balance = await database.get_user_onecoins(user_id, original_chat_id)
    if current_balance < item_price_final:
        await state.clear()
        price_message = f"<code>{item_price_final}</code>"
        if applied_discount_percent and applied_discount_percent > 0:
             price_message += f" (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ {applied_discount_percent}%)"
        await message.reply(
            f"{user_link}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (<code>{current_balance}</code> OneCoin(s)) "
            f"–¥–ª—è –ø–æ–∫—É–ø–∫–∏ \"<b>{html.escape(item_name)}</b>\" (–Ω—É–∂–Ω–æ {price_message} OneCoin(s))."
        )
        return

    try:
        # 1. –°–ø–∏—Å–∞—Ç—å OneCoins (–∏—Å–ø–æ–ª—å–∑—É–µ–º item_price_final)
        user_oneui_data_for_log = await database.get_user_data_for_update(user_id, original_chat_id)
        await database.update_user_onecoins(
            user_id, original_chat_id, -item_price_final,
            username=user_oneui_data_for_log.get('username'),
            full_name=user_oneui_data_for_log.get('full_name'),
            chat_title=user_oneui_data_for_log.get('chat_title')
        )

        # 2. –ù–∞—á–∏—Å–ª–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
        roulette_status = await database.get_roulette_status(user_id, original_chat_id)
        if roulette_status is None:
            await database.update_roulette_status(user_id, original_chat_id, {})
            roulette_status = await database.get_roulette_status(user_id, original_chat_id)
            if roulette_status is None:
                 logger.critical(f"Market: CRITICAL - Failed to create/get roulette_status for user {user_id} chat {original_chat_id} during purchase.")
                 raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏ (user {user_id} chat {original_chat_id}).")

        current_attempts = roulette_status.get(item_db_field, 0)
        new_attempts_count = current_attempts + 1

        await database.update_roulette_status(user_id, original_chat_id, {item_db_field: new_attempts_count})

        new_balance = current_balance - item_price_final
        
        purchase_details_message = ""
        if original_market_price is not None and applied_discount_percent is not None and applied_discount_percent > 0:
            purchase_details_message = (f" (—Ü–µ–Ω–∞ <code>{item_price_final}</code> OneCoin(s) "
                                        f"—Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–π —Å–∫–∏–¥–∫–∏ {applied_discount_percent}%, "
                                        f"–≤–º–µ—Å—Ç–æ <code>{original_market_price}</code>)")
        else:
            purchase_details_message = f" –∑–∞ <code>{item_price_final}</code> OneCoin(s)"


        await message.reply(
            f"‚úÖ {user_link}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ \"<b>{html.escape(item_name)}</b>\"{purchase_details_message}!\n"
            f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å <code>{new_attempts_count}</code> —Ç–∞–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ (–≤–∫–ª—é—á–∞—è —ç—Ç—É).\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{new_balance}</code> OneCoin(s)."
        )

        chat_title_for_log = html.escape(message.chat.title or f"ChatID {original_chat_id}")
        if message.chat.id != original_chat_id:
            logger.warning(f"Market: Purchase confirmation for user {user_id} for chat {original_chat_id} came from chat {message.chat.id}. Using original_chat_id for logging context.")
            try:
                chat_info_for_log = await bot.get_chat(original_chat_id)
                chat_title_for_log = html.escape(chat_info_for_log.title or f"ChatID {original_chat_id}")
            except Exception:
                pass

        log_message_price_part = f"–¶–µ–Ω–∞: <code>{item_price_final}</code> OneCoin(s)"
        if original_market_price is not None and applied_discount_percent is not None and applied_discount_percent > 0:
             log_message_price_part += (f" (–û—Ä–∏–≥. —Ü–µ–Ω–∞: <code>{original_market_price}</code>, "
                                        f"–°–∫–∏–¥–∫–∞: {applied_discount_percent}%)")


        await send_telegram_log(
            bot,
            f"üõçÔ∏è <b>–ü–æ–∫—É–ø–∫–∞ –Ω–∞ –†—ã–Ω–∫–µ</b>\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link} (ID: <code>{user_id}</code>)\n"
            f"–ß–∞—Ç: {chat_title_for_log} (ID: <code>{original_chat_id}</code>)\n"
            f"–¢–æ–≤–∞—Ä: \"{html.escape(item_name)}\" (ID: <code>{item_key}</code>)\n"
            f"{log_message_price_part}\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{new_balance}</code> OneCoin(s)\n"
            f"–ü–æ–ª–µ –ë–î: <code>{item_db_field}</code>, –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{new_attempts_count}</code>"
        )
        logger.info(f"User {user_id} purchased '{item_key}' for {item_price_final} OneCoins (Original: {original_market_price if original_market_price else 'N/A'}, Discount: {applied_discount_percent if applied_discount_percent else '0'}%) in chat {original_chat_id}. Field {item_db_field} is now {new_attempts_count}.")


        # --- –í–´–ó–û–í –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---
        await check_and_grant_achievements(
            user_id,
            original_chat_id,
            bot,
            market_buy_just_now=True, # –î–ª—è "–ü–µ—Ä–≤—ã–π –®–∞–≥ –í –ì—Ä—è–∑—å"
            market_buy_total_count=1, # –ó–∞–≥–ª—É—à–∫–∞, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
            market_spend_total_amount=item_price_final # –î–ª—è "–¢–æ—Ä–≥–æ–≤–µ—Ü –ó–∞–±—ã—Ç—ã–º–∏ –î—É—à–∞–º–∏"
        )
        # --- –ö–û–ù–ï–¶ –í–´–ó–û–í–ê –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---

    except asyncpg.exceptions.ForeignKeyViolationError as fk_err: # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        await message.reply(f"{user_link}, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É –∏–∑-–∑–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–∏ (FKV). "
                            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ `/oneui` –≤ —ç—Ç–æ–º —á–∞—Ç–µ. "
                            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logger.error(f"Market: ForeignKeyViolationError for user {user_id} in chat {original_chat_id} buying '{item_key}'. Details: {fk_err}", exc_info=False)
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏ \"<b>{html.escape(item_name)}</b>\". "
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logger.error(f"Market: Error during purchase confirmation for user {user_id}, item '{item_key}': {e}", exc_info=True)
        await send_telegram_log(bot, f"üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞ '{item_key}' –¥–ª—è {user_link} –≤ —á–∞—Ç–µ {original_chat_id}: <pre>{html.escape(str(e))}</pre>")
    finally:
        await state.clear()

@market_router.message(MarketPurchaseStates.awaiting_confirmation, F.text.lower() == CONFIRMATION_TEXT_NO)
async def market_purchase_confirm_no(message: Message, state: FSMContext):
    user_data_from_state = await state.get_data()
    item_name = user_data_from_state.get('item_name', '—Ç–æ–≤–∞—Ä')
    await message.reply(f"–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ \"<b>{html.escape(item_name)}</b>\" –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

@market_router.message(MarketPurchaseStates.awaiting_confirmation)
async def market_purchase_invalid_confirmation(message: Message, state: FSMContext):
    user_data_from_state = await state.get_data()
    confirmation_initiated_at_iso = user_data_from_state.get('confirmation_initiated_at')
    item_name = user_data_from_state.get('item_name', '—Ç–æ–≤–∞—Ä')

    if confirmation_initiated_at_iso:
        try:
            confirmation_initiated_at = datetime.fromisoformat(confirmation_initiated_at_iso)
            if (datetime.now(dt_timezone.utc) - confirmation_initiated_at) > timedelta(seconds=Config.MARKET_PURCHASE_CONFIRMATION_TIMEOUT_SECONDS):
                await state.clear()
                await message.reply(f"–í—Ä–µ–º—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ \"<b>{html.escape(item_name)}</b>\" –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
        except ValueError:
            await state.clear()
            await message.reply("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∑–∞–Ω–æ–≤–æ.")
            return

    await message.reply(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '<b>{CONFIRMATION_TEXT_YES}</b>' –∏–ª–∏ '<b>{CONFIRMATION_TEXT_NO}</b>'.")

def setup_market_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –†—ã–Ω–∫–∞."""
    dp.include_router(market_router)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –†—ã–Ω–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
