# robbank_logic.py
import asyncio
import random
import html
from datetime import datetime, timedelta, timezone as dt_timezone
from typing import Optional, List, Dict, Any, Tuple

from aiogram import Router, Bot, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from pytz import timezone as pytz_timezone

from config import Config
import database
from phrases import (
    ROBBANK_OPERATION_NAMES, ROBBANK_PENDING_PHRASES, ROBBANK_SUCCESS_PHRASES,
    ROBBANK_ARREST_PHRASES, ROBBANK_ALREADY_BLOCKED_PHRASES,
    ROBBANK_ALREADY_PENDING_PHRASES, ROBBANK_COOLDOWN_PHRASES,
    ROBBANK_NOT_ENOUGH_COINS_FOR_PREPARATION_PHRASES, ONEUI_BLOCKED_PHRASES
)
from utils import get_user_mention_html, send_telegram_log
from business_data import BUSINESS_DATA
from achievements_logic import check_and_grant_achievements

import logging

logger = logging.getLogger(__name__)
robbank_router = Router()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –ø—Ä–æ—à–ª–æ–π –≤–µ—Ä—Å–∏–∏) ---

def _calculate_success_chance(oneui_version: float, bank_level: int) -> float:
    base_chance = Config.ROBBANK_BASE_SUCCESS_CHANCE
    oneui_bonus = (oneui_version // Config.ROBBANK_ONEUI_X_VERSIONS_FOR_BONUS) * Config.ROBBANK_ONEUI_VERSION_BONUS_PER_X_VERSIONS
    current_chance = base_chance + oneui_bonus
    bank_bonus = bank_level * Config.ROBBANK_BANK_LEVEL_SUCCESS_BONUS_PER_LEVEL
    current_chance += bank_bonus
    if Config.ROBBANK_GUARANTEED_SUCCESS_BANK_LEVEL_MIN <= bank_level <= Config.ROBBANK_GUARANTEED_SUCCESS_BANK_LEVEL_MAX:
        logger.info(f"Robbank: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö –∏–∑-–∑–∞ —É—Ä–æ–≤–Ω—è –±–∞–Ω–∫–∞ {bank_level} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return 1.0
    return min(current_chance, Config.ROBBANK_MAX_SUCCESS_CHANCE)

def _calculate_reward_multiplier_from_business(businesses: List[Dict[str, Any]]) -> float:
    if not businesses:
        return 1.0
    max_biz_order_idx = 0
    business_keys_ordered = list(BUSINESS_DATA.keys())
    for biz_data in businesses:
        try:
            if biz_data['business_key'] in business_keys_ordered:
                idx = business_keys_ordered.index(biz_data['business_key']) + 1
                if idx > max_biz_order_idx:
                    max_biz_order_idx = idx
            else:
                logger.warning(f"Robbank Calc: –ö–ª—é—á –±–∏–∑–Ω–µ—Å–∞ '{biz_data.get('business_key')}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ BUSINESS_DATA. –ü—Ä–æ–ø—É—Å–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–∞.")
        except ValueError:
            logger.warning(f"Robbank Calc: –ö–ª—é—á –±–∏–∑–Ω–µ—Å–∞ '{biz_data.get('business_key')}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ business_keys_ordered. –ü—Ä–æ–ø—É—Å–∫.")
            continue
        except KeyError:
            logger.warning(f"Robbank Calc: –í –¥–∞–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'business_key'. –î–∞–Ω–Ω—ã–µ: {biz_data}. –ü—Ä–æ–ø—É—Å–∫.")
            continue
    if max_biz_order_idx == 0:
        return 1.0
    mult_biz = 1.0
    if 1 <= max_biz_order_idx <= 6:
        min_b_mult = Config.ROBBANK_REWARD_BIZ_TIER_1_6_MIN_BONUS_PERCENT_AS_MULTIPLIER
        max_b_mult = Config.ROBBANK_REWARD_BIZ_TIER_1_6_MAX_BONUS_PERCENT_AS_MULTIPLIER
        if 6 - 1 > 0:
            mult_biz = min_b_mult + (max_biz_order_idx - 1) * ((max_b_mult - min_b_mult) / (6 - 1))
        else:
            mult_biz = min_b_mult
    elif 7 <= max_biz_order_idx <= 14:
        mult_biz = Config.ROBBANK_REWARD_BIZ_TIER_7_14_BONUS_PERCENT_AS_MULTIPLIER
    elif 15 <= max_biz_order_idx <= 18:
        min_b_mult = Config.ROBBANK_REWARD_BIZ_TIER_15_18_MIN_BONUS_PERCENT_AS_MULTIPLIER
        max_b_mult = Config.ROBBANK_REWARD_BIZ_TIER_15_18_MAX_BONUS_PERCENT_AS_MULTIPLIER
        tier_count = Config.ROBBANK_REWARD_BIZ_TIER_15_18_COUNT
        if tier_count > 1: # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            mult_biz = min_b_mult + (max_biz_order_idx - 15) * ((max_b_mult - min_b_mult) / (tier_count - 1))
        else: # –ï—Å–ª–∏ –≤ —Ç–∏—Ä–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –±–∏–∑–Ω–µ—Å (15-–π), —Ç–æ –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —ç—Ç–æ–≥–æ —Ç–∏—Ä–∞
            mult_biz = min_b_mult
    mult_biz = max(1.0, mult_biz) # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1.0
    logger.info(f"Robbank: –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥—ã –æ—Ç –±–∏–∑–Ω–µ—Å–∞ (–ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä {max_biz_order_idx}) —Å–æ—Å—Ç–∞–≤–∏–ª {mult_biz:.2f}")
    return round(mult_biz, 2)

def _calculate_reward(oneui_version: float, bank_level: int, businesses: List[Dict[str, Any]], base_preparation_cost: int) -> int:
    base_reward = Config.ROBBANK_REWARD_BASE_MIN
    if random.random() < Config.ROBBANK_REWARD_MAX_CHANCE:
        base_reward = Config.ROBBANK_REWARD_BASE_MAX
    else:
        if Config.ROBBANK_REWARD_BASE_MAX - 1 >= Config.ROBBANK_REWARD_BASE_MIN:
            base_reward = random.randint(Config.ROBBANK_REWARD_BASE_MIN, Config.ROBBANK_REWARD_BASE_MAX - 1)

    oneui_multiplier = 1.0 + (
        (oneui_version // Config.ROBBANK_REWARD_ONEUI_X_VERSIONS_FOR_MULTIPLIER) *
        Config.ROBBANK_REWARD_ONEUI_MULTIPLIER_PER_X_VERSIONS
    )
    bank_multiplier = 1.0 + (bank_level * Config.ROBBANK_REWARD_BANK_LEVEL_MULTIPLIER_PER_LEVEL)
    business_multiplier = _calculate_reward_multiplier_from_business(businesses)

    final_reward = base_reward * oneui_multiplier * bank_multiplier * business_multiplier
    final_reward = max(final_reward, float(base_preparation_cost))
    logger.info(f"Robbank Reward Calc: Base={base_reward}, PrepCost={base_preparation_cost}, OneUI_Mult={oneui_multiplier:.2f} (v{oneui_version}), Bank_Mult={bank_multiplier:.2f} (lvl{bank_level}), Biz_Mult={business_multiplier:.2f} -> Final={int(final_reward)}")
    return int(final_reward)

# –ö–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: –ø–∞—Ä–∞–º–µ—Ç—Ä `initial_message_thread_id` –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
async def _process_robbank_result(
    user_id: int, 
    chat_id: int, 
    operation_name: str, 
    base_preparation_cost: int, 
    bot_instance: Bot, 
    initial_message_thread_id: Optional[int] # <-- –ü—Ä–∏–Ω–∏–º–∞–µ–º ID —Ç–µ–º—ã
):
    user_data_for_log = await database.get_user_data_for_update(user_id, chat_id)
    user_mention = get_user_mention_html(user_id, user_data_for_log.get('full_name'), user_data_for_log.get('username'))

    user_robbank_status = await database.get_user_robbank_status(user_id, chat_id)
    if not user_robbank_status or user_robbank_status.get('current_operation_name') != operation_name or user_robbank_status.get('current_operation_start_utc') is None:
        logger.warning(f"Robbank: _process_robbank_result –¥–ª—è user {user_id}, chat {chat_id}. –û–ø–µ—Ä–∞—Ü–∏—è '{operation_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return

    current_oneui_version = await database.get_user_version(user_id, chat_id)
    bank_account_data = await database.get_user_bank(user_id, chat_id)
    bank_level = bank_account_data.get('bank_level', 0) if bank_account_data else 0
    user_businesses_in_chat = await database.get_user_businesses(user_id, chat_id)

    success_chance = _calculate_success_chance(current_oneui_version, bank_level)
    is_success = random.random() < success_chance

    message_to_send = ""
    log_message_parts = [f"üí∞ –û–ø–µ—Ä–∞—Ü–∏—è '{html.escape(operation_name)}' –¥–ª—è {user_mention} (ID: <code>{user_id}</code>) –≤ —á–∞—Ç–µ <code>{chat_id}</code> (–¢–µ–º–∞ ID: {initial_message_thread_id if initial_message_thread_id else '–ù–µ—Ç'}):"]
    log_message_parts.append(f"  –®–∞–Ω—Å —É—Å–ø–µ—Ö–∞: {success_chance*100:.2f}% (OneUI: {current_oneui_version:.1f}, –ë–∞–Ω–∫ –£—Ä: {bank_level})")

    if is_success:
        reward_amount = _calculate_reward(current_oneui_version, bank_level, user_businesses_in_chat, base_preparation_cost)
        new_balance = await database.update_user_onecoins(user_id, chat_id, reward_amount,
                                           username=user_data_for_log.get('username'),
                                           full_name=user_data_for_log.get('full_name'),
                                           chat_title=user_data_for_log.get('chat_title'))
        message_to_send = random.choice(ROBBANK_SUCCESS_PHRASES).format(amount=f"<b><code>{reward_amount:,}</code></b>")
        log_message_parts.append(f"  <b>–†–ï–ó–£–õ–¨–¢–ê–¢: –£–°–ü–ï–•!</b> –ù–∞–≥—Ä–∞–¥–∞: <code>{reward_amount:,}</code> OneCoin. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{new_balance:,}</code>")
        
        await database.update_user_robbank_status(
            user_id, chat_id,
            current_operation_name=None,
            current_operation_start_utc=None,
            current_operation_base_reward=None
        )
        await check_and_grant_achievements(
             user_id, chat_id, bot_instance, robbank_success_first_time=True
        )
    else: # –ê—Ä–µ—Å—Ç
        now_utc = datetime.now(dt_timezone.utc)
        local_tz = pytz_timezone(Config.TIMEZONE)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        block_until_local = (now_utc.astimezone(local_tz) + timedelta(days=Config.ROBBANK_ONEUI_BLOCK_DURATION_DAYS)).replace(hour=Config.ROBBANK_RESET_HOUR, minute=0, second=0, microsecond=0)
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –º–µ—Å—Ç–Ω–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É —É–∂–µ –ø–æ–∑–∂–µ —á–∞—Å–∞ —Å–±—Ä–æ—Å–∞
        # (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ–π—á–∞—Å 22:00, –∞ —Å–±—Ä–æ—Å –≤ 21:00), —Ç–æ —Å–±—Ä–æ—Å –±—É–¥–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ —ç—Ç–∏—Ö 'N' –¥–Ω–µ–π.
        # –ü–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç –¥–æ 21:00 –≤ –∫–æ–Ω—Ü–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.
        # –ï—Å–ª–∏ block_until_local —É–∂–µ –≤ –ø—Ä–æ—à–ª–æ–º, —Ç–æ –Ω–∞–¥–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.
        if block_until_local < now_utc.astimezone(local_tz):
            block_until_local += timedelta(days=1)

        block_until_utc = block_until_local.astimezone(dt_timezone.utc)

        streak_info_msg_part = ""
        user_streak_data = await database.get_user_daily_streak(user_id, chat_id)
        if user_streak_data and user_streak_data.get('current_streak', 0) > 0:
            current_s = user_streak_data['current_streak']
            streak_name_for_msg = ""
            for s_goal in Config.DAILY_STREAKS_CONFIG:
                if current_s >= s_goal['target_days']: streak_name_for_msg = s_goal['name']
                else: break
            if streak_name_for_msg:
                 streak_info_msg_part = f"(–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: \"<b>{html.escape(streak_name_for_msg)}</b>\" - {current_s} –¥. –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /oneui —Å–µ–≥–æ–¥–Ω—è, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å–µ —Ä–æ–≤–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å—Ç—Ä–∏–∫ —Å–≤–æ–π –∏ –ø–æ—Å–ª–µ 21:00, –Ω—É –≤–æ–æ–±—â–µ–º –∏—Å–ø–æ–ª—å–∑—É–π /oneui, –∫–∞–∫ –±—É–¥—Ç–æ –∞—Ä–µ—Å—Ç–∞ –Ω–µ—Ç—É, —á—Ç–æ–±—ã —Å—Ç—Ä–∏–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å–≤–æ–π.)."
            else:
                 streak_info_msg_part = f"(–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {current_s} –¥. –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /oneui —Å–µ–≥–æ–¥–Ω—è, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å–µ —Ä–æ–≤–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å—Ç—Ä–∏–∫ —Å–≤–æ–π –∏ –ø–æ—Å–ª–µ 21:00, –Ω—É –≤–æ–æ–±—â–µ–º –∏—Å–ø–æ–ª—å–∑—É–π /oneui, –∫–∞–∫ –±—É–¥—Ç–æ –∞—Ä–µ—Å—Ç–∞ –Ω–µ—Ç—É, —á—Ç–æ–±—ã —Å—Ç—Ä–∏–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å.)"
        else:
            streak_info_msg_part = "(–ù–µ –∑–∞–±—É–¥—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /oneui, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—Ç—Ä–∏–∫!)"
        
        message_to_send = random.choice(ROBBANK_ARREST_PHRASES).format(
            block_time=block_until_local.strftime('%d.%m %H:%M'),
            streak_info=streak_info_msg_part
        )
        log_message_parts.append(f"  <b>–†–ï–ó–£–õ–¨–¢–ê–¢: –ê–†–ï–°–¢.</b> /oneui –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {block_until_utc.isoformat()}.")
        
        await database.update_user_robbank_status(
            user_id, chat_id,
            robbank_oneui_blocked_until_utc=block_until_utc,
            current_operation_name=None, 
            current_operation_start_utc=None,
            current_operation_base_reward=None
        )
        await check_and_grant_achievements(
            user_id, chat_id, bot_instance, robbank_arrest_first_time=True
        )
    
    try:
        logger.info(f"Robbank: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç {chat_id}, —Ç–µ–º–∞ ID: {initial_message_thread_id}, —Ç–µ–∫—Å—Ç: {message_to_send[:100]}...")
        await bot_instance.send_message(
            chat_id, 
            f"{user_mention}, {message_to_send}", 
            parse_mode="HTML", 
            message_thread_id=initial_message_thread_id, # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID —Ç–µ–º—ã
            disable_web_page_preview=True # –î–æ–±–∞–≤–∏–ª –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        )
        logger.info(f"Robbank: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}, —Ç–µ–º–∞ ID: {initial_message_thread_id}.")
    except Exception as e_send_chat:
        logger.warning(f"Robbank: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ '{operation_name}' –≤ —á–∞—Ç {chat_id} (—Ç–µ–º–∞: {initial_message_thread_id}) –¥–ª—è user {user_id}: {e_send_chat}. –ü–æ–ø—ã—Ç–∫–∞ –≤ –õ–°.")
        try:
            await bot_instance.send_message(user_id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ '{html.escape(operation_name)}' –≤ —á–∞—Ç–µ ID {chat_id}:\n{message_to_send}", parse_mode="HTML", disable_web_page_preview=True)
        except Exception as e_send_pm:
            logger.error(f"Robbank: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ '{operation_name}' –≤ –õ–° user {user_id}: {e_send_pm}")

    await send_telegram_log(bot_instance, "\n".join(log_message_parts))


@robbank_router.message(Command(*Config.ROBBANK_ALIASES, ignore_case=True))
async def handle_robbank_command(message: Message, bot: Bot): # bot: Bot –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ message.bot –¥–∞–ª–µ–µ
    if not message.from_user:
        await message.reply("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = message.from_user.id
    chat_id = message.chat.id
    # –ü–æ–ª—É—á–∞–µ–º message_thread_id –∏–∑ –æ–±—ä–µ–∫—Ç–∞ message
    original_message_thread_id = message.message_thread_id 
    
    user_full_name = message.from_user.full_name
    user_username = message.from_user.username
    user_link = get_user_mention_html(user_id, user_full_name, user_username)
    
    now_utc = datetime.now(dt_timezone.utc)
    local_tz = pytz_timezone(Config.TIMEZONE)

    current_user_chat_lock = await database.get_user_chat_lock(user_id, chat_id)
    async with current_user_chat_lock:
        try:
            robbank_status = await database.get_user_robbank_status(user_id, chat_id)

            if robbank_status and robbank_status.get('current_operation_start_utc'):
                await message.reply(random.choice(ROBBANK_ALREADY_PENDING_PHRASES),
                                    disable_web_page_preview=True) # message.reply() —Å–∞–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç thread_id
                return

            if robbank_status and robbank_status.get('last_robbank_attempt_utc'):
                last_attempt_utc = robbank_status['last_robbank_attempt_utc']
                current_day_start_local = now_utc.astimezone(local_tz).replace(hour=Config.ROBBANK_RESET_HOUR, minute=0, second=0, microsecond=0)
                if now_utc.astimezone(local_tz) < current_day_start_local:
                    current_day_start_local -= timedelta(days=1)
                cooldown_ends_local = current_day_start_local + timedelta(days=Config.ROBBANK_COOLDOWN_DAYS)
                if last_attempt_utc.astimezone(local_tz) > current_day_start_local:
                    await message.reply(random.choice(ROBBANK_COOLDOWN_PHRASES).format(cooldown_ends_time=cooldown_ends_local.strftime(' %H:%M')),
                                        disable_web_page_preview=True)
                    return
            
            preparation_cost = random.randint(Config.ROBBANK_PREPARATION_COST_MIN, Config.ROBBANK_PREPARATION_COST_MAX)
            current_balance = await database.get_user_onecoins(user_id, chat_id)

            if current_balance < preparation_cost:
                await message.reply(random.choice(ROBBANK_NOT_ENOUGH_COINS_FOR_PREPARATION_PHRASES).format(cost=f"<code>{preparation_cost:,}</code>", current_balance=f"<code>{current_balance:,}</code>"),
                                    parse_mode="HTML",
                                    disable_web_page_preview=True)
                return

            await database.update_user_onecoins(user_id, chat_id, -preparation_cost,
                                               username=user_username, full_name=user_full_name,
                                               chat_title=message.chat.title)
            
            operation_name = random.choice(ROBBANK_OPERATION_NAMES)
            operation_delay_seconds = random.randint(Config.ROBBANK_RESULT_DELAY_MIN_SECONDS, Config.ROBBANK_RESULT_DELAY_MAX_SECONDS)
            
            await database.update_user_robbank_status(
                user_id, chat_id,
                last_robbank_attempt_utc=now_utc,
                current_operation_name=operation_name,
                current_operation_start_utc=now_utc,
                current_operation_base_reward=preparation_cost
            )

            time_left_display_minutes = f"{int(operation_delay_seconds / 60) + 1} –º–∏–Ω."
            pending_message_text = random.choice(ROBBANK_PENDING_PHRASES).format(
                base_amount=f"<code>{preparation_cost:,}</code>", 
                time_left_minutes=time_left_display_minutes
            )
            # message.reply() –æ—Ç–ø—Ä–∞–≤–∏—Ç –æ—Ç–≤–µ—Ç –≤ —Ç—É –∂–µ —Ç–µ–º—É, –µ—Å–ª–∏ original_message_thread_id –Ω–µ None
            await message.reply(f"<b>–û–ø–µ—Ä–∞—Ü–∏—è \"{html.escape(operation_name)}\"</b>\n{user_link}, {pending_message_text}",
                                parse_mode="HTML",
                                disable_web_page_preview=True)
            
            logger.info(f"Robbank: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (—á–∞—Ç {chat_id}, —Ç–µ–º–∞ {original_message_thread_id}) –Ω–∞—á–∞–ª –æ–ø–µ—Ä–∞—Ü–∏—é '{operation_name}'. –¶–µ–Ω–∞: {preparation_cost}, –ó–∞–¥–µ—Ä–∂–∫–∞: {operation_delay_seconds}—Å.")

            # –ü–µ—Ä–µ–¥–∞–µ–º original_message_thread_id –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
            asyncio.create_task(
                _delayed_robbank_processing_wrapper(
                    delay_seconds=operation_delay_seconds, 
                    user_id=user_id, 
                    chat_id=chat_id, 
                    operation_name=operation_name, 
                    base_prep_cost=preparation_cost, 
                    bot_instance=message.bot, # –ò—Å–ø–æ–ª—å–∑—É–µ–º message.bot
                    initial_message_thread_id=original_message_thread_id # –ü–µ—Ä–µ–¥–∞–µ–º ID —Ç–µ–º—ã
                )
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /robbank –¥–ª—è user {user_id} –≤ —á–∞—Ç–µ {chat_id} (—Ç–µ–º–∞ {original_message_thread_id}): {e}", exc_info=True)
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                disable_web_page_preview=True) # message.reply() —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–µ–º—É
            await send_telegram_log(message.bot, f"üî¥ –û—à–∏–±–∫–∞ –≤ /robbank –¥–ª—è {user_link} (—Ç–µ–º–∞ {original_message_thread_id}): <pre>{html.escape(str(e))}</pre>")


async def _delayed_robbank_processing_wrapper(
    delay_seconds: int, 
    user_id: int, 
    chat_id: int, 
    operation_name: str, 
    base_prep_cost: int, 
    bot_instance: Bot, 
    initial_message_thread_id: Optional[int] # <-- –ü—Ä–∏–Ω–∏–º–∞–µ–º ID —Ç–µ–º—ã
):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è asyncio.sleep –∏ –≤—ã–∑–æ–≤–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    try:
        await asyncio.sleep(delay_seconds)
        # –ü–µ—Ä–µ–¥–∞–µ–º initial_message_thread_id –¥–∞–ª—å—à–µ
        await _process_robbank_result(user_id, chat_id, operation_name, base_prep_cost, bot_instance, initial_message_thread_id)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ _process_robbank_result –¥–ª—è user {user_id}, chat {chat_id}, op '{operation_name}', —Ç–µ–º–∞ {initial_message_thread_id}: {e}", exc_info=True)
        try:
            await database.update_user_robbank_status(
                user_id, chat_id,
                current_operation_name=None,
                current_operation_start_utc=None,
                current_operation_base_reward=None
            )
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–°, —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–º—ã –º–æ–≥ –±—ã—Ç—å —É—Ç–µ—Ä—è–Ω –∏–ª–∏ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É
            await bot_instance.send_message(user_id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤–∞—à–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ '{html.escape(operation_name)}' –≤ —á–∞—Ç–µ {chat_id}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", parse_mode="HTML", disable_web_page_preview=True)
            await send_telegram_log(bot_instance, f"üî¥ –ö–†–ò–¢. –û–®–ò–ë–ö–ê –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ robbank –¥–ª—è {user_id} (–æ–ø–µ—Ä–∞—Ü–∏—è '{html.escape(operation_name)}', —á–∞—Ç {chat_id}, —Ç–µ–º–∞ {initial_message_thread_id} –æ—Ç–º–µ–Ω–µ–Ω–∞): <pre>{html.escape(str(e))}</pre>")
        except Exception as e_cleanup:
            logger.error(f"–î–≤–æ–π–Ω–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç—É—Å robbank –¥–ª—è user {user_id} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤ _process_robbank_result: {e_cleanup}", exc_info=True)


def setup_robbank_handlers(dp: Router):
    dp.include_router(robbank_router)
    logger.info("<b>–ñ–∏—Ä–Ω—ã–π</b>Robbank command handlers registered.<code>–ö–ª–∏–∫–∞–µ—Ç—Å—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</code>")
